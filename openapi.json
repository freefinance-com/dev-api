{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "FreeFinance REST API",
    "description" : "The REST API to be used with FreeFinance and FinanzFenster. Please read the examples for an introduction to authentication and some use cases.",
    "contact" : {
      "name" : "manubu gmbh",
      "url" : "https://www.freefinance.at",
      "email" : "support@freefinance.at"
    },
    "version" : "1.18"
  },
  "servers" : [ {
    "url" : "https://app.freefinance.at/api/1.1"
  } ],
  "security" : [ {
    "bearerAuth" : [ ]
  } ],
  "tags" : [ {
    "name" : "CashBasedAccounting",
    "description" : "Cash based accounting - creating rebooks"
  }, {
    "name" : "CashBasedInvoicingIncoming",
    "description" : "Cash based invoicing - incoming invoices"
  }, {
    "name" : "CashBasedInvoicingOutgoing",
    "description" : "Cash based invoicing - incoming invoices"
  }, {
    "name" : "DocumentManagement",
    "description" : "Document management - uploading files and retrieving file content"
  }, {
    "name" : "Foundation",
    "description" : "Foundation services"
  }, {
    "name" : "InvoicingCreditMemo",
    "description" : "Invoicing - manipulating credit memos"
  }, {
    "name" : "InvoicingDeliveryNote",
    "description" : "Invoicing - manipulating delivery notes"
  }, {
    "name" : "InvoicingSetup",
    "description" : "Invoicing - setup data"
  }, {
    "name" : "Invoicing",
    "description" : "Invoicing - manipulating invoices"
  }, {
    "name" : "InvoicingOffer",
    "description" : "Invoicing - manipulating offers"
  }, {
    "name" : "InvoicingOrderConfirmation",
    "description" : "Invoicing - manipulating order confirmations"
  }, {
    "name" : "Items",
    "description" : "Item management"
  }, {
    "name" : "MasterDataCustomer",
    "description" : "Master data - creating and editing customers"
  }, {
    "name" : "MasterDataSupplier",
    "description" : "Master data - creating and editing suppliers"
  }, {
    "name" : "PointOfSale",
    "description" : "Point of Sale - handles cash register terminals, creating receipts, and managing daily closings."
  } ],
  "paths" : {
    "/bank_statements" : {
      "get" : {
        "tags" : [ "BankStatementLines" ],
        "description" : "Returns all bank statement headers created by the API or from PSD2.",
        "operationId" : "getAllBankStatementHeaders",
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/BankStatementHeaderDtoV1"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "BankStatementLines" ],
        "description" : "Creates a new bank statement header. Only the header is created, lines are added in a separate call.",
        "operationId" : "postBankStatementHeader",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BankStatementHeaderDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BankStatementHeaderDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/bank_statements/{header_id}" : {
      "get" : {
        "tags" : [ "BankStatementLines" ],
        "description" : "Returns a single bank statement header identified by its id.",
        "operationId" : "getBankStatementHeaderById",
        "parameters" : [ {
          "name" : "header_id",
          "in" : "path",
          "description" : "bank statement id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BankStatementHeaderDtoV1"
                }
              }
            }
          },
          "404" : {
            "description" : "Bank statement with this id not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/bank_statements/{header_id}/lines" : {
      "get" : {
        "tags" : [ "BankStatementLines" ],
        "description" : "Returns the lines of a bank statement, limited by date or number.",
        "operationId" : "getBankStatementLines",
        "parameters" : [ {
          "name" : "header_id",
          "in" : "path",
          "description" : "bank statement id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "from",
          "in" : "query",
          "description" : "Only return lines with a booking date greater than or equal to this value. Must be set together with to.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "to",
          "in" : "query",
          "description" : "Only return lines with a booking date less than or equal to this value. Must be set together with from.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "line_number_gt",
          "in" : "query",
          "description" : "Only return lines with a line number greater than this value.",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BankStatementHeaderDtoV1"
                }
              }
            }
          },
          "404" : {
            "description" : "Bank statement with this id not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/bank_statements/{header}/lines" : {
      "post" : {
        "tags" : [ "BankStatementLines" ],
        "description" : "Creates new lines for a bank statement header. The lines will be appended and numbered automatically.",
        "operationId" : "postBankStatementHeaderLines",
        "parameters" : [ {
          "name" : "header",
          "in" : "path",
          "description" : "bank statement header id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BankStatementRequestDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BankStatementHeaderDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/bank_statements/by_bank_account/{bank_account}/lines" : {
      "post" : {
        "tags" : [ "BankStatementLines" ],
        "description" : "Creates new lines for a singular bank statement header tied to a bank account. If no header exists, it will be created. If more than one header exists, an error will be returned. This resource is used for append-only single statements like PSD2.",
        "operationId" : "postBankStatementHeaderLinesByBankAccount",
        "parameters" : [ {
          "name" : "bank_account",
          "in" : "path",
          "description" : "bank account id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BankStatementRequestDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BankStatementHeaderDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/rebooks" : {
      "post" : {
        "tags" : [ "CashBasedAccounting" ],
        "description" : "Creates a new rebook according to the defined rebook type. See the /accounts/rebook_accounts resource for possible accounts to use with the type.",
        "operationId" : "postRebook",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RebookCreationDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RebookJournalDtoV1"
                }
              }
            }
          },
          "404" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/incoming_invoices/{invoice}" : {
      "get" : {
        "tags" : [ "CashBasedInvoicingIncoming" ],
        "description" : "Returns an incoming invoice referenced by its id.",
        "operationId" : "getIncomingInvoiceById",
        "parameters" : [ {
          "name" : "invoice",
          "in" : "path",
          "description" : "Invoice id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncomingInvoiceDtoV1"
                }
              }
            }
          },
          "404" : {
            "description" : "Invoice not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "CashBasedInvoicingIncoming" ],
        "description" : "Deletes an unpaid incoming invoice. Single-entry accounting (EA) only.",
        "operationId" : "deleteIncomingInvoice",
        "parameters" : [ {
          "name" : "invoice",
          "in" : "path",
          "description" : "Invoice id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "a88cee2d-0a27-439d-a9c3-e9267075f1f1"
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully."
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          },
          "404" : {
            "description" : "Invoice not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/incoming_invoices" : {
      "get" : {
        "tags" : [ "CashBasedInvoicingIncoming" ],
        "description" : "Returns a list of incoming invoices filtered by optional search parameters. A time span (from-to) must be set to limit results. Note that lines and bookings are not returned, use /incoming_invoices/{invoice_id} to fetch these for a single invoice.",
        "operationId" : "getAllIncomingInvoices",
        "parameters" : [ {
          "name" : "from",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "to",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "search_text",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "If the invoices should be PAID, UNPAID, or OVERDUE",
          "schema" : {
            "type" : "string",
            "enum" : [ "ANY", "PAID", "UNPAID", "OVERDUE" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/IncomingInvoiceDtoV1"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "CashBasedInvoicingIncoming" ],
        "description" : "Creates an incoming invoice. Accounts can be found in the /accounts resource. Note that depending on the financial settings, the invoice must be paid. Additionally, for double-entry accounting the invoice is always booked immediately.",
        "operationId" : "postIncomingInvoice",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/IncomingInvoiceCreationDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncomingInvoiceReturnV1Dto"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          },
          "404" : {
            "description" : "Account not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/incoming_invoices/{invoice}/bookings/{booking}" : {
      "get" : {
        "tags" : [ "CashBasedInvoicingIncoming" ],
        "description" : "Returns a single booking for an incoming invoice.",
        "operationId" : "getIncomingInvoiceBookingById",
        "parameters" : [ {
          "name" : "invoice",
          "in" : "path",
          "description" : "Invoice id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "a88cee2d-0a27-439d-a9c3-e9267075f1f1"
        }, {
          "name" : "booking",
          "in" : "path",
          "description" : "Booking id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "6f0ae84a-0517-42b1-b90b-284f9eb9b475"
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvoiceBookingDtoV1"
                }
              }
            }
          },
          "404" : {
            "description" : "Invoice or booking not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/incoming_invoices/{invoice}/bookings" : {
      "get" : {
        "tags" : [ "CashBasedInvoicingIncoming" ],
        "description" : "Returns all bookings for an incoming invoice.",
        "operationId" : "getIncomingInvoiceBookings",
        "parameters" : [ {
          "name" : "invoice",
          "in" : "path",
          "description" : "Invoice id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "a88cee2d-0a27-439d-a9c3-e9267075f1f1"
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/InvoiceBookingDtoV1"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Invoice not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/incoming_invoices/{invoice}/journals/{journal}" : {
      "get" : {
        "tags" : [ "CashBasedInvoicingIncoming" ],
        "description" : "Returns a specific journal booked from an incoming invoice. The booking need not be specified.",
        "operationId" : "getIncomingInvoiceJournalById",
        "parameters" : [ {
          "name" : "invoice",
          "in" : "path",
          "description" : "Invoice id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "a88cee2d-0a27-439d-a9c3-e9267075f1f1"
        }, {
          "name" : "journal",
          "in" : "path",
          "description" : "Journal id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "A2020 1"
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JournalDtoV1"
                }
              }
            }
          },
          "404" : {
            "description" : "Invoice or journal not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/incoming_invoices/{invoice}/journals" : {
      "get" : {
        "tags" : [ "CashBasedInvoicingIncoming" ],
        "description" : "Returns all journals booked from an incoming invoice. The bookings need not be specified.",
        "operationId" : "getIncomingInvoiceJournals",
        "parameters" : [ {
          "name" : "invoice",
          "in" : "path",
          "description" : "Invoice id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "a88cee2d-0a27-439d-a9c3-e9267075f1f1"
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/JournalDtoV1"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Invoice not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/incoming_invoices/{invoice}/bookings/{booking}/cancel" : {
      "post" : {
        "tags" : [ "CashBasedInvoicingIncoming" ],
        "description" : "Cancels a specific booking for an incoming invoice. Only payment and rest payment bookings can be cancelled.",
        "operationId" : "postIncomingInvoiceBookingCancel",
        "parameters" : [ {
          "name" : "invoice",
          "in" : "path",
          "description" : "Invoice id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "a88cee2d-0a27-439d-a9c3-e9267075f1f1"
        }, {
          "name" : "booking",
          "in" : "path",
          "description" : "Booking id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "6f0ae84a-0517-42b1-b90b-284f9eb9b475"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CancellationDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncomingInvoiceReturnV1Dto"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          },
          "404" : {
            "description" : "invoice or booking not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/incoming_invoices/{invoice}/cancel" : {
      "post" : {
        "tags" : [ "CashBasedInvoicingIncoming" ],
        "description" : "Cancels an incoming invoice.",
        "operationId" : "postIncomingInvoiceCancel",
        "parameters" : [ {
          "name" : "invoice",
          "in" : "path",
          "description" : "Invoice id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "a88cee2d-0a27-439d-a9c3-e9267075f1f1"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CancellationDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncomingInvoiceReturnV1Dto"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          },
          "404" : {
            "description" : "Invoice not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/incoming_invoices/{invoice}/pay" : {
      "post" : {
        "tags" : [ "CashBasedInvoicingIncoming" ],
        "description" : "Registers a payment for an incoming invoice. Partial payments are only supported in double-entry accounting.",
        "operationId" : "postIncomingInvoicePayment",
        "parameters" : [ {
          "name" : "invoice",
          "in" : "path",
          "description" : "Invoice id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "a88cee2d-0a27-439d-a9c3-e9267075f1f1"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CbiPaymentDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncomingInvoiceReturnV1Dto"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          },
          "404" : {
            "description" : "Invoice not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/incoming_invoices/{invoice}/pay_rest" : {
      "post" : {
        "tags" : [ "CashBasedInvoicingIncoming" ],
        "description" : "Registers the rest payment for an incoming invoice (like discount), which marks the invoice as paid. Double-entry accounting only.",
        "operationId" : "postIncomingInvoicePaymentRest",
        "parameters" : [ {
          "name" : "invoice",
          "in" : "path",
          "description" : "Invoice id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "a88cee2d-0a27-439d-a9c3-e9267075f1f1"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RestPaymentDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncomingInvoiceReturnV1Dto"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          },
          "404" : {
            "description" : "Invoice not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/outgoing_invoices/{invoice}" : {
      "get" : {
        "tags" : [ "CashBasedInvoicingOutgoing" ],
        "description" : "Returns an outgoing invoice referenced by its id.",
        "operationId" : "getOutgoingInvoiceById",
        "parameters" : [ {
          "name" : "invoice",
          "in" : "path",
          "description" : "Invoice id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OutgoingInvoiceDtoV1"
                }
              }
            }
          },
          "404" : {
            "description" : "Invoice not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "CashBasedInvoicingOutgoing" ],
        "description" : "Deletes an unpaid outgoing invoice. Single-entry accounting (EA) only.",
        "operationId" : "deleteOutgoingInvoice",
        "parameters" : [ {
          "name" : "invoice",
          "in" : "path",
          "description" : "Invoice id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "a88cee2d-0a27-439d-a9c3-e9267075f1f1"
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully."
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          },
          "404" : {
            "description" : "Invoice not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/outgoing_invoices" : {
      "get" : {
        "tags" : [ "CashBasedInvoicingOutgoing" ],
        "description" : "Returns a list of outgoing invoices filtered by optional search parameters. A time span (from-to) must be set to limit results. Note that lines and bookings are not returned, use /outgoing_invoices/{invoice_id} to fetch these for a single invoice.",
        "operationId" : "getAllOutgoingInvoices",
        "parameters" : [ {
          "name" : "from",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "to",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "search_text",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "If the invoices should be PAID, UNPAID, or OVERDUE",
          "schema" : {
            "type" : "string",
            "enum" : [ "ANY", "PAID", "UNPAID", "OVERDUE" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/OutgoingInvoiceDtoV1"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "CashBasedInvoicingOutgoing" ],
        "description" : "Creates an outgoing invoice. Accounts can be found in the /accounts resource. Note that depending on the financial settings, the invoice must be paid. Additionally, for double-entry accounting the invoice is always booked immediately.",
        "operationId" : "postOutgoingInvoice",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OutgoingInvoiceCreationDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OutgoingInvoiceReturnV1Dto"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          },
          "404" : {
            "description" : "Account not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/outgoing_invoices/{invoice}/bookings/{booking}" : {
      "get" : {
        "tags" : [ "CashBasedInvoicingOutgoing" ],
        "description" : "Returns a single booking for an outgoing invoice.",
        "operationId" : "getOutgoingInvoiceBookingById",
        "parameters" : [ {
          "name" : "invoice",
          "in" : "path",
          "description" : "Invoice id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "a88cee2d-0a27-439d-a9c3-e9267075f1f1"
        }, {
          "name" : "booking",
          "in" : "path",
          "description" : "Booking id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "6f0ae84a-0517-42b1-b90b-284f9eb9b475"
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OutgoingInvoiceDtoV1"
                }
              }
            }
          },
          "404" : {
            "description" : "Invoice or booking not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/outgoing_invoices/{invoice}/bookings" : {
      "get" : {
        "tags" : [ "CashBasedInvoicingOutgoing" ],
        "description" : "Returns all bookings for an outgoing invoice.",
        "operationId" : "getOutgoingInvoiceBookings",
        "parameters" : [ {
          "name" : "invoice",
          "in" : "path",
          "description" : "Invoice id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "a88cee2d-0a27-439d-a9c3-e9267075f1f1"
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvoiceBookingDtoV1"
                }
              }
            }
          },
          "404" : {
            "description" : "Invoice not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/outgoing_invoices/{invoice}/journals/{journal}" : {
      "get" : {
        "tags" : [ "CashBasedInvoicingOutgoing" ],
        "description" : "Returns a specific journal booked from an outgoing invoice. The booking need not be specified.",
        "operationId" : "getOutgoingInvoiceJournalById",
        "parameters" : [ {
          "name" : "invoice",
          "in" : "path",
          "description" : "Invoice id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "a88cee2d-0a27-439d-a9c3-e9267075f1f1"
        }, {
          "name" : "journal",
          "in" : "path",
          "description" : "Journal id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "E2020 1"
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JournalDtoV1"
                }
              }
            }
          },
          "404" : {
            "description" : "Invoice or booking not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/outgoing_invoices/{invoice}/journals" : {
      "get" : {
        "tags" : [ "CashBasedInvoicingOutgoing" ],
        "description" : "Returns all journals booked from an outgoing invoice. The bookings need not be specified.",
        "operationId" : "getOutgoingInvoiceJournals",
        "parameters" : [ {
          "name" : "invoice",
          "in" : "path",
          "description" : "Invoice id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "a88cee2d-0a27-439d-a9c3-e9267075f1f1"
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/JournalDtoV1"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Invoice not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/outgoing_invoices/{invoice}/bookings/{booking}/cancel" : {
      "post" : {
        "tags" : [ "CashBasedInvoicingOutgoing" ],
        "description" : "Cancels a specific booking for an outgoing invoice. Only payment and rest payment bookings can be cancelled.",
        "operationId" : "postOutgoingInvoiceBookingCancel",
        "parameters" : [ {
          "name" : "invoice",
          "in" : "path",
          "description" : "Invoice id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "a88cee2d-0a27-439d-a9c3-e9267075f1f1"
        }, {
          "name" : "booking",
          "in" : "path",
          "description" : "Booking id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "6f0ae84a-0517-42b1-b90b-284f9eb9b475"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CancellationDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OutgoingInvoiceReturnV1Dto"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          },
          "404" : {
            "description" : "invoice or booking not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/outgoing_invoices/{invoice}/cancel" : {
      "post" : {
        "tags" : [ "CashBasedInvoicingOutgoing" ],
        "description" : "Cancels an outgoing invoice.",
        "operationId" : "postOutgoingInvoiceCancel",
        "parameters" : [ {
          "name" : "invoice",
          "in" : "path",
          "description" : "Invoice id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "a88cee2d-0a27-439d-a9c3-e9267075f1f1"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CancellationDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OutgoingInvoiceReturnV1Dto"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          },
          "404" : {
            "description" : "Invoice not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/outgoing_invoices/{invoice}/pay" : {
      "post" : {
        "tags" : [ "CashBasedInvoicingOutgoing" ],
        "description" : "Registers a payment for an outgoing invoice. Partial payments are only supported in double-entry accounting.",
        "operationId" : "postOutgoingInvoicePayment",
        "parameters" : [ {
          "name" : "invoice",
          "in" : "path",
          "description" : "Invoice id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "a88cee2d-0a27-439d-a9c3-e9267075f1f1"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CbiPaymentDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OutgoingInvoiceReturnV1Dto"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          },
          "404" : {
            "description" : "Invoice not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/outgoing_invoices/{invoice}/pay_rest" : {
      "post" : {
        "tags" : [ "CashBasedInvoicingOutgoing" ],
        "description" : "Registers the rest payment for an outgoing invoice (like discount), which marks the invoice as paid. Double-entry accounting only.",
        "operationId" : "postOutgoingInvoicePaymentRest",
        "parameters" : [ {
          "name" : "invoice",
          "in" : "path",
          "description" : "Invoice id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "a88cee2d-0a27-439d-a9c3-e9267075f1f1"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RestPaymentDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OutgoingInvoiceReturnV1Dto"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          },
          "404" : {
            "description" : "Invoice not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/accounts/{account}" : {
      "get" : {
        "tags" : [ "CashBasedSetup" ],
        "description" : "Returns a specific account by its account number.",
        "operationId" : "getAccountById",
        "parameters" : [ {
          "name" : "account",
          "in" : "path",
          "description" : "Account code",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : 4000
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountDtoV1"
                }
              }
            }
          },
          "404" : {
            "description" : "Account not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/accounts/balances" : {
      "get" : {
        "tags" : [ "CashBasedSetup" ],
        "description" : "Returns the account balances over the specified time period, calculated as the sum of all bookings.",
        "operationId" : "getAccountSumBalances",
        "parameters" : [ {
          "name" : "method",
          "in" : "query",
          "description" : "Calculation method to use, default is N (net).",
          "schema" : {
            "type" : "string",
            "enum" : [ "N,T" ]
          },
          "example" : "N"
        }, {
          "name" : "from",
          "in" : "query",
          "description" : "Include bookings from this date onward. Defaults to beginning of this year.",
          "schema" : {
            "type" : "string"
          },
          "example" : "2020-01-01"
        }, {
          "name" : "to",
          "in" : "query",
          "description" : "Include bookings up to this date. Defaults to end of this year.",
          "schema" : {
            "type" : "string"
          },
          "example" : "2020-12-31"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Account type code to filter (if available), examples are E (revenue), M (revenue gastronomy), A (expenses), L (assets), S (miscellaneous), U (cash, rebooks, etc.)",
          "schema" : {
            "type" : "string",
            "enum" : [ "E, A, L, W, G, Z, S, F, U, C, M, N, P, R, B" ]
          },
          "example" : "E"
        }, {
          "name" : "opening_balances",
          "in" : "query",
          "description" : "If opening balances should be included in the calculation",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "closing_entries",
          "in" : "query",
          "description" : "If closing entries should be included in the calculation",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "filterNullValues",
          "in" : "query",
          "description" : "Whether values that add up to 0 should be shown or not",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "compactReceivables",
          "in" : "query",
          "description" : "Group payables/receivables accounts together",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "dbhCreditDebit",
          "in" : "query",
          "description" : "Split results into credit and debit (ignored if no double-entry accounting)",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccountDtoV1"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/accounts/balances_per_month" : {
      "get" : {
        "tags" : [ "CashBasedSetup" ],
        "description" : "Returns the account balances over the specified time period, calculated as the sum of all bookings per month.",
        "operationId" : "getAccountSumBalancesPerMonth",
        "parameters" : [ {
          "name" : "fiscal_year",
          "in" : "query",
          "description" : "The fiscal year as basis for the balance calculation",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          },
          "example" : 2021
        }, {
          "name" : "opening_balances",
          "in" : "query",
          "description" : "If opening balances should be included in the calculation",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "closing_entries",
          "in" : "query",
          "description" : "If closing entries should be included in the calculation",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "totals",
          "in" : "query",
          "description" : "If totals should be calculated for each account",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "method",
          "in" : "query",
          "description" : "Calculation method to use (net or total), default is N (net)",
          "schema" : {
            "type" : "string",
            "enum" : [ "N,T" ]
          },
          "example" : "N"
        }, {
          "name" : "filterNullValues",
          "in" : "query",
          "description" : "Whether values that add up to 0 should be shown or not",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "compactReceivables",
          "in" : "query",
          "description" : "Group payables/receivables accounts together",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccountLineDtoV1"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/accounts/{account}/tax_class_entries" : {
      "get" : {
        "tags" : [ "CashBasedSetup" ],
        "description" : "Returns all tax class entries for an account. A tax class entry references a specific tax rate for a business document line or item.",
        "operationId" : "getAccountTaxClassEntryBulk",
        "parameters" : [ {
          "name" : "account",
          "in" : "path",
          "description" : "Account code",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : 4000
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/TaxClassEntryDtoV1"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Account not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/accounts/{account}/tax_class_entries/{tax_class_entry}" : {
      "get" : {
        "tags" : [ "CashBasedSetup" ],
        "description" : "Returns a specific tax class entry for an account.",
        "operationId" : "getAccountTaxClassEntryById",
        "parameters" : [ {
          "name" : "account",
          "in" : "path",
          "description" : "Account code",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : 4000
        }, {
          "name" : "tax_class_entry",
          "in" : "path",
          "description" : "Tax class entry code",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "020"
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaxClassEntryDtoV1"
                }
              }
            }
          },
          "404" : {
            "description" : "Account or tax class entry not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/accounts" : {
      "get" : {
        "tags" : [ "CashBasedSetup" ],
        "description" : "Returns all accounts. Accounts are required for cash based invoicing and business document lines and can be optionally added to items. Every account has one or multiple tax class entries, which define the tax rate for the line.",
        "operationId" : "getAllAccounts",
        "parameters" : [ {
          "name" : "type",
          "in" : "query",
          "description" : "Account type code to filter (if available), examples are E (revenue), M (revenue gastronomy), A (expenses), L (assets), S (miscellaneous), U (cash, rebooks, etc.)",
          "schema" : {
            "type" : "string",
            "enum" : [ "E, A, L, W, G, Z, S, F, U, C, M, N, P, R, B" ]
          },
          "example" : "E"
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccountDtoV1"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/accounts/item_accounts" : {
      "get" : {
        "tags" : [ "CashBasedSetup" ],
        "description" : "Returns all accounts that can be used for items. This includes income, receivables and coupon accounts.",
        "operationId" : "getAllAccountsItem",
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccountDtoV1"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/accounts/rebook_accounts" : {
      "get" : {
        "tags" : [ "CashBasedSetup" ],
        "description" : "Returns all accounts that are available as the from-account in rebooks, depending on type.",
        "operationId" : "getAllAccountsRebook",
        "parameters" : [ {
          "name" : "type",
          "in" : "query",
          "description" : "Rebook type: REBOOK (default), CORRECTION, FINALIZATION (for special bookings)",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "REBOOK", "CORRECTION", "FINALIZATION", "BALANCE" ]
          },
          "example" : "REBOOK"
        }, {
          "name" : "date",
          "in" : "query",
          "description" : "Effective date of accounts, defaults to today",
          "schema" : {
            "type" : "string"
          },
          "example" : "2020-12-31"
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "Additional filter string, optional",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccountDtoV1"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/accounts/{account}/rebook_contra_accounts" : {
      "get" : {
        "tags" : [ "CashBasedSetup" ],
        "description" : "Returns all accounts that are available as the to-account in rebooks, depending on the type and from-account.",
        "operationId" : "getAllAccountsRebookContra",
        "parameters" : [ {
          "name" : "account",
          "in" : "path",
          "description" : "Account code",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : 4000
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Rebook type: REBOOK (default), CORRECTION, FINALIZATION (for special bookings)",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "REBOOK", "CORRECTION", "FINALIZATION", "BALANCE" ]
          },
          "example" : "REBOOK"
        }, {
          "name" : "date",
          "in" : "query",
          "description" : "Effective date of accounts, defaults to today",
          "schema" : {
            "type" : "string"
          },
          "example" : "2020-01-01"
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "Additional filter string, optional",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          },
          "404" : {
            "description" : "Account not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/accounts/receipt_accounts" : {
      "get" : {
        "tags" : [ "CashBasedSetup" ],
        "description" : "Returns all accounts that can be used for item lines in cash register receipts. This includes income and receivables accounts.",
        "operationId" : "getAllAccountsReceipt",
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccountDtoV1"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/bank_accounts/{bank_account}" : {
      "get" : {
        "tags" : [ "CashBasedSetup" ],
        "description" : "Get a specific bank account by id",
        "operationId" : "getBankAccountById",
        "parameters" : [ {
          "name" : "bank_account",
          "in" : "path",
          "description" : "Bank account id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BankAccountDtoV1"
                }
              }
            }
          },
          "404" : {
            "description" : "Bank account not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/bank_accounts" : {
      "get" : {
        "tags" : [ "CashBasedSetup" ],
        "description" : "Returns all bank accounts.",
        "operationId" : "getBankAccounts",
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/BankAccountDtoV1"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/documents/staging" : {
      "get" : {
        "tags" : [ "DocumentManagement" ],
        "description" : "Returns all current documents in the designated staging folder.",
        "operationId" : "getAllStaging",
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DocumentWithMetadataDtoV1"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "DocumentManagement" ],
        "description" : "Creates a new document in the staging folder and uploads one or multiple files in a multipart request. The metadata body defines optional attributes to add to the document. The multipart attachment can be one file of a supported type (PDF, images) or multiple images, which are then merged into a single PDF in the backend. See the examples for a multipart request.",
        "operationId" : "postStaging",
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/DocumentUploadDtoV1"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DocumentWithMetadataDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/documents/{provider}/{providerId}/binary" : {
      "get" : {
        "tags" : [ "DocumentManagement" ],
        "description" : "Returns a specific document and its metadata. The path parameter consists of the document provider (internal DMS, or external like Dropbox) and the provider id for the file.",
        "operationId" : "getDocument",
        "parameters" : [ {
          "name" : "provider",
          "in" : "path",
          "description" : "Provider (DMS or DROPBOX)",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "DMS", "DROPBOX", "GOOGLE_DRIVE", "NEXTCLOUD", "ONEDRIVE" ]
          }
        }, {
          "name" : "providerId",
          "in" : "path",
          "description" : "Provider designated id for the document",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DocumentWithMetadataDtoV1"
                }
              }
            }
          },
          "404" : {
            "description" : "Document not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/documents/{provider}/{providerId}" : {
      "get" : {
        "tags" : [ "DocumentManagement" ],
        "description" : "Returns the binary data for a document.",
        "operationId" : "getDocumentBinary",
        "parameters" : [ {
          "name" : "provider",
          "in" : "path",
          "description" : "Provider (DMS or DROPBOX)",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "DMS", "DROPBOX", "GOOGLE_DRIVE", "NEXTCLOUD", "ONEDRIVE" ]
          }
        }, {
          "name" : "providerId",
          "in" : "path",
          "description" : "Provider designated id for the document",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "type" : "string",
                  "format" : "binary"
                }
              }
            }
          },
          "404" : {
            "description" : "Document not found.",
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/documents/staging/json" : {
      "post" : {
        "tags" : [ "DocumentManagement" ],
        "description" : "Creates a new document in the staging folder and uploads a base64-encoded file. The metadata defines optional attributes to add to the document.",
        "operationId" : "postStagingJson",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DocumentJsonUploadDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DocumentWithMetadataDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/countries" : {
      "get" : {
        "tags" : [ "Foundation" ],
        "description" : "Returns all countries.",
        "operationId" : "getAllCountries",
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CountryDtoV1"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/countries/{country}/regions" : {
      "get" : {
        "tags" : [ "Foundation" ],
        "description" : "Get all regions for a country",
        "operationId" : "getAllRegions",
        "parameters" : [ {
          "name" : "country",
          "in" : "path",
          "description" : "Country code",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "AT"
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RegionDtoV1"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Country not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/countries/{country}" : {
      "get" : {
        "tags" : [ "Foundation" ],
        "description" : "Returns a specific country by its country code.",
        "operationId" : "getCountry",
        "parameters" : [ {
          "name" : "country",
          "in" : "path",
          "description" : "Country code",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "AT"
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CountryDtoV1"
                }
              }
            }
          },
          "404" : {
            "description" : "Country not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/countries/{country}/regions/{region}" : {
      "get" : {
        "tags" : [ "Foundation" ],
        "description" : "Get a specific region for a country",
        "operationId" : "getRegion",
        "parameters" : [ {
          "name" : "country",
          "in" : "path",
          "description" : "Country code",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "AT"
        }, {
          "name" : "region",
          "in" : "path",
          "description" : "Region code",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "STMK"
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RegionDtoV1"
                }
              }
            }
          },
          "404" : {
            "description" : "Country or region not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/currencies" : {
      "get" : {
        "tags" : [ "Foundation" ],
        "description" : "Returns all currencies.",
        "operationId" : "getAllCurrencies",
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CurrencyDtoV1"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/notifications" : {
      "post" : {
        "tags" : [ "Foundation" ],
        "description" : "Returns all unread notifications and marks them as read.",
        "operationId" : "getUnreadNotifications",
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NotificationDtoV1"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/session" : {
      "delete" : {
        "tags" : [ "Foundation" ],
        "description" : "Revokes the active session and invalidates the refresh token.",
        "operationId" : "revokeSession",
        "parameters" : [ {
          "name" : "refresh_token",
          "in" : "query",
          "description" : "Current refresh token of the session.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "Operation completed successfully."
          }
        }
      }
    },
    "/units_of_measure" : {
      "get" : {
        "tags" : [ "Foundation" ],
        "description" : "Returns all units of measure.",
        "operationId" : "getAllUnitsOfMeasure",
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UnitOfMeasureDtoV1"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/credit_memos/{credit_memo}/payments/{payment}/cancel" : {
      "post" : {
        "tags" : [ "InvoicingCreditMemo" ],
        "description" : "Cancels a payment for a credit memo.",
        "operationId" : "cancelCreditMemoPayment",
        "parameters" : [ {
          "name" : "credit_memo",
          "in" : "path",
          "description" : "Credit memo number",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "G 2016-0001"
        }, {
          "name" : "payment",
          "in" : "path",
          "description" : "Payment id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Payment cancellation info",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentCancellationDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PaymentHistoryDtoV1"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          },
          "404" : {
            "description" : "Invoice or payment not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/credit_memos" : {
      "get" : {
        "tags" : [ "InvoicingCreditMemo" ],
        "description" : "Returns all finalized and external credit memos. Documents created for staging do not have a number and are therefore not returned over the API.",
        "operationId" : "getAllCreditMemos",
        "parameters" : [ {
          "name" : "updated_since",
          "in" : "query",
          "description" : "Return only documents updated after this timestamp in milliseconds (Instant.now().toEpochMilli())",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 1479497595571
        }, {
          "name" : "paid",
          "in" : "query",
          "description" : "Return only paid (true) or unpaid (false) credit memos",
          "schema" : {
            "type" : "boolean"
          },
          "example" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CreditMemoDtoV1"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "InvoicingCreditMemo" ],
        "description" : "Creates a new credit memo. Depending on the supplied state, credit memos are either created for staging (and completed manually) or immediately finalized. Once finalized, a number is assigned and the PDF is created. If a number is coming from an external system, the EXTERNAL state and an id must be set. External documents cannot be edited and no PDF is created.",
        "operationId" : "postCreditMemo",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreditMemoDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreditMemoDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/credit_memos/{credit_memo}" : {
      "get" : {
        "tags" : [ "InvoicingCreditMemo" ],
        "description" : "Returns a specific credit memo by its number. Staging documents cannot be retrieved with this resource.",
        "operationId" : "getCreditMemo",
        "parameters" : [ {
          "name" : "credit_memo",
          "in" : "path",
          "description" : "Credit memo number",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "G 2016-0001"
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreditMemoDtoV1"
                }
              }
            }
          },
          "404" : {
            "description" : "Credit memo not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/credit_memos/{credit_memo}/bookings" : {
      "get" : {
        "tags" : [ "InvoicingCreditMemo" ],
        "description" : "Returns all non-payment bookings for a specific credit memo.",
        "operationId" : "getCreditMemoBookings",
        "parameters" : [ {
          "name" : "credit_memo",
          "in" : "path",
          "description" : "Credit memo number",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "G 2016-0001"
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PaymentHistoryDtoV1"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Credit memo  not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/credit_memos/{credit_memo}/document" : {
      "get" : {
        "tags" : [ "InvoicingCreditMemo" ],
        "description" : "Returns the current PDF document of a specific credit memo as binary data.",
        "operationId" : "getCreditMemoDocument",
        "parameters" : [ {
          "name" : "credit_memo",
          "in" : "path",
          "description" : "Credit memo number",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "G 2016-0001"
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "type" : "string",
                  "format" : "binary"
                }
              }
            }
          },
          "404" : {
            "description" : "Credit memo or document not found.",
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/credit_memos/{credit_memo}/payments" : {
      "get" : {
        "tags" : [ "InvoicingCreditMemo" ],
        "description" : "Returns all payments for a specific credit memo.",
        "operationId" : "getCreditMemoPayments",
        "parameters" : [ {
          "name" : "credit_memo",
          "in" : "path",
          "description" : "Credit memo number",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "G 2016-0001"
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PaymentHistoryDtoV1"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Credit memo not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "InvoicingCreditMemo" ],
        "description" : "Creates a new payment for a credit memo. ",
        "operationId" : "postCreditMemoPayment",
        "parameters" : [ {
          "name" : "credit_memo",
          "in" : "path",
          "description" : "Credit memo number",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "G 2016-0001"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreditMemoPaymentDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PaymentHistoryDtoV1"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          },
          "404" : {
            "description" : "Credit memo  not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/credit_memos/{credit_memo}/cancel" : {
      "post" : {
        "tags" : [ "InvoicingCreditMemo" ],
        "description" : "Cancels a specific credit memo. Only finalized or external documents can be cancelled.",
        "operationId" : "postCreditMemoCancel",
        "parameters" : [ {
          "name" : "credit_memo",
          "in" : "path",
          "description" : "Credit memo number",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "G 2016-0001"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BusinessDocumentCancelDtoV1"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreditMemoDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          },
          "404" : {
            "description" : "Credit memo not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/delivery_notes" : {
      "get" : {
        "tags" : [ "InvoicingDeliveryNote" ],
        "description" : "Returns all finalized and external delivery notes. Documents created for staging do not have a number and are therefore not returned over the API.",
        "operationId" : "getAllDeliveryNotes",
        "parameters" : [ {
          "name" : "updated_since",
          "in" : "query",
          "description" : "Return only documents updated after this timestamp in milliseconds (Instant.now().toEpochMilli())",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 1479497595571
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PaymentHistoryDtoV1"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "InvoicingDeliveryNote" ],
        "description" : "Creates a new delivery note. Depending on the supplied state, delivery notes are either created for staging (and completed manually) or immediately finalized. Once finalized, a number is assigned and the PDF created. If a number is coming from an external system, the EXTERNAL state and an id must be set. External documents cannot be edited and no PDF is created.",
        "operationId" : "postDeliveryNote",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DeliveryNoteDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DeliveryNoteDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/delivery_notes/{delivery_note}" : {
      "get" : {
        "tags" : [ "InvoicingDeliveryNote" ],
        "description" : "Returns a specific delivery note by its number. Staging documents cannot be retrieved with this resource.",
        "operationId" : "getDeliveryNote",
        "parameters" : [ {
          "name" : "delivery_note",
          "in" : "path",
          "description" : "Delivery note number",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "L 2016-0001"
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DeliveryNoteDtoV1"
                }
              }
            }
          },
          "404" : {
            "description" : "Delivery note not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/delivery_notes/{delivery_note}/document" : {
      "get" : {
        "tags" : [ "InvoicingDeliveryNote" ],
        "description" : "Returns the current PDF document of a specific delivery note as binary data.",
        "operationId" : "getDeliveryNoteDocument",
        "parameters" : [ {
          "name" : "delivery_note",
          "in" : "path",
          "description" : "Delivery note number",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "L 2016-0001"
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "type" : "string",
                  "format" : "binary"
                }
              }
            }
          },
          "404" : {
            "description" : "Delivery note or document not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/delivery_notes/{delivery_note}/cancel" : {
      "post" : {
        "tags" : [ "InvoicingDeliveryNote" ],
        "description" : "Cancels a specific delivery note. Only finalized or external documents can be cancelled.",
        "operationId" : "postDeliveryNoteCancel",
        "parameters" : [ {
          "name" : "delivery_note",
          "in" : "path",
          "description" : "Delivery note number",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "L 2016-0001"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BusinessDocumentCancelDtoV1"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DeliveryNoteDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          },
          "404" : {
            "description" : "Delivery note not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/delivery_notes/{delivery_note}/complete" : {
      "post" : {
        "tags" : [ "InvoicingDeliveryNote" ],
        "description" : "Marks a specific delivery note as completed. Only finalized (and unfulfilled) delivery notes can be completed.",
        "operationId" : "postDeliveryNoteComplete",
        "parameters" : [ {
          "name" : "delivery_note",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BusinessDocumentCompletionDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DeliveryNoteDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          },
          "404" : {
            "description" : "Delivery note not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/dunning_levels" : {
      "get" : {
        "tags" : [ "InvoicingSetup" ],
        "description" : "Returns all dunning levels.",
        "operationId" : "getAllDunningLevels",
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DunningLevelDtoV1"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/dunning_levels/first_levels" : {
      "get" : {
        "tags" : [ "InvoicingSetup" ],
        "description" : "Returns all fist dunning levels without a previous dunning level",
        "operationId" : "getAllFirstDunningLevels",
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DunningLevelDtoV1"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/invoices/{invoice}/payments/{payment}/cancel" : {
      "post" : {
        "tags" : [ "Invoicing" ],
        "description" : "Cancels a payment for an invoice.",
        "operationId" : "cancelInvoicePayment",
        "parameters" : [ {
          "name" : "invoice",
          "in" : "path",
          "description" : "Invoice number",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "R 2016-0001"
        }, {
          "name" : "payment",
          "in" : "path",
          "description" : "Payment id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Payment cancellation info",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentCancellationDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PaymentHistoryDtoV1"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          },
          "404" : {
            "description" : "Invoice or payment not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/invoices" : {
      "get" : {
        "tags" : [ "Invoicing" ],
        "description" : "Returns all finalized and external invoices. Documents created for staging do not have a number and are therefore not returned over the API.",
        "operationId" : "getAllInvoices",
        "parameters" : [ {
          "name" : "updated_since",
          "in" : "query",
          "description" : "Return only invoices updated after this timestamp in milliseconds (Instant.now().toEpochMilli())",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 1479497595571
        }, {
          "name" : "paid",
          "in" : "query",
          "description" : "Return only paid (true) or unpaid (false) invoices",
          "schema" : {
            "type" : "boolean"
          },
          "example" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/InvoiceDtoV1"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Invoicing" ],
        "description" : "Creates a new invoice. Depending on the supplied state, invoices are either created for staging (and completed manually) or immediately finalized. Once finalized, a number is assigned and the PDF created. If a number is coming from an external system, the EXTERNAL state and an id must be set. External documents cannot be edited and no PDF is created.",
        "operationId" : "postInvoice",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvoiceDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/invoices/{invoice}" : {
      "get" : {
        "tags" : [ "Invoicing" ],
        "description" : "Returns a specific invoice by its number. Staging documents cannot be retrieved with this resource.",
        "operationId" : "getInvoice",
        "parameters" : [ {
          "name" : "invoice",
          "in" : "path",
          "description" : "Invoice number",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "R 2016-0001"
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvoiceDtoV1"
                }
              }
            }
          },
          "404" : {
            "description" : "Invoice not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/invoices/{invoice}/bookings" : {
      "get" : {
        "tags" : [ "Invoicing" ],
        "description" : "Returns all non-payment bookings for a specific invoice.",
        "operationId" : "getInvoiceBookings",
        "parameters" : [ {
          "name" : "invoice",
          "in" : "path",
          "description" : "Invoice number",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "R 2016-0001"
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PaymentHistoryDtoV1"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Invoice not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/invoices/{invoice}/document" : {
      "get" : {
        "tags" : [ "Invoicing" ],
        "description" : "Returns the current PDF document of a specific invoice as binary data.",
        "operationId" : "getInvoiceDocument",
        "parameters" : [ {
          "name" : "invoice",
          "in" : "path",
          "description" : "Invoice number",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "R 2016-0001"
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "type" : "string",
                  "format" : "array"
                }
              }
            }
          },
          "404" : {
            "description" : "Invoice or document not found.",
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/invoices/{invoice}/payments" : {
      "get" : {
        "tags" : [ "Invoicing" ],
        "description" : "Returns all payments for a specific invoice.",
        "operationId" : "getInvoicePayments",
        "parameters" : [ {
          "name" : "invoice",
          "in" : "path",
          "description" : "Invoice number",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "R 2016-0001"
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PaymentHistoryDtoV1"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Invoice not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Invoicing" ],
        "description" : "Creates a new payment for an invoice.",
        "operationId" : "postInvoicePayment",
        "parameters" : [ {
          "name" : "invoice",
          "in" : "path",
          "description" : "Invoice number",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "R 2016-0001"
        } ],
        "requestBody" : {
          "description" : "Payment to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoicePaymentDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PaymentHistoryDtoV1"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          },
          "404" : {
            "description" : "Invoice not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/invoices/{invoice}/cancel" : {
      "post" : {
        "tags" : [ "Invoicing" ],
        "description" : "Cancels a specific invoice. Only finalized or external documents can be cancelled.",
        "operationId" : "postInvoiceCancel",
        "parameters" : [ {
          "name" : "invoice",
          "in" : "path",
          "description" : "Invoice number",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "R 2016-0001"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BusinessDocumentCancelDtoV1"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CancelledInvoiceDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          },
          "404" : {
            "description" : "Invoice not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/invoice_templates/{invoice}" : {
      "delete" : {
        "tags" : [ "InvoicingInvoiceTemplates" ],
        "description" : "Deletes an existing invoice template.",
        "operationId" : "deleteInvoiceTemplate",
        "parameters" : [ {
          "name" : "invoice",
          "in" : "path",
          "description" : "Invoice id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "5665af78-cc67-4910-b030-f649fde5d8a8"
        } ],
        "responses" : {
          "204" : {
            "description" : "Operation completed successfully."
          },
          "404" : {
            "description" : "Invoice not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/invoice_templates" : {
      "get" : {
        "tags" : [ "InvoicingInvoiceTemplates" ],
        "description" : "Returns all invoice templates.",
        "operationId" : "getAllInvoiceTemplates",
        "parameters" : [ {
          "name" : "search",
          "in" : "query",
          "description" : "Search for specific keywords",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include_subscriptions",
          "in" : "query",
          "description" : "Include subscription invoice templates, default false.",
          "schema" : {
            "type" : "boolean"
          },
          "example" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/InvoiceTemplateDtoV1"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "InvoicingInvoiceTemplates" ],
        "description" : "Creates a new invoice template.",
        "operationId" : "postInvoiceTemplate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceTemplateDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OfferTemplateDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/invoice_templates/{template}" : {
      "get" : {
        "tags" : [ "InvoicingInvoiceTemplates" ],
        "description" : "Returns a specific invoice template by its id.",
        "operationId" : "getInvoiceTemplate",
        "parameters" : [ {
          "name" : "template",
          "in" : "path",
          "description" : "Invoice template id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "5665af78-cc67-4910-b030-f649fde5d8a8"
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/InvoiceTemplateDtoV1"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "InvoicingInvoiceTemplates" ],
        "description" : "Update a existing invoice template.",
        "operationId" : "putInvoiceTemplate",
        "parameters" : [ {
          "name" : "template",
          "in" : "path",
          "description" : "Invoice template id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "5665af78-cc67-4910-b030-f649fde5d8a8"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceTemplateDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvoiceTemplateDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/layout_setups" : {
      "get" : {
        "tags" : [ "InvoicingSetup" ],
        "description" : "Returns all layout setups. A layout setup can be supplied when finalizing business documents to change the PDF layout.",
        "operationId" : "getAllLayoutSetups",
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/LayoutSetupDtoV1"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/offers" : {
      "get" : {
        "tags" : [ "InvoicingOffer" ],
        "description" : "Returns all finalized and external offers. Documents created for staging do not have a number and are therefore not returned over the API.",
        "operationId" : "getAllOffers",
        "parameters" : [ {
          "name" : "updated_since",
          "in" : "query",
          "description" : "Return only documents updated after this timestamp in milliseconds (Instant.now().toEpochMilli())",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 1479497595571
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/OfferDtoV1"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "InvoicingOffer" ],
        "description" : "Creates a new offer. Depending on the supplied state, offers are either created for staging (and completed manually) or immediately finalized. Once finalized, a number is assigned and the PDF created. If a number is coming from an external system, the EXTERNAL state and an id must be set. External documents cannot be edited and no PDF is created.",
        "operationId" : "postOffer",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OfferDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OfferDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/offers/{offer}" : {
      "get" : {
        "tags" : [ "InvoicingOffer" ],
        "description" : "Returns a specific offer by its number. Staging documents cannot be retrieved with this resource.",
        "operationId" : "getOffer",
        "parameters" : [ {
          "name" : "offer",
          "in" : "path",
          "description" : "Offer number",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "A 2016-0001"
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OfferDtoV1"
                }
              }
            }
          },
          "404" : {
            "description" : "Offer not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/offers/{offer}/document" : {
      "get" : {
        "tags" : [ "InvoicingOffer" ],
        "description" : "Returns the current PDF document of a specific offer as binary data.",
        "operationId" : "getOfferDocument",
        "parameters" : [ {
          "name" : "offer",
          "in" : "path",
          "description" : "Offer number",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "A 2016-0001"
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "type" : "string",
                  "format" : "binary"
                }
              }
            }
          },
          "404" : {
            "description" : "offer document not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          },
          "400" : {
            "description" : "offer not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/offers/{offer}/cancel" : {
      "post" : {
        "tags" : [ "InvoicingOffer" ],
        "description" : "Cancel a specific offer. Only finalized or external documents can be cancelled.",
        "operationId" : "postOfferCancel",
        "parameters" : [ {
          "name" : "offer",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BusinessDocumentCancelDtoV1"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OfferDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          },
          "404" : {
            "description" : "Offer not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/offers/{offer}/complete" : {
      "post" : {
        "tags" : [ "InvoicingOffer" ],
        "description" : "Marks a specific offer as completed. Only finalized (and open) offers can be completed.",
        "operationId" : "postOfferComplete",
        "parameters" : [ {
          "name" : "offer",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BusinessDocumentCompletionDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OfferDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          },
          "404" : {
            "description" : "Offer not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/offer_templates/{offer}" : {
      "delete" : {
        "tags" : [ "InvoicingOfferTemplates" ],
        "description" : "Deletes an existing offer template.",
        "operationId" : "deleteOfferTemplate",
        "parameters" : [ {
          "name" : "offer",
          "in" : "path",
          "description" : "Offer id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "5665af78-cc67-4910-b030-f649fde5d8a8"
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully."
          },
          "404" : {
            "description" : "Offer not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/offer_templates" : {
      "get" : {
        "tags" : [ "InvoicingOfferTemplates" ],
        "description" : "Returns all offer templates.",
        "operationId" : "getAllOfferTemplates",
        "parameters" : [ {
          "name" : "search",
          "in" : "query",
          "description" : "Search for specific keywords",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/OfferTemplateDtoV1"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "InvoicingOfferTemplates" ],
        "description" : "Creates a new offer template.",
        "operationId" : "postOfferTemplate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OfferTemplateDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OfferTemplateDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/offer_templates/{template}" : {
      "get" : {
        "tags" : [ "InvoicingOfferTemplates" ],
        "description" : "Returns a specific offer template by its id.",
        "operationId" : "getOfferTemplate",
        "parameters" : [ {
          "name" : "template",
          "in" : "path",
          "description" : "Offer template id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "5665af78-cc67-4910-b030-f649fde5d8a8"
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/OfferTemplateDtoV1"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "InvoicingOfferTemplates" ],
        "description" : "Update a existing offer template.",
        "operationId" : "putOfferTemplate",
        "parameters" : [ {
          "name" : "template",
          "in" : "path",
          "description" : "Offer template id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "5665af78-cc67-4910-b030-f649fde5d8a8"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OfferTemplateDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OfferTemplateDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/order_confirmations" : {
      "get" : {
        "tags" : [ "InvoicingOrderConfirmation" ],
        "description" : "Returns all finalized and external order confirmations. Documents created for staging do not have a number and are therefore not returned over the API.",
        "operationId" : "getAllOrderConfirmations",
        "parameters" : [ {
          "name" : "updated_since",
          "in" : "query",
          "description" : "return only documents updated after this timestamp in milliseconds (Instant.now().toEpochMilli())",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 1479497595571
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/OrderConfirmationDtoV1"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "InvoicingOrderConfirmation" ],
        "description" : "Creates new order confirmation. Depending on the supplied state, order confirmations are either created for staging (and completed manually) or immediately finalized. Once finalized, a number is assigned and the PDF created. If a number is coming from an external system, the EXTERNAL state and an id must be set. External documents cannot be edited and no PDF is created.",
        "operationId" : "postOrderConfirmation",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OrderConfirmationDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrderConfirmationDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/order_confirmations/{order_confirmation}" : {
      "get" : {
        "tags" : [ "InvoicingOrderConfirmation" ],
        "description" : "Returns a specific order confirmation by its number. Staging documents cannot be retrieved with this resource.",
        "operationId" : "getOrderConfirmation",
        "parameters" : [ {
          "name" : "order_confirmation",
          "in" : "path",
          "description" : "Order confirmation number",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "AB 2016-0001"
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrderConfirmationDtoV1"
                }
              }
            }
          },
          "404" : {
            "description" : "Order confirmation not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/order_confirmations/{order_confirmation}/document" : {
      "get" : {
        "tags" : [ "InvoicingOrderConfirmation" ],
        "description" : "Returns the current PDF document of a specific order confirmation as binary data.",
        "operationId" : "getOrderConfirmationDocument",
        "parameters" : [ {
          "name" : "order_confirmation",
          "in" : "path",
          "description" : "Order confirmation number",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "AB 2016-0001"
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "type" : "string",
                  "format" : "binary"
                }
              }
            }
          },
          "404" : {
            "description" : "Order confirmation or document document not found.",
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/order_confirmations/{order_confirmation}/cancel" : {
      "post" : {
        "tags" : [ "InvoicingOrderConfirmation" ],
        "description" : "Cancels a specific order confirmation. Only finalized or external documents can be cancelled.",
        "operationId" : "postOrderConfirmationCancel",
        "parameters" : [ {
          "name" : "order_confirmation",
          "in" : "path",
          "description" : "Order confirmation number",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "AB 2016-0001"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BusinessDocumentCancelDtoV1"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrderConfirmationDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          },
          "404" : {
            "description" : "Order confirmation not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/order_confirmations/{order_confirmation}/complete" : {
      "post" : {
        "tags" : [ "InvoicingOrderConfirmation" ],
        "description" : "Marks a specific order confirmation as completed. Only finalized (and unfulfilled) delivery notes can be completed.",
        "operationId" : "postOrderConfirmationComplete",
        "parameters" : [ {
          "name" : "order_confirmation",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BusinessDocumentCompletionDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrderConfirmationDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          },
          "404" : {
            "description" : "Order confirmation not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/payment_terms" : {
      "get" : {
        "tags" : [ "InvoicingSetup" ],
        "description" : "Returns all payment terms. A payment term can be supplied when creating invoices.",
        "operationId" : "getAllPaymentTerms",
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PaymentTermDtoV1"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/sequence_groups" : {
      "get" : {
        "tags" : [ "InvoicingSetup" ],
        "description" : "Returns all business document sequence groups. A sequence group can be supplied when finalizing business documents.",
        "operationId" : "getAllSequenceGroups",
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SequenceGroupDtoV1"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/item_categories" : {
      "get" : {
        "tags" : [ "Items" ],
        "description" : "Get all item categories",
        "operationId" : "getAllItemCategories",
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ItemCategoryDtoV1"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Items" ],
        "description" : "Create a new item category",
        "operationId" : "createItemCategory",
        "requestBody" : {
          "description" : "Item category to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ItemCategoryDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ItemCategoryDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/item_categories/{item_category}" : {
      "get" : {
        "tags" : [ "Items" ],
        "description" : "Get a specific item category",
        "operationId" : "getItemCategory",
        "parameters" : [ {
          "name" : "item_category",
          "in" : "path",
          "description" : "Item category id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ItemCategoryDtoV1"
                }
              }
            }
          },
          "404" : {
            "description" : "item category not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Items" ],
        "description" : "Update an existing item category",
        "operationId" : "updateItemCategory",
        "parameters" : [ {
          "name" : "item_category",
          "in" : "path",
          "description" : "Item category id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Complete item category to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ItemCategoryDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ItemCategoryDtoV1"
                }
              }
            }
          },
          "404" : {
            "description" : "item category not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Items" ],
        "description" : "Delete an existing item category",
        "operationId" : "deleteItemCategory",
        "parameters" : [ {
          "name" : "item_category",
          "in" : "path",
          "description" : "Item category id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully."
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          },
          "404" : {
            "description" : "item category not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/items" : {
      "get" : {
        "tags" : [ "Items" ],
        "description" : "Get all items",
        "operationId" : "getAllItems",
        "parameters" : [ {
          "name" : "category",
          "in" : "query",
          "description" : "item category id",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "search text",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "return max. entry count",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "mainCurrency",
          "in" : "query",
          "description" : "return only items in main currency. Default: false",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ItemDtoV1"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Items" ],
        "description" : "Create a new item",
        "operationId" : "createItem",
        "requestBody" : {
          "description" : "Item to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ItemDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ItemDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/items/{item}" : {
      "get" : {
        "tags" : [ "Items" ],
        "description" : "Get a specific item",
        "operationId" : "getItem",
        "parameters" : [ {
          "name" : "item",
          "in" : "path",
          "description" : "Item id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ItemDtoV1"
                }
              }
            }
          },
          "404" : {
            "description" : "item not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Items" ],
        "description" : "Update an existing item",
        "operationId" : "updateItem",
        "parameters" : [ {
          "name" : "item",
          "in" : "path",
          "description" : "Item id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Complete item to upgrade",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ItemDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ItemDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          },
          "404" : {
            "description" : "item not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Items" ],
        "description" : "Delete an existing item",
        "operationId" : "deleteItem",
        "parameters" : [ {
          "name" : "item",
          "in" : "path",
          "description" : "Item id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully."
          },
          "404" : {
            "description" : "item not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/items/paginated" : {
      "get" : {
        "tags" : [ "Items" ],
        "description" : "Get all items with optional slice and sort parameters. Max. limit of 1000.",
        "operationId" : "getAllItemsPaginated",
        "parameters" : [ {
          "name" : "category",
          "in" : "query",
          "description" : "Item category id, see /item_categories. Leave empty for all items, or set to NONE for items that have no category.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "Search text, will filter for name, number, barcode, or category name.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "mainCurrency",
          "in" : "query",
          "description" : "return only items in main currency. Default: false",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit of results.",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset to start with result set",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Comma separated list of sort params. The direction could append to the sort property by a colon.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name:ASC,status:DESC"
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/customers/{customer}" : {
      "get" : {
        "tags" : [ "MasterDataCustomer" ],
        "description" : "Returns a specific customer.",
        "operationId" : "getCustomer",
        "parameters" : [ {
          "name" : "customer",
          "in" : "path",
          "description" : "Customer id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerDtoV1"
                }
              }
            }
          },
          "404" : {
            "description" : "Customer not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "MasterDataCustomer" ],
        "description" : "Updates an existing customer. Note that all fields must be supplied - missing fields will be overwritten as empty.",
        "operationId" : "putCustomer",
        "parameters" : [ {
          "name" : "customer",
          "in" : "path",
          "description" : "Customer id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          },
          "404" : {
            "description" : "Customer not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "MasterDataCustomer" ],
        "description" : "Deletes an existing customer.",
        "operationId" : "deleteCustomer",
        "parameters" : [ {
          "name" : "customer",
          "in" : "path",
          "description" : "Customer id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully."
          },
          "404" : {
            "description" : "Customer not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/customers/{customer}/additional_addresses/{address}" : {
      "get" : {
        "tags" : [ "MasterDataCustomer" ],
        "description" : "Returns a specific address belonging to a customer.",
        "operationId" : "getCustomerAddress",
        "parameters" : [ {
          "name" : "customer",
          "in" : "path",
          "description" : "Customer id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "address",
          "in" : "path",
          "description" : "Address id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdditionalAddressDtoV1"
                }
              }
            }
          },
          "404" : {
            "description" : "Customer or address not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "MasterDataCustomer" ],
        "description" : "Updates an existing address. Note that all fields must be supplied - missing fields will be overwritten as empty.",
        "operationId" : "putCustomerAddress",
        "parameters" : [ {
          "name" : "customer",
          "in" : "path",
          "description" : "Customer id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "address",
          "in" : "path",
          "description" : "Address id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdditionalAddressDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdditionalAddressDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          },
          "404" : {
            "description" : "Customer or address not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "MasterDataCustomer" ],
        "description" : "Deletes an existing additional address.",
        "operationId" : "deleteCustomerAddress",
        "parameters" : [ {
          "name" : "customer",
          "in" : "path",
          "description" : "Customer id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "address",
          "in" : "path",
          "description" : "Address id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully."
          },
          "404" : {
            "description" : "Customer or address not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/customers/{customer}/additional_addresses/{address}/default" : {
      "post" : {
        "tags" : [ "MasterDataCustomer" ],
        "description" : "Marks an additional address as the default for its type.",
        "operationId" : "postCustomerAddressDefault",
        "parameters" : [ {
          "name" : "customer",
          "in" : "path",
          "description" : "Customer id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "address",
          "in" : "path",
          "description" : "Address id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully."
          },
          "404" : {
            "description" : "Customer or address not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "MasterDataCustomer" ],
        "description" : "Marks an additional address as no longer being the default. The main address will then be used as default for the type.",
        "operationId" : "deleteCustomerAddressDefault",
        "parameters" : [ {
          "name" : "customer",
          "in" : "path",
          "description" : "Customer id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "address",
          "in" : "path",
          "description" : "Address id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully."
          },
          "404" : {
            "description" : "Customer or address not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/customers" : {
      "get" : {
        "tags" : [ "MasterDataCustomer" ],
        "description" : "Returns all customers.",
        "operationId" : "getAllCustomers",
        "parameters" : [ {
          "name" : "search",
          "in" : "query",
          "description" : "search text",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "return max. entry count",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CustomerDtoV1"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "MasterDataCustomer" ],
        "description" : "Creates a new customer.",
        "operationId" : "postCustomer",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/customers/{customer}/additional_addresses" : {
      "get" : {
        "tags" : [ "MasterDataCustomer" ],
        "description" : "Returns all additional addresses belonging to a customer.",
        "operationId" : "getCustomerAddresses",
        "parameters" : [ {
          "name" : "customer",
          "in" : "path",
          "description" : "Customer id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AdditionalAddressDtoV1"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Customer not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "MasterDataCustomer" ],
        "description" : "Adds a new additional address to a customer.",
        "operationId" : "postCustomerAddress",
        "parameters" : [ {
          "name" : "customer",
          "in" : "path",
          "description" : "Customer id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdditionalAddressDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdditionalAddressDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          },
          "404" : {
            "description" : "Customer not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/customers/{customer}/create_contra_account" : {
      "post" : {
        "tags" : [ "MasterDataCustomer" ],
        "description" : "Creates a new receivables contra account for the customer. Only available for double-entry accounting, and the customer must not already have such an account.",
        "operationId" : "postCustomerContraAccount",
        "parameters" : [ {
          "name" : "customer",
          "in" : "path",
          "description" : "Customer id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerSupplierContraAccountCreationDtoV1"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          },
          "404" : {
            "description" : "Customer not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/customers/{customer}/default_address" : {
      "post" : {
        "tags" : [ "MasterDataCustomer" ],
        "description" : "Marks a customer's main address as the default for all types.",
        "operationId" : "postCustomerDefaultAddress",
        "parameters" : [ {
          "name" : "customer",
          "in" : "path",
          "description" : "Customer id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully."
          },
          "404" : {
            "description" : "Customer not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/customers/by_number" : {
      "put" : {
        "tags" : [ "MasterDataCustomer" ],
        "description" : "Creates or replaces a customer by the customer number. An exception will be thrown if the number is not unique to one customer. Note that all fields must be supplied - missing fields will be overwritten as empty.",
        "operationId" : "putCustomerByNumber",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          },
          "404" : {
            "description" : "Customer not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/suppliers/{supplier}" : {
      "get" : {
        "tags" : [ "MasterDataSupplier" ],
        "description" : "Returns a specific supplier.",
        "operationId" : "getSupplier",
        "parameters" : [ {
          "name" : "supplier",
          "in" : "path",
          "description" : "Supplier id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SupplierDtoV1"
                }
              }
            }
          },
          "404" : {
            "description" : "Supplier not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "MasterDataSupplier" ],
        "description" : "Updates an existing supplier. Note that all fields must be supplied - missing fields will be overwritten as empty.",
        "operationId" : "putSupplier",
        "parameters" : [ {
          "name" : "supplier",
          "in" : "path",
          "description" : "Supplier id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SupplierDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SupplierDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          },
          "404" : {
            "description" : "Supplier not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "MasterDataSupplier" ],
        "description" : "Deletes an existing supplier.",
        "operationId" : "deleteSupplier",
        "parameters" : [ {
          "name" : "supplier",
          "in" : "path",
          "description" : "Supplier id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully."
          },
          "404" : {
            "description" : "Supplier not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/suppliers" : {
      "get" : {
        "tags" : [ "MasterDataSupplier" ],
        "description" : "Returns all suppliers.",
        "operationId" : "getAllSuppliers",
        "parameters" : [ {
          "name" : "search",
          "in" : "query",
          "description" : "search text",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "return max. entry count",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SupplierDtoV1"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "MasterDataSupplier" ],
        "description" : "Creates a new supplier.",
        "operationId" : "postSupplier",
        "requestBody" : {
          "description" : "Supplier to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SupplierDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SupplierDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/suppliers/{supplier}/create_contra_account" : {
      "post" : {
        "tags" : [ "MasterDataSupplier" ],
        "description" : "Creates a new payables contra account for the supplier. Only available for double-entry accounting, and the supplier must not already have such an account.",
        "operationId" : "postSupplierContraAccount",
        "parameters" : [ {
          "name" : "supplier",
          "in" : "path",
          "description" : "Supplier id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerSupplierContraAccountCreationDtoV1"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SupplierDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          },
          "404" : {
            "description" : "Supplier not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/suppliers/by_number" : {
      "put" : {
        "tags" : [ "MasterDataSupplier" ],
        "description" : "Creates or replaces a supplier by the supplier number. An exception will be thrown if the number is not unique to one supplier. Note that all fields must be supplied - missing fields will be overwritten as empty.",
        "operationId" : "putSupplierByNumber",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SupplierDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SupplierDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/cash_registers/{cash_register}" : {
      "get" : {
        "tags" : [ "PointOfSale" ],
        "description" : "Returns a specific cash register.",
        "operationId" : "getCashRegister",
        "parameters" : [ {
          "name" : "cash_register",
          "in" : "path",
          "description" : "Cash register number",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          },
          "example" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CashRegisterDtoV1"
                }
              }
            }
          },
          "404" : {
            "description" : "Cash register not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/cash_registers/{cash_register}/layout" : {
      "get" : {
        "tags" : [ "PointOfSale" ],
        "description" : "Get the current print layout setup of a specific cash register",
        "operationId" : "getCashRegisterLayout",
        "parameters" : [ {
          "name" : "cash_register",
          "in" : "path",
          "description" : "Cash register number",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          },
          "example" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CashRegisterLayoutDtoV1"
                }
              }
            }
          },
          "404" : {
            "description" : "Cash register not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/cash_registers" : {
      "get" : {
        "tags" : [ "PointOfSale" ],
        "description" : "Returns all cash registers for the given states (or-inclusive). Returns all cash registers with active states if no states are given.",
        "operationId" : "getCashRegisters",
        "parameters" : [ {
          "name" : "states",
          "in" : "query",
          "description" : "Set of cash register states.",
          "schema" : {
            "type" : "string"
          },
          "example" : "NEW,ACTIVE,READY"
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CashRegisterDtoV1"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/cash_registers/{cash_register}/daily_closings" : {
      "get" : {
        "tags" : [ "PointOfSale" ],
        "description" : "Returns all daily closings for a cash register.",
        "operationId" : "getAllDailyClosings",
        "parameters" : [ {
          "name" : "cash_register",
          "in" : "path",
          "description" : "Cash register number",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 1
        }, {
          "name" : "from",
          "in" : "query",
          "description" : "Minimum date for returned daily closings, ignored if invalid",
          "schema" : {
            "type" : "string"
          },
          "example" : "2017-01-01"
        }, {
          "name" : "to",
          "in" : "query",
          "description" : "Maximum date for returned daily closings, ignored if invalid",
          "schema" : {
            "type" : "string"
          },
          "example" : "2017-01-01"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of returned results",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          },
          "example" : 5
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DailyClosingDtoV1"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Cash register not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/cash_registers/{cash_register}/daily_closings/{daily_closing}" : {
      "get" : {
        "tags" : [ "PointOfSale" ],
        "description" : "Returns a specific daily closing for a cash register.",
        "operationId" : "getDailyClosing",
        "parameters" : [ {
          "name" : "cash_register",
          "in" : "path",
          "description" : "Cash register number",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          },
          "example" : 1
        }, {
          "name" : "daily_closing",
          "in" : "path",
          "description" : "Daily closing date",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "2017-01-01"
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DailyClosingDtoV1"
                }
              }
            }
          },
          "404" : {
            "description" : "Cash register or daily closing not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/cash_registers/{cash_register}/daily_closings/last" : {
      "get" : {
        "tags" : [ "PointOfSale" ],
        "description" : "Returns the last daily closing for a cash register with precalculated values.",
        "operationId" : "getDailyClosingLast",
        "parameters" : [ {
          "name" : "cash_register",
          "in" : "path",
          "description" : "Cash register number",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          },
          "example" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DailyClosingDtoV1"
                }
              }
            }
          },
          "404" : {
            "description" : "Cash register or daily closing not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/cash_registers/{cash_register}/daily_closings/last/close_month" : {
      "post" : {
        "tags" : [ "PointOfSale" ],
        "description" : "Closes the month with the last daily closing. The daily closing must be finalized and not already be closing the month. Note that the last daily closing will automatically close the month on the first booking in the next month.",
        "operationId" : "postDailyClosingCloseMonth",
        "parameters" : [ {
          "name" : "cash_register",
          "in" : "path",
          "description" : "Cash register number",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          },
          "example" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DailyClosingDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          },
          "404" : {
            "description" : "Cash register or daily closing not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/cash_registers/{cash_register}/daily_closings/last/close_year" : {
      "post" : {
        "tags" : [ "PointOfSale" ],
        "description" : "Closes the year with the last daily closing. The daily closing must be finalized and not already be closing the year. Note that the last daily closing will automatically close the year on the first booking in the next year.",
        "operationId" : "postDailyClosingCloseYear",
        "parameters" : [ {
          "name" : "cash_register",
          "in" : "path",
          "description" : "Cash register number",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          },
          "example" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DailyClosingDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          },
          "404" : {
            "description" : "Cash register or daily closing not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/cash_registers/{cash_register}/daily_closings/last/finalize" : {
      "post" : {
        "tags" : [ "PointOfSale" ],
        "description" : "Finalizes the last daily closing. It must be open to be finalized.",
        "operationId" : "postDailyClosingLastFinalize",
        "parameters" : [ {
          "name" : "cash_register",
          "in" : "path",
          "description" : "Cash register number",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          },
          "example" : 1
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DailyClosingFinalizationDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DailyClosingDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          },
          "404" : {
            "description" : "Cash register or daily closing not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/mails/templates/pos" : {
      "get" : {
        "tags" : [ "PointOfSale" ],
        "description" : "Get a list of all mail templates for new cash register receipts.",
        "operationId" : "getMailTemplates",
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/BusyDocMailTemplateDtoV1"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "PointOfSale" ],
        "description" : "Create a new mail template for cash register receipts.",
        "operationId" : "postMailTemplate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BusyDocMailTemplateDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusyDocMailTemplateDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          },
          "404" : {
            "description" : "Cash register not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/cash_registers/{cash_register}/receipts/{receipt}/validate" : {
      "post" : {
        "tags" : [ "PointOfSale" ],
        "description" : "Validate a receipt",
        "operationId" : "checkReport",
        "parameters" : [ {
          "name" : "cash_register",
          "in" : "path",
          "description" : "Cash register id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          },
          "example" : 1
        }, {
          "name" : "receipt",
          "in" : "path",
          "description" : "Receipt sequence",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : 2024.0021
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReceiptCheckResultDtoV1"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/cash_registers/{cash_register}/receipts" : {
      "get" : {
        "tags" : [ "PointOfSale" ],
        "description" : "Returns all receipts for a cash register.",
        "operationId" : "getAllCashRegisterReceipts",
        "parameters" : [ {
          "name" : "cash_register",
          "in" : "path",
          "description" : "Cash register number",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          },
          "example" : 1
        }, {
          "name" : "from",
          "in" : "query",
          "description" : "Minimum date for returned receipts, ignored if invalid.",
          "schema" : {
            "type" : "string"
          },
          "example" : "2017-01-01"
        }, {
          "name" : "to",
          "in" : "query",
          "description" : "Maximum date for returned receipts, ignored if invalid.",
          "schema" : {
            "type" : "string"
          },
          "example" : "2017-01-01"
        }, {
          "name" : "types",
          "in" : "query",
          "description" : "Which receipt types to include in the returned receipts (or-inclusive).",
          "schema" : {
            "type" : "string"
          },
          "example" : "INCOME,REBOOK"
        }, {
          "name" : "exclude_cancellations",
          "in" : "query",
          "description" : "Indicates if cancelled and cancellation receipts should be excluded. Defaults to false.",
          "schema" : {
            "type" : "boolean"
          },
          "example" : true
        }, {
          "name" : "customer",
          "in" : "query",
          "description" : "UUID of the customer the receipt was created for",
          "schema" : {
            "type" : "string"
          },
          "example" : "b67300ba-8234-2f1d-e60b-c91c15f5ac74"
        }, {
          "name" : "search_text",
          "in" : "query",
          "description" : "Arbitrary search text to filter for",
          "schema" : {
            "type" : "string"
          },
          "example" : "Wasserschaden"
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ReceiptDtoV1"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Cash register not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "PointOfSale" ],
        "description" : "Creates a new receipt for the cash register.",
        "operationId" : "postReceipt",
        "parameters" : [ {
          "name" : "cash_register",
          "in" : "path",
          "description" : "Cash register number",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          },
          "example" : 1
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReceiptDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReceiptDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          },
          "404" : {
            "description" : "Cash register not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/cash_registers/{cash_register}/receipts/export/dep" : {
      "get" : {
        "tags" : [ "PointOfSale" ],
        "description" : "Export the Datenerfassungsprotokoll (DEP) as a downloadable JSON file. This export is only available for BAO131 cash registers.",
        "operationId" : "getDEPExport",
        "parameters" : [ {
          "name" : "cash_register",
          "in" : "path",
          "description" : "Cash register id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          },
          "example" : 1
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "set content-disposition",
          "schema" : {
            "type" : "string",
            "enum" : [ "inline, attachment" ],
            "default" : "attachment"
          },
          "example" : "inline"
        }, {
          "name" : "referer",
          "in" : "header",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "mediaType" : {
                      "type" : "object",
                      "properties" : {
                        "type" : {
                          "type" : "string"
                        },
                        "subtype" : {
                          "type" : "string"
                        },
                        "parameters" : {
                          "type" : "object",
                          "additionalProperties" : {
                            "type" : "string"
                          }
                        },
                        "wildcardType" : {
                          "type" : "boolean"
                        },
                        "wildcardSubtype" : {
                          "type" : "boolean"
                        }
                      }
                    },
                    "links" : {
                      "uniqueItems" : true,
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "title" : {
                            "type" : "string"
                          },
                          "uri" : {
                            "type" : "string",
                            "format" : "uri"
                          },
                          "uriBuilder" : {
                            "type" : "object"
                          },
                          "rel" : {
                            "type" : "string"
                          },
                          "rels" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string"
                            }
                          },
                          "type" : {
                            "type" : "string"
                          },
                          "params" : {
                            "type" : "object",
                            "additionalProperties" : {
                              "type" : "string"
                            }
                          }
                        }
                      }
                    },
                    "statusInfo" : {
                      "type" : "object",
                      "properties" : {
                        "family" : {
                          "type" : "string",
                          "enum" : [ "INFORMATIONAL", "SUCCESSFUL", "REDIRECTION", "CLIENT_ERROR", "SERVER_ERROR", "OTHER" ]
                        },
                        "statusCode" : {
                          "type" : "integer",
                          "format" : "int32"
                        },
                        "reasonPhrase" : {
                          "type" : "string"
                        }
                      }
                    },
                    "allowedMethods" : {
                      "uniqueItems" : true,
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      }
                    },
                    "cookies" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "object",
                        "properties" : {
                          "name" : {
                            "type" : "string"
                          },
                          "value" : {
                            "type" : "string"
                          },
                          "version" : {
                            "type" : "integer",
                            "format" : "int32"
                          },
                          "path" : {
                            "type" : "string"
                          },
                          "domain" : {
                            "type" : "string"
                          },
                          "comment" : {
                            "type" : "string"
                          },
                          "maxAge" : {
                            "type" : "integer",
                            "format" : "int32"
                          },
                          "expiry" : {
                            "type" : "string",
                            "format" : "date-time"
                          },
                          "secure" : {
                            "type" : "boolean"
                          },
                          "httpOnly" : {
                            "type" : "boolean"
                          }
                        }
                      }
                    },
                    "entityTag" : {
                      "type" : "object",
                      "properties" : {
                        "value" : {
                          "type" : "string"
                        },
                        "weak" : {
                          "type" : "boolean"
                        }
                      }
                    },
                    "stringHeaders" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        }
                      }
                    },
                    "length" : {
                      "type" : "integer",
                      "format" : "int32"
                    },
                    "location" : {
                      "type" : "string",
                      "format" : "uri"
                    },
                    "language" : {
                      "type" : "object",
                      "properties" : {
                        "language" : {
                          "type" : "string"
                        },
                        "displayName" : {
                          "type" : "string"
                        },
                        "country" : {
                          "type" : "string"
                        },
                        "variant" : {
                          "type" : "string"
                        },
                        "script" : {
                          "type" : "string"
                        },
                        "unicodeLocaleAttributes" : {
                          "uniqueItems" : true,
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          }
                        },
                        "unicodeLocaleKeys" : {
                          "uniqueItems" : true,
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          }
                        },
                        "displayLanguage" : {
                          "type" : "string"
                        },
                        "displayScript" : {
                          "type" : "string"
                        },
                        "displayCountry" : {
                          "type" : "string"
                        },
                        "displayVariant" : {
                          "type" : "string"
                        },
                        "extensionKeys" : {
                          "uniqueItems" : true,
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          }
                        },
                        "iso3Language" : {
                          "type" : "string"
                        },
                        "iso3Country" : {
                          "type" : "string"
                        }
                      }
                    },
                    "date" : {
                      "type" : "string",
                      "format" : "date-time"
                    },
                    "lastModified" : {
                      "type" : "string",
                      "format" : "date-time"
                    },
                    "headers" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "array",
                        "items" : {
                          "type" : "object"
                        }
                      }
                    },
                    "status" : {
                      "type" : "integer",
                      "format" : "int32"
                    },
                    "metadata" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "array",
                        "items" : {
                          "type" : "object"
                        }
                      }
                    },
                    "entity" : {
                      "type" : "object"
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/cash_registers/{cash_register}/receipts/item_summary" : {
      "get" : {
        "tags" : [ "PointOfSale" ],
        "description" : "Return a list of receipts grouped by items and time period",
        "operationId" : "getItemSummary",
        "parameters" : [ {
          "name" : "cash_register",
          "in" : "path",
          "description" : "Cash register id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          },
          "example" : 0
        }, {
          "name" : "from",
          "in" : "query",
          "description" : "Minimum date for returned receipts. Defaults to the first day of the current year.",
          "schema" : {
            "type" : "string"
          },
          "example" : "2017-01-01"
        }, {
          "name" : "to",
          "in" : "query",
          "description" : "Maximum date for returned receipts. Defaults to the last date of the current year. Cannot be more than one year apart from the minimum date.",
          "schema" : {
            "type" : "string"
          },
          "example" : "2017-01-01"
        }, {
          "name" : "period",
          "in" : "query",
          "description" : "The time period (YEAR, MONTH or DAY) for which the receipts should be summarized by.",
          "schema" : {
            "type" : "string",
            "enum" : [ "YEAR", "MONTH", "DAY" ],
            "default" : "DAY"
          },
          "example" : "YEAR"
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Comma separated list of sort params. The direction could append to the sort property by a colon.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name:ASC,status:DESC"
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ReceiptItemSummaryDtoV1"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/cash_registers/{cash_register}/receipts/period_summary" : {
      "get" : {
        "tags" : [ "PointOfSale" ],
        "description" : "Return a list of receipts grouped by time period",
        "operationId" : "getPeriodSummary",
        "parameters" : [ {
          "name" : "cash_register",
          "in" : "path",
          "description" : "Cash register id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          },
          "example" : 0
        }, {
          "name" : "from",
          "in" : "query",
          "description" : "Minimum date for returned receipts. Defaults to the first day of the current year.",
          "schema" : {
            "type" : "string"
          },
          "example" : "2017-01-01"
        }, {
          "name" : "to",
          "in" : "query",
          "description" : "Maximum date for returned receipts. Defaults to the last date of the current year. Cannot be more than one year apart from the minimum date.",
          "schema" : {
            "type" : "string"
          },
          "example" : "2017-01-01"
        }, {
          "name" : "period",
          "in" : "query",
          "description" : "The time period (YEAR, MONTH or DAY) for which the receipts should be summarized by.",
          "schema" : {
            "type" : "string",
            "enum" : [ "YEAR", "MONTH", "DAY" ],
            "default" : "DAY"
          },
          "example" : "YEAR"
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Comma separated list of sort params. The direction could append to the sort property by a colon.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name:ASC,status:DESC"
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ReceiptItemSummaryDtoV1"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/cash_registers/{cash_register}/receipts/{receipt}" : {
      "get" : {
        "tags" : [ "PointOfSale" ],
        "description" : "Returns a specific receipt for a cash register.",
        "operationId" : "getReceipt",
        "parameters" : [ {
          "name" : "cash_register",
          "in" : "path",
          "description" : "Cash register number",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          },
          "example" : 1
        }, {
          "name" : "receipt",
          "in" : "path",
          "description" : "the sequence number of the receipt",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : 2016.0001
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReceiptDtoV1"
                }
              }
            }
          },
          "404" : {
            "description" : "Cash register or receipt not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/cash_registers/{cash_register}/receipts/{receipt}/document" : {
      "get" : {
        "tags" : [ "PointOfSale" ],
        "description" : "Returns the current PDF of a receipt as binary data.",
        "operationId" : "getReceiptDocument",
        "parameters" : [ {
          "name" : "cash_register",
          "in" : "path",
          "description" : "Cash register number",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          },
          "example" : 1
        }, {
          "name" : "receipt",
          "in" : "path",
          "description" : "the number of the receipt",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : 2016.0001
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "set content-disposition",
          "schema" : {
            "type" : "string",
            "enum" : [ "inline, attachment" ],
            "default" : "attachment"
          },
          "example" : "inline"
        }, {
          "name" : "referer",
          "in" : "header",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "type" : "string",
                  "format" : "binary"
                }
              }
            }
          },
          "404" : {
            "description" : "Cash register or receipt not found.",
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/cash_registers/{cash_register}/receipts/{receipt}/layout/star" : {
      "get" : {
        "tags" : [ "PointOfSale" ],
        "description" : "Returns a specific receipt for a cash register in the star print layout.",
        "operationId" : "getReceiptLayoutStar",
        "parameters" : [ {
          "name" : "cash_register",
          "in" : "path",
          "description" : "Cash register number",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          },
          "example" : 1
        }, {
          "name" : "receipt",
          "in" : "path",
          "description" : "the sequence number of the receipt",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : 2016.0001
        }, {
          "name" : "width",
          "in" : "query",
          "description" : "the width of fixed-size elements like tables",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          },
          "example" : 32
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StarPrintReceipt"
                }
              }
            }
          },
          "404" : {
            "description" : "Cash register or receipt not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/cash_registers/{cash_register}/receipts/user_summary" : {
      "get" : {
        "tags" : [ "PointOfSale" ],
        "description" : "Return a list of receipts grouped by users and time period",
        "operationId" : "getUserSummary",
        "parameters" : [ {
          "name" : "cash_register",
          "in" : "path",
          "description" : "Cash register id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          },
          "example" : 0
        }, {
          "name" : "from",
          "in" : "query",
          "description" : "Minimum date for returned receipts. Defaults to the first day of the current year.",
          "schema" : {
            "type" : "string"
          },
          "example" : "2017-01-01"
        }, {
          "name" : "to",
          "in" : "query",
          "description" : "Maximum date for returned receipts. Defaults to the last date of the current year. Cannot be more than one year apart from the minimum date.",
          "schema" : {
            "type" : "string"
          },
          "example" : "2017-01-01"
        }, {
          "name" : "period",
          "in" : "query",
          "description" : "The time period (YEAR, MONTH or DAY) for which the receipts should be summarized by.",
          "schema" : {
            "type" : "string",
            "enum" : [ "YEAR", "MONTH", "DAY" ],
            "default" : "DAY"
          },
          "example" : "YEAR"
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Comma separated list of sort params. The direction could append to the sort property by a colon.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name:ASC,status:DESC"
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ReceiptUserSummaryDtoV1"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/cash_registers/{cash_register}/receipts/{receipt}/cancel" : {
      "post" : {
        "tags" : [ "PointOfSale" ],
        "description" : "Cancels a receipt for the cash register. The receipt must not have been cancelled or be a cancellation receipt.",
        "operationId" : "postReceiptCancel",
        "parameters" : [ {
          "name" : "cash_register",
          "in" : "path",
          "description" : "Cash register number",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          },
          "example" : 1
        }, {
          "name" : "receipt",
          "in" : "path",
          "description" : "the sequence number of the receipt",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : 2016.0001
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReceiptDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          },
          "404" : {
            "description" : "Cash register not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/cash_registers/{cash_register}/receipts/{receipt}/send_mail" : {
      "post" : {
        "tags" : [ "PointOfSale" ],
        "description" : "Sends an e-mail with the receipt. The mail address must be provided for verification even if the customer has an e-mail registered.",
        "operationId" : "postReceiptSendMail",
        "parameters" : [ {
          "name" : "cash_register",
          "in" : "path",
          "description" : "Cash register number",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          },
          "example" : 1
        }, {
          "name" : "receipt",
          "in" : "path",
          "description" : "the sequence number of the receipt",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : 2016.0001
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MailRecipientDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReceiptDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          },
          "404" : {
            "description" : "Cash register not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/trips" : {
      "get" : {
        "tags" : [ "TravelExpenseManagement" ],
        "description" : "Returns all trips for the currently authenticated user.",
        "operationId" : "getAllTrips",
        "parameters" : [ {
          "name" : "updated_since",
          "in" : "query",
          "description" : "Return only trips updated after this timestamp in milliseconds (Instant.now().toEpochMilli())",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 1479497595571
        }, {
          "name" : "from_date",
          "in" : "query",
          "description" : "Return only trips after this date (inclusive)",
          "schema" : {
            "type" : "string"
          },
          "example" : "2020-01-01"
        }, {
          "name" : "to_date",
          "in" : "query",
          "description" : "Return only trips before this date (inclusive)",
          "schema" : {
            "type" : "string"
          },
          "example" : "2020-12-31"
        }, {
          "name" : "vehicle_id",
          "in" : "query",
          "description" : "The id for a specific vehicle",
          "schema" : {
            "type" : "string"
          },
          "example" : "40e2f246-8998-3dec-b51c-4edf7f688d4a"
        }, {
          "name" : "search_text",
          "in" : "query",
          "description" : "Search-text",
          "schema" : {
            "type" : "string"
          },
          "example" : "holiday trip"
        }, {
          "name" : "include_waypoints",
          "in" : "query",
          "description" : "Show waypoints",
          "schema" : {
            "type" : "boolean"
          },
          "example" : true
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of returned results",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          },
          "example" : 5
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/TripDtoV1"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "TravelExpenseManagement" ],
        "description" : "Creates a new trip for a vehicle.",
        "operationId" : "postTrip",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TripDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TripDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/trips/{trip}" : {
      "get" : {
        "tags" : [ "TravelExpenseManagement" ],
        "description" : "Returns a trip by its id.",
        "operationId" : "getTrip",
        "parameters" : [ {
          "name" : "trip",
          "in" : "path",
          "description" : "Trip id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "141f5cc5-72d4-738a-1668-fc855392b9e3"
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TripDtoV1"
                }
              }
            }
          },
          "404" : {
            "description" : "Trip not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "TravelExpenseManagement" ],
        "description" : "Update a trip. Waypoints cannot be updated and will be ignored.",
        "operationId" : "putTrip",
        "parameters" : [ {
          "name" : "trip",
          "in" : "path",
          "description" : "Trip id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TripDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TripDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "TravelExpenseManagement" ],
        "description" : "Delete an existing trip entry",
        "operationId" : "removeTrip",
        "parameters" : [ {
          "name" : "trip",
          "in" : "path",
          "description" : "Trip id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Operation completed successfully."
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          },
          "404" : {
            "description" : "Trip not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/vehicles" : {
      "get" : {
        "tags" : [ "TravelExpenseManagement" ],
        "description" : "Returns all vehicles.",
        "operationId" : "getAllVehicles",
        "parameters" : [ {
          "name" : "updated_since",
          "in" : "query",
          "description" : "Return only vehicles updated after this timestamp in milliseconds (Instant.now().toEpochMilli())",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 1479497595571
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/VehicleDtoV1"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "TravelExpenseManagement" ],
        "description" : "Creates a new vehicle.",
        "operationId" : "postVehicle",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/VehicleDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VehicleDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/vehicles/{vehicle}" : {
      "get" : {
        "tags" : [ "TravelExpenseManagement" ],
        "description" : "Returns a specific vehicle by its id.",
        "operationId" : "getVehicle",
        "parameters" : [ {
          "name" : "vehicle",
          "in" : "path",
          "description" : "Vehicle id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "141f5cc5-72d4-738a-1668-fc855392b9e3"
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VehicleDtoV1"
                }
              }
            }
          },
          "404" : {
            "description" : "Vehicle not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "TravelExpenseManagement" ],
        "description" : "Updates a vehicle.",
        "operationId" : "putVehicle",
        "parameters" : [ {
          "name" : "vehicle",
          "in" : "path",
          "description" : "Vehicle id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/VehicleDtoV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VehicleDtoV1"
                }
              }
            }
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "TravelExpenseManagement" ],
        "description" : "Delete an existing vehicle with no trips",
        "operationId" : "removeVehicle",
        "parameters" : [ {
          "name" : "vehicle",
          "in" : "path",
          "description" : "Vehicle id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Operation completed successfully."
          },
          "400" : {
            "description" : "Input invalid. Further information in the RestError response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          },
          "404" : {
            "description" : "vehicle not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestError"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/user" : {
      "get" : {
        "tags" : [ "Foundation" ],
        "description" : "Returns information about the current user.",
        "operationId" : "getUser",
        "responses" : {
          "default" : {
            "description" : "Operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserDtoV1"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "BankStatementHeaderDtoV1" : {
        "required" : [ "bankAccount", "fileName" ],
        "type" : "object",
        "properties" : {
          "statementDate" : {
            "type" : "string",
            "description" : "Date of creation or export for this bank statement.",
            "format" : "date"
          },
          "valueDateFrom" : {
            "type" : "string",
            "description" : "Earliest date of all statement lines in the header.",
            "format" : "date",
            "readOnly" : true
          },
          "valueDateTo" : {
            "type" : "string",
            "description" : "Last date of all statement lines in the header.",
            "format" : "date",
            "readOnly" : true
          },
          "bankAccount" : {
            "type" : "string",
            "description" : "Bank account uuid for this statement header, see the /bank_accounts resource.",
            "example" : "40e2f246-8998-3dec-b51c-4edf7f688d4a"
          },
          "bankAccountName" : {
            "type" : "string",
            "description" : "Human readable name of the bank account for this statement header.",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "Uuid for this statement header.",
            "readOnly" : true
          },
          "fileName" : {
            "type" : "string",
            "description" : "File name for the bank statement header. Will be sanitized.",
            "example" : "test_file.csv"
          },
          "currencyCode" : {
            "type" : "string",
            "description" : "Currency code for the header in ISO format. Equals the currency of the bank account.",
            "readOnly" : true
          },
          "status" : {
            "type" : "string",
            "description" : "Current processing status of the header.",
            "readOnly" : true,
            "enum" : [ "NEW", "RECONCILED", "IN_PROGRESS", "NOT_RECONCILED", "DELETED" ]
          }
        }
      },
      "RestError" : {
        "type" : "object",
        "properties" : {
          "error" : {
            "type" : "string",
            "description" : "Name of the error or exception."
          },
          "message" : {
            "type" : "string",
            "description" : "Localized, extended description of the error."
          },
          "timestamp" : {
            "type" : "string",
            "description" : "Time when the error occured.",
            "format" : "date-time"
          },
          "identifier" : {
            "type" : "string",
            "description" : "An alphanumeric string identifying this occurrence."
          }
        }
      },
      "BankStatementLineDtoV1" : {
        "required" : [ "amount", "bookingDate", "valueDate" ],
        "type" : "object",
        "properties" : {
          "bookingDate" : {
            "type" : "string",
            "description" : "Actual booking date of the transaction, as determined by the bank.",
            "format" : "date"
          },
          "originator" : {
            "type" : "string",
            "description" : "Name of the person or company that originated the transaction."
          },
          "originatorBankReference" : {
            "type" : "string",
            "description" : "Bank reference of the person or company that originated the transaction."
          },
          "originatorBankCode" : {
            "type" : "string",
            "description" : "Bank code of the person or company that originated the transaction."
          },
          "originatorAccountNumber" : {
            "type" : "string",
            "description" : "Account number of the person or company that originated the transaction."
          },
          "partnerName" : {
            "type" : "string",
            "description" : "Name of the person or company that received the transaction."
          },
          "partnerAccountNumber" : {
            "type" : "string",
            "description" : "Account number of the person or company that received the transaction."
          },
          "partnerBankCode" : {
            "type" : "string",
            "description" : "Bank code of the person or company that received the transaction."
          },
          "customerData" : {
            "type" : "string",
            "description" : "Additional customer data about the transaction."
          },
          "reasonForTransfer" : {
            "type" : "string",
            "description" : "Information from the originator about the reason for the transaction. Split into multiple properties as payment providers assign the reason differently and sometimes in multiple fields."
          },
          "reasonForTransfer1" : {
            "type" : "string",
            "description" : "Information from the originator about the reason for the transaction. Split into multiple properties as payment providers assign the reason differently and sometimes in multiple fields."
          },
          "reasonForTransfer2" : {
            "type" : "string",
            "description" : "Information from the originator about the reason for the transaction. Split into multiple properties as payment providers assign the reason differently and sometimes in multiple fields."
          },
          "reasonForTransfer3" : {
            "type" : "string",
            "description" : "Information from the originator about the reason for the transaction. Split into multiple properties as payment providers assign the reason differently and sometimes in multiple fields."
          },
          "reasonForTransfer4" : {
            "type" : "string",
            "description" : "Information from the originator about the reason for the transaction. Split into multiple properties as payment providers assign the reason differently and sometimes in multiple fields."
          },
          "reasonForTransfer5" : {
            "type" : "string",
            "description" : "Information from the originator about the reason for the transaction. Split into multiple properties as payment providers assign the reason differently and sometimes in multiple fields."
          },
          "additionalText" : {
            "type" : "string",
            "description" : "Additional text supplied for the transaction."
          },
          "transactionId" : {
            "type" : "string",
            "description" : "Optional, unique transaction id. Lines with duplicate transaction ids are filtered out as duplicates."
          },
          "note" : {
            "type" : "string",
            "description" : "Additional note supplied for the transaction."
          },
          "valueDate" : {
            "type" : "string",
            "description" : "Value date of the transaction, as submitted by the initiator.",
            "format" : "date"
          },
          "amount" : {
            "type" : "number",
            "description" : "Total amount of the booking. Positive for credit, and negative for debit transactions."
          },
          "id" : {
            "type" : "integer",
            "description" : "Line number of the line, must be unique. Will be auto-numbered on import.",
            "format" : "int32",
            "readOnly" : true
          },
          "currencyCode" : {
            "type" : "string",
            "description" : "Currency code for the line in ISO format. Defaults to the main currency."
          },
          "description" : {
            "type" : "string",
            "description" : "Description field describing the purpose of the line."
          },
          "status" : {
            "type" : "string",
            "description" : "Current import status, used to determine if a line is a potential duplicate of an earlier line. Potential duplicates can be submitted by PSD2 providers, but are marked as such.",
            "readOnly" : true,
            "enum" : [ "ACTIVE", "POTENTIALLY_DUPLICATED", "DELETED" ]
          }
        },
        "description" : "Describes a bank statement line. Different, sometimes repeating, text properties map the different ways payment providers supply information about the transaction."
      },
      "BankStatementLineResultDtoV1" : {
        "type" : "object",
        "properties" : {
          "duplicatesCount" : {
            "type" : "integer",
            "description" : "Number of lines that were detected as duplicates and skipped.",
            "format" : "int32",
            "readOnly" : true
          },
          "addedLines" : {
            "type" : "array",
            "description" : "All lines that were appended as a result of this operation. Only returned if returnLines in the request was set.",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/BankStatementLineDtoV1"
            }
          },
          "duplicateTransactionIds" : {
            "type" : "array",
            "description" : "A distinct list of duplicate transaction ids that were ignored. Only returned if returnLines in the request was set.",
            "readOnly" : true,
            "items" : {
              "type" : "string",
              "description" : "A distinct list of duplicate transaction ids that were ignored. Only returned if returnLines in the request was set.",
              "readOnly" : true
            }
          },
          "addedCount" : {
            "type" : "integer",
            "description" : "Number of lines that were created.",
            "format" : "int32",
            "readOnly" : true
          }
        }
      },
      "BankStatementRequestDtoV1" : {
        "type" : "object",
        "properties" : {
          "returnLines" : {
            "type" : "boolean",
            "description" : "Set to true if a list of created lines (and found duplicates) is to be included. Otherwise, only the counts will be returned."
          },
          "bankStatementLines" : {
            "type" : "array",
            "description" : "The bank statement lines to append.",
            "items" : {
              "$ref" : "#/components/schemas/BankStatementLineDtoV1"
            }
          }
        }
      },
      "RebookJournalDtoV1" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "ID of the rebook journal."
          },
          "rebookType" : {
            "type" : "string",
            "description" : "Rebook type, which limits available accounts. See the /accounts/rebook_accounts resource.",
            "example" : "REBOOK",
            "enum" : [ "REBOOK", "CORRECTION", "FINALIZATION", "BALANCE" ]
          },
          "account" : {
            "type" : "string",
            "description" : "Account from which the amount was subtracted. See the /accounts resource."
          },
          "contraAccount" : {
            "type" : "string",
            "description" : "Account to which the amount was added. See the /accounts resource."
          },
          "date" : {
            "type" : "string",
            "description" : "Date of the booking.",
            "format" : "date"
          },
          "cancelled" : {
            "type" : "boolean",
            "description" : "Indicates if this rebook has been cancelled."
          },
          "cancelledReason" : {
            "type" : "string",
            "description" : "The reason for the cancellation as provided when it was cancelled."
          },
          "description" : {
            "type" : "string",
            "description" : "Description or note for the rebook."
          },
          "reference" : {
            "type" : "string",
            "description" : "Optional reference to an invoice, receipt, journal number, etc."
          },
          "invoiceDate" : {
            "type" : "string",
            "description" : "Optional invoice date if the rebook is originating from an invoice or other business case.",
            "format" : "date"
          },
          "currencyRate" : {
            "type" : "number",
            "description" : "Currency rate if the rebook amount was in a currency different to the main currency. Otherwise defaulted with 1."
          },
          "currencyCode" : {
            "type" : "string",
            "description" : "Currency if the rebook amount was in a currency different to the main currency. See the /currencies resource."
          },
          "amount" : {
            "type" : "number",
            "description" : "Total amount of the rebook in the main currency."
          }
        }
      },
      "RebookCreationDtoV1" : {
        "required" : [ "account", "amount", "contraAccount", "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "Rebook type, which limits available accounts. See the /accounts/rebook_accounts resource.",
            "example" : "REBOOK",
            "enum" : [ "REBOOK", "CORRECTION", "FINALIZATION", "BALANCE" ]
          },
          "date" : {
            "type" : "string",
            "description" : "Date of the booking, defaulted to the current date.",
            "format" : "date",
            "example" : "2020-12-31"
          },
          "amount" : {
            "type" : "number",
            "description" : "Total amount of the booking. Maximum of 10 digits and 5 fractional digits. Note that these bookings have no tax.",
            "example" : 10
          },
          "description" : {
            "type" : "string",
            "description" : "Description or additional information for the booking."
          },
          "reference" : {
            "type" : "string",
            "description" : "Text reference to other receipts, invoices, etc."
          },
          "account" : {
            "type" : "string",
            "description" : "Account to subtract the amount from, Must be a valid account for the rebook type (see the /accounts/rebook_accounts resource)",
            "example" : "2800"
          },
          "contraAccount" : {
            "type" : "string",
            "description" : "Account to add the amount to. Must be a valid contra account for the rebook type and selected account. See the /accounts/{account}/rebook_contra_accounts resource.",
            "example" : "2700"
          }
        }
      },
      "IncomingInvoiceDtoV1" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "ID of the invoice, automatically assigned.",
            "example" : "e7083036-8779-d492-0c78-332cfde21b68"
          },
          "invoiceSequence" : {
            "type" : "string",
            "description" : "Automatically assigned sequence number for booked invoices. Unpaid invoices in single-entry accounting don't have a sequence number.",
            "example" : "ER2020 68"
          },
          "invoiceDate" : {
            "type" : "string",
            "description" : "Invoice date. Required for double entry accounting and with special bookings.",
            "format" : "date",
            "example" : "2020-12-31"
          },
          "dueDate" : {
            "type" : "string",
            "description" : "Optional due date of the invoice.",
            "format" : "date",
            "example" : "2020-12-31"
          },
          "paidDate" : {
            "type" : "string",
            "description" : "Date the invoice was paid. When supplied at invoice creation, the invoice is marked as paid immediately, and a booking created (for single-entry accounting)",
            "format" : "date",
            "example" : "2020-12-31"
          },
          "cancelledReason" : {
            "type" : "string",
            "description" : "For cancelled invoices, the reason supplied during the cancellation."
          },
          "cancelledDate" : {
            "type" : "string",
            "description" : "Cancellation date. If a date is present, the invoice is treated as cancelled.",
            "format" : "date"
          },
          "supplier" : {
            "type" : "string",
            "description" : "ID of the optional supplier, see the /suppliers resource.",
            "example" : "e7083036-8779-d492-0c78-332cfde21b68"
          },
          "supplierName" : {
            "type" : "string",
            "description" : "Name of the supplier, if no ID is provided.",
            "example" : "ManubuGmbh"
          },
          "invoiceReference" : {
            "type" : "string",
            "description" : "Optional reference to other receipts, invoices, etc."
          },
          "description" : {
            "type" : "string",
            "description" : "Optional description for the invoice."
          },
          "netTotal" : {
            "type" : "number",
            "description" : "Net amount of the invoice. Will be calculated automatically.",
            "readOnly" : true
          },
          "taxTotal" : {
            "type" : "number",
            "description" : "Tax amount of the invoice. Will be calculated automatically.",
            "readOnly" : true
          },
          "total" : {
            "type" : "number",
            "description" : "Total amount of the invoice, including tax. Will be calculated automatically.",
            "readOnly" : true
          },
          "remainingTotal" : {
            "type" : "number",
            "description" : "Unpaid remaining amount in the invoice currency."
          },
          "remainingTotalInMainCurrency" : {
            "type" : "number",
            "description" : "Unpaid remaining amount in the accounting currency (usually EUR). When fully paid, the remaining amount is 0."
          },
          "currency" : {
            "type" : "string",
            "description" : "Currency code of the invoice, see the /currencies resource. Defaulted with EUR.",
            "example" : "EUR"
          },
          "currencyRate" : {
            "type" : "number",
            "description" : "Currency rate of the invoice. Defaulted with 1.",
            "example" : 1
          },
          "deliveryFromDate" : {
            "type" : "string",
            "description" : "Optional from date for a delivery span. Only available for double-entry accounting.",
            "format" : "date",
            "example" : "2023-12-31"
          },
          "deliveryToDate" : {
            "type" : "string",
            "description" : "Optional to date for a delivery span. Only available for double-entry accounting.",
            "format" : "date",
            "example" : "2023-12-31"
          },
          "lines" : {
            "type" : "array",
            "description" : "List of invoice lines. The supplied order of the array defines the assigned line numbers.",
            "items" : {
              "$ref" : "#/components/schemas/InvoiceLineDtoV1"
            }
          },
          "bookings" : {
            "type" : "array",
            "description" : "List of bookings registered with this invoice, like initial booking, payment and cancellation bookings.",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/InvoiceBookingDtoV1"
            }
          },
          "note" : {
            "type" : "string",
            "description" : "Optional internal note for the invoice."
          }
        }
      },
      "InvoiceBookingDtoV1" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Uuid of the booking.",
            "readOnly" : true
          },
          "type" : {
            "type" : "string",
            "description" : "Type of the booking: InvoiceInitialBookingDto for bookings that were generated in cash-based accounting or with the invoice, InvoicePaymentBookingDto for payments created in double-entry accounting, and InvoiceCancellationBookingDto for bookings that cancel another booking.",
            "readOnly" : true,
            "example" : "InvoiceInitialBookingDto"
          },
          "number" : {
            "type" : "integer",
            "description" : "Sequence number of the booking, starting with 1. Note that InvoiceCancellationBookingDto bookings share the number with the booking they cancel.",
            "format" : "int32",
            "readOnly" : true,
            "example" : 1
          },
          "cancelled" : {
            "type" : "boolean",
            "description" : "Indicates if the booking was cancelled. If set, a InvoiceCancellationBookingDto exists with the same number.",
            "readOnly" : true,
            "example" : false
          },
          "reconciled" : {
            "type" : "boolean",
            "description" : "Indicates if this booking was reconciled with an entity from another application module. If set, the booking cannot be cancelled directly and must be cancelled from the module.",
            "readOnly" : true,
            "example" : false
          },
          "reconciliationType" : {
            "type" : "string",
            "description" : "The type of reconciliation, if it was reconciled. Currently only BANK_STATEMENT is a possible type.",
            "readOnly" : true,
            "example" : "BANK_STATEMENT",
            "enum" : [ "NONE", "BANK_STATEMENT" ]
          },
          "journalNumber" : {
            "type" : "string",
            "description" : "The journal number of the journal generated with this booking.",
            "readOnly" : true,
            "example" : "A2020 1"
          }
        },
        "description" : "List of bookings registered with this invoice, like initial booking, payment and cancellation bookings.",
        "readOnly" : true
      },
      "InvoiceLineDtoV1" : {
        "required" : [ "account", "amount", "amountType" ],
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "Description text of the line."
          },
          "amount" : {
            "type" : "number",
            "description" : "The total item amount, i.e. number of units purchased. Maximum of 10 digits and 5 fractional digits.",
            "example" : 10
          },
          "amountType" : {
            "type" : "string",
            "description" : "Determines if the item price is net without tax (N) or total (T). For IG/reverse charge lines, the amount type must be N.",
            "enum" : [ "N", "T" ]
          },
          "account" : {
            "type" : "string",
            "description" : "Account code to use for this line. See the /accounts resource, and the E account type.",
            "example" : "4000"
          },
          "taxEntry" : {
            "type" : "string",
            "description" : "Tax class entry code for the tax class to use, defaulted from the account if not present. See the /accounts/{account}/tax_class_entries resource."
          },
          "taxRate" : {
            "type" : "number",
            "description" : "Tax rate of the line, derived from the tax class entry.",
            "readOnly" : true
          },
          "netAmount" : {
            "type" : "number",
            "description" : "Total net amount of the line. Maximum of 10 digits and 2 fractional digits.",
            "example" : 100.0
          },
          "taxAmount" : {
            "type" : "number",
            "description" : "Total tax amount of the line. Maximum of 10 digits and 2 fractional digits.",
            "example" : 20.0
          },
          "totalAmount" : {
            "type" : "number",
            "description" : "Total amount (net + tax) of the line. Maximum of 10 digits and 2 fractional digits.",
            "example" : 120.0
          },
          "privatePart" : {
            "type" : "number",
            "description" : "Private part amount as total amount or percentage. Must be set with privatePartType. Maximum of 10 digits and 5 fractional digits.",
            "example" : 10.0
          },
          "privatePartType" : {
            "type" : "string",
            "description" : "Determines if the private part is a fixed amount (A) or a percentage (P)",
            "example" : "A"
          },
          "privatePartAccount" : {
            "type" : "string",
            "description" : "Account code to use for the private part. Defaulted if not specified. See the /accounts resource - the account must be a private part account.",
            "example" : "9800"
          },
          "taxEntryModifier" : {
            "type" : "string",
            "description" : "Tax class entry modifier for the tax class to use for special bookings. See the /accounts/{account}/tax_class_entries resource. (Relevant only for incoming invoices)",
            "example" : "ASTD_000_071"
          },
          "additionalSequence" : {
            "type" : "string",
            "description" : "Additional sequence assigned to the line on creation, like an asset or purchase journal number.",
            "readOnly" : true,
            "example" : "WEB2020 1"
          }
        },
        "description" : "List of invoice lines. The supplied order of the array defines the assigned line numbers."
      },
      "JournalDtoV1" : {
        "type" : "object",
        "properties" : {
          "journalType" : {
            "type" : "string",
            "description" : "Journal type: IncomeJournal, OutgoJournal, or RebookJournal."
          },
          "netTotal" : {
            "type" : "number",
            "description" : "Total net sum of the journal in the main currency."
          },
          "taxTotal" : {
            "type" : "number",
            "description" : "Total tax sum of the journal in the main currency."
          },
          "total" : {
            "type" : "number",
            "description" : "Total sum of the journal in the main currency."
          },
          "cancelled" : {
            "type" : "boolean",
            "description" : "Indicates if the journal has been cancelled."
          }
        }
      },
      "IncomingInvoiceReturnV1Dto" : {
        "type" : "object",
        "properties" : {
          "result" : {
            "$ref" : "#/components/schemas/IncomingInvoiceDtoV1"
          },
          "warnings" : {
            "type" : "array",
            "description" : "List of localized warnings created during the operation.",
            "items" : {
              "type" : "string",
              "description" : "List of localized warnings created during the operation."
            }
          },
          "infos" : {
            "type" : "array",
            "description" : "List of localized reminders and information created during the operation.",
            "items" : {
              "type" : "string",
              "description" : "List of localized reminders and information created during the operation."
            }
          }
        }
      },
      "IncomingInvoiceCreationDtoV1" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "ID of the invoice, automatically assigned.",
            "example" : "e7083036-8779-d492-0c78-332cfde21b68"
          },
          "invoiceSequence" : {
            "type" : "string",
            "description" : "Automatically assigned sequence number for booked invoices. Unpaid invoices in single-entry accounting don't have a sequence number.",
            "example" : "ER2020 68"
          },
          "invoiceDate" : {
            "type" : "string",
            "description" : "Invoice date. Required for double entry accounting and with special bookings.",
            "format" : "date",
            "example" : "2020-12-31"
          },
          "dueDate" : {
            "type" : "string",
            "description" : "Optional due date of the invoice.",
            "format" : "date",
            "example" : "2020-12-31"
          },
          "paidDate" : {
            "type" : "string",
            "description" : "Date the invoice was paid. When supplied at invoice creation, the invoice is marked as paid immediately, and a booking created (for single-entry accounting)",
            "format" : "date",
            "example" : "2020-12-31"
          },
          "paidContraAccount" : {
            "type" : "string",
            "description" : "The means-of-payment account the invoice is to be paid with, see the /accounts resource. Only used when the paid date is set on creation.",
            "example" : "2700"
          },
          "cancelledReason" : {
            "type" : "string",
            "description" : "For cancelled invoices, the reason supplied during the cancellation."
          },
          "cancelledDate" : {
            "type" : "string",
            "description" : "Cancellation date. If a date is present, the invoice is treated as cancelled.",
            "format" : "date"
          },
          "supplier" : {
            "type" : "string",
            "description" : "ID of the optional supplier, see the /suppliers resource.",
            "example" : "e7083036-8779-d492-0c78-332cfde21b68"
          },
          "supplierName" : {
            "type" : "string",
            "description" : "Name of the supplier, if no ID is provided.",
            "example" : "ManubuGmbh"
          },
          "invoiceReference" : {
            "type" : "string",
            "description" : "Optional reference to other receipts, invoices, etc."
          },
          "description" : {
            "type" : "string",
            "description" : "Optional description for the invoice."
          },
          "netTotal" : {
            "type" : "number",
            "description" : "Net amount of the invoice. Will be calculated automatically.",
            "readOnly" : true
          },
          "taxTotal" : {
            "type" : "number",
            "description" : "Tax amount of the invoice. Will be calculated automatically.",
            "readOnly" : true
          },
          "total" : {
            "type" : "number",
            "description" : "Total amount of the invoice, including tax. Will be calculated automatically.",
            "readOnly" : true
          },
          "remainingTotal" : {
            "type" : "number",
            "description" : "Unpaid remaining amount in the invoice currency."
          },
          "remainingTotalInMainCurrency" : {
            "type" : "number",
            "description" : "Unpaid remaining amount in the accounting currency (usually EUR). When fully paid, the remaining amount is 0."
          },
          "currency" : {
            "type" : "string",
            "description" : "Currency code of the invoice, see the /currencies resource. Defaulted with EUR.",
            "example" : "EUR"
          },
          "currencyRate" : {
            "type" : "number",
            "description" : "Currency rate of the invoice. Defaulted with 1.",
            "example" : 1
          },
          "lines" : {
            "type" : "array",
            "description" : "List of invoice lines. The supplied order of the array defines the assigned line numbers.",
            "items" : {
              "$ref" : "#/components/schemas/InvoiceLineDtoV1"
            }
          },
          "bookings" : {
            "type" : "array",
            "description" : "List of bookings registered with this invoice, like initial booking, payment and cancellation bookings.",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/InvoiceBookingDtoV1"
            }
          },
          "note" : {
            "type" : "string",
            "description" : "Optional internal note for the invoice."
          },
          "deliveryFromDate" : {
            "type" : "string",
            "description" : "Optional from date for a delivery span. Only available for double-entry accounting.",
            "format" : "date",
            "example" : "2023-12-31"
          },
          "deliveryToDate" : {
            "type" : "string",
            "description" : "Optional to date for a delivery span. Only available for double-entry accounting.",
            "format" : "date",
            "example" : "2023-12-31"
          }
        }
      },
      "CancellationDtoV1" : {
        "required" : [ "cancelDate", "cancelReason" ],
        "type" : "object",
        "properties" : {
          "cancelDate" : {
            "type" : "string",
            "description" : "Date of the cancellation.",
            "format" : "date"
          },
          "cancelReason" : {
            "type" : "string",
            "description" : "Reason for the cancellation."
          }
        }
      },
      "CbiPaymentDtoV1" : {
        "required" : [ "contraAccount", "paymentDate" ],
        "type" : "object",
        "properties" : {
          "paymentType" : {
            "type" : "string",
            "description" : "Indicates if the payment should create a payment booking (= PAYMENT) or not, as a booking was already created manually before (= EXISTING_CREDIT). Defaults to PAYMENT.",
            "example" : "PAYMENT",
            "enum" : [ "PAYMENT", "EXISTING_CREDIT", "DISCOUNT", "IRRECOVERABLE", "CURRENCY_DIFFERENCE", "ROUNDING_DIFFERENCE" ]
          },
          "paymentAmount" : {
            "type" : "number",
            "description" : "Total paid amount in the currency of the invoice.",
            "example" : 10
          },
          "paymentAmountInMainCurrency" : {
            "type" : "number",
            "description" : "Total paid amount in the accounting currency (usually EUR).",
            "example" : 10
          },
          "contraAccount" : {
            "type" : "string",
            "description" : "Account that made/received the payment. See the /accounts resource. Must be of the cash account type (U) and not be reserved (e.g. from a cash register).",
            "example" : "2700"
          },
          "paymentDate" : {
            "type" : "string",
            "description" : "Date of the payment.",
            "format" : "date",
            "example" : "2020-12-31"
          },
          "currencyRate" : {
            "type" : "number",
            "description" : "Currency rate at the payment date. Defaulted with 1.",
            "example" : 1
          },
          "paymentDescription" : {
            "type" : "string",
            "description" : "Optional description of the payment."
          }
        }
      },
      "RestPaymentDtoV1" : {
        "required" : [ "paymentDate", "type" ],
        "type" : "object",
        "properties" : {
          "paymentDate" : {
            "type" : "string",
            "description" : "Date of the payment.",
            "format" : "date",
            "example" : "2020-12-31"
          },
          "currencyRate" : {
            "type" : "number",
            "description" : "Currency rate if the payment is for a currency other than the main currency. Defaulted with 1.",
            "example" : 1
          },
          "paymentDescription" : {
            "type" : "string",
            "description" : "An optional description of the payment."
          },
          "type" : {
            "type" : "string",
            "description" : "The type of payment, with only DISCOUNT and IRRECOVERABLE (for outgoing invoices) being permitted. Other types are automatically generated.",
            "example" : "DISCOUNT",
            "enum" : [ "PAYMENT", "EXISTING_CREDIT", "DISCOUNT", "IRRECOVERABLE", "CURRENCY_DIFFERENCE", "ROUNDING_DIFFERENCE" ]
          }
        }
      },
      "OutgoingInvoiceDtoV1" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "ID of the invoice, automatically assigned.",
            "example" : "e7083036-8779-d492-0c78-332cfde21b68"
          },
          "customer" : {
            "type" : "string",
            "description" : "ID of the optional customer, see the /customers resource.",
            "example" : "e7083036-8779-d492-0c78-332cfde21b68"
          },
          "customerName" : {
            "type" : "string",
            "description" : "Name of the customer, if no ID is provided.",
            "example" : "ManubuGmbh"
          },
          "invoiceSequence" : {
            "type" : "string",
            "description" : "Automatically assigned sequence number for booked invoices. Unpaid invoices in single-entry accounting don't have a sequence number.",
            "example" : "ER2020 68"
          },
          "invoiceReference" : {
            "type" : "string",
            "description" : "Optional reference to other receipts, invoices, etc."
          },
          "invoiceDate" : {
            "type" : "string",
            "description" : "Invoice date. Required for double entry accounting and with special bookings.",
            "format" : "date",
            "example" : "2020-12-31"
          },
          "dueDate" : {
            "type" : "string",
            "description" : "Optional due date of the invoice.",
            "format" : "date",
            "example" : "2020-12-31"
          },
          "paidDate" : {
            "type" : "string",
            "description" : "Date the invoice was paid. When supplied at invoice creation, the invoice is marked as paid immediately, and a booking created (for single-entry accounting)",
            "format" : "date",
            "example" : "2020-12-31"
          },
          "cancelledReason" : {
            "type" : "string",
            "description" : "For cancelled invoices, the reason supplied during the cancellation."
          },
          "cancelledDate" : {
            "type" : "string",
            "description" : "Cancellation date. If a date is present, the invoice is treated as cancelled.",
            "format" : "date"
          },
          "description" : {
            "type" : "string",
            "description" : "Optional description for the invoice."
          },
          "netTotal" : {
            "type" : "number",
            "description" : "Net amount of the invoice. Will be calculated automatically.",
            "readOnly" : true
          },
          "taxTotal" : {
            "type" : "number",
            "description" : "Tax amount of the invoice. Will be calculated automatically.",
            "readOnly" : true
          },
          "total" : {
            "type" : "number",
            "description" : "Total amount of the invoice, including tax. Will be calculated automatically.",
            "readOnly" : true
          },
          "remainingTotal" : {
            "type" : "number",
            "description" : "Unpaid remaining amount in the invoice currency."
          },
          "remainingTotalInMainCurrency" : {
            "type" : "number",
            "description" : "Unpaid remaining amount in the accounting currency (usually EUR). When fully paid, the remaining amount is 0."
          },
          "currency" : {
            "type" : "string",
            "description" : "Currency code of the invoice, see the /currencies resource. Defaulted with EUR.",
            "example" : "EUR"
          },
          "currencyRate" : {
            "type" : "number",
            "description" : "Currency rate of the invoice. Defaulted with 1.",
            "example" : 1
          },
          "deliveryFromDate" : {
            "type" : "string",
            "description" : "Optional from date for a delivery span. Only available for double-entry accounting.",
            "format" : "date",
            "example" : "2023-12-31"
          },
          "deliveryToDate" : {
            "type" : "string",
            "description" : "Optional to date for a delivery span. Only available for double-entry accounting.",
            "format" : "date",
            "example" : "2023-12-31"
          },
          "lines" : {
            "type" : "array",
            "description" : "List of invoice lines. The supplied order of the array defines the assigned line numbers.",
            "items" : {
              "$ref" : "#/components/schemas/InvoiceLineDtoV1"
            }
          },
          "bookings" : {
            "type" : "array",
            "description" : "List of bookings registered with this invoice, like initial booking, payment and cancellation bookings.",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/InvoiceBookingDtoV1"
            }
          },
          "note" : {
            "type" : "string",
            "description" : "Optional internal note for the invoice."
          }
        }
      },
      "OutgoingInvoiceReturnV1Dto" : {
        "type" : "object",
        "properties" : {
          "result" : {
            "$ref" : "#/components/schemas/OutgoingInvoiceDtoV1"
          },
          "warnings" : {
            "type" : "array",
            "description" : "List of localized warnings created during the operation.",
            "items" : {
              "type" : "string",
              "description" : "List of localized warnings created during the operation."
            }
          },
          "infos" : {
            "type" : "array",
            "description" : "List of localized reminders and information created during the operation.",
            "items" : {
              "type" : "string",
              "description" : "List of localized reminders and information created during the operation."
            }
          }
        }
      },
      "OutgoingInvoiceCreationDtoV1" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "ID of the invoice, automatically assigned.",
            "example" : "e7083036-8779-d492-0c78-332cfde21b68"
          },
          "customer" : {
            "type" : "string",
            "description" : "ID of the optional customer, see the /customers resource.",
            "example" : "e7083036-8779-d492-0c78-332cfde21b68"
          },
          "customerName" : {
            "type" : "string",
            "description" : "Name of the customer, if no ID is provided.",
            "example" : "ManubuGmbh"
          },
          "invoiceSequence" : {
            "type" : "string",
            "description" : "Automatically assigned sequence number for booked invoices. Unpaid invoices in single-entry accounting don't have a sequence number.",
            "example" : "ER2020 68"
          },
          "invoiceReference" : {
            "type" : "string",
            "description" : "Optional reference to other receipts, invoices, etc."
          },
          "invoiceDate" : {
            "type" : "string",
            "description" : "Invoice date. Required for double entry accounting and with special bookings.",
            "format" : "date",
            "example" : "2020-12-31"
          },
          "dueDate" : {
            "type" : "string",
            "description" : "Optional due date of the invoice.",
            "format" : "date",
            "example" : "2020-12-31"
          },
          "paidDate" : {
            "type" : "string",
            "description" : "Date the invoice was paid. When supplied at invoice creation, the invoice is marked as paid immediately, and a booking created (for single-entry accounting)",
            "format" : "date",
            "example" : "2020-12-31"
          },
          "paidContraAccount" : {
            "type" : "string",
            "description" : "The means-of-payment account the invoice is to be paid with, see the /accounts resource. Only used when the paid date is set on creation.",
            "example" : "2700"
          },
          "cancelledReason" : {
            "type" : "string",
            "description" : "For cancelled invoices, the reason supplied during the cancellation."
          },
          "cancelledDate" : {
            "type" : "string",
            "description" : "Cancellation date. If a date is present, the invoice is treated as cancelled.",
            "format" : "date"
          },
          "description" : {
            "type" : "string",
            "description" : "Optional description for the invoice."
          },
          "netTotal" : {
            "type" : "number",
            "description" : "Net amount of the invoice. Will be calculated automatically.",
            "readOnly" : true
          },
          "taxTotal" : {
            "type" : "number",
            "description" : "Tax amount of the invoice. Will be calculated automatically.",
            "readOnly" : true
          },
          "total" : {
            "type" : "number",
            "description" : "Total amount of the invoice, including tax. Will be calculated automatically.",
            "readOnly" : true
          },
          "remainingTotal" : {
            "type" : "number",
            "description" : "Unpaid remaining amount in the invoice currency."
          },
          "remainingTotalInMainCurrency" : {
            "type" : "number",
            "description" : "Unpaid remaining amount in the accounting currency (usually EUR). When fully paid, the remaining amount is 0."
          },
          "currency" : {
            "type" : "string",
            "description" : "Currency code of the invoice, see the /currencies resource. Defaulted with EUR.",
            "example" : "EUR"
          },
          "currencyRate" : {
            "type" : "number",
            "description" : "Currency rate of the invoice. Defaulted with 1.",
            "example" : 1
          },
          "lines" : {
            "type" : "array",
            "description" : "List of invoice lines. The supplied order of the array defines the assigned line numbers.",
            "items" : {
              "$ref" : "#/components/schemas/InvoiceLineDtoV1"
            }
          },
          "bookings" : {
            "type" : "array",
            "description" : "List of bookings registered with this invoice, like initial booking, payment and cancellation bookings.",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/InvoiceBookingDtoV1"
            }
          },
          "note" : {
            "type" : "string",
            "description" : "Optional internal note for the invoice."
          },
          "deliveryFromDate" : {
            "type" : "string",
            "description" : "Optional from date for a delivery span. Only available for double-entry accounting.",
            "format" : "date",
            "example" : "2023-12-31"
          },
          "deliveryToDate" : {
            "type" : "string",
            "description" : "Optional to date for a delivery span. Only available for double-entry accounting.",
            "format" : "date",
            "example" : "2023-12-31"
          }
        }
      },
      "AccountDtoV1" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Numeric account code.",
            "example" : "4000"
          },
          "name" : {
            "type" : "string",
            "description" : "Readable, translated name.",
            "example" : "Einnahmen (Erlöse)"
          },
          "type" : {
            "type" : "string",
            "description" : "Account type code. Types are organizational groups of accounts, but have no direct impact on bookings. Examples are E (incomes) and A (outgos)",
            "example" : "E"
          },
          "defaultTaxClassEntry" : {
            "type" : "string",
            "description" : "The code of the default tax class. If no tax class is specified, this class will be used, and if forced, only this class can be used.",
            "example" : "020"
          },
          "forcedTaxClass" : {
            "type" : "boolean",
            "description" : "If the default tax class is forced, it must be set and bookings with different tax class entries are not allowed for this account."
          }
        }
      },
      "AccountBalanceDtoV1" : {
        "type" : "object",
        "properties" : {
          "accountCode" : {
            "type" : "string",
            "description" : "Numeric account code.",
            "example" : "4000"
          },
          "accountName" : {
            "type" : "string",
            "description" : "Readable, translated name.",
            "example" : "Einnahmen (Erlöse)"
          },
          "credit" : {
            "type" : "number",
            "description" : "Account credit over the specified time period.",
            "example" : 147
          },
          "debit" : {
            "type" : "number",
            "description" : "Account debit over the specified time period.",
            "example" : 147
          },
          "sum" : {
            "type" : "number",
            "description" : "Account sum over the specified time period.",
            "example" : 147
          }
        }
      },
      "AccountLineDtoV1" : {
        "required" : [ "account", "accountClass", "accountName", "monthSums" ],
        "type" : "object",
        "properties" : {
          "account" : {
            "type" : "string",
            "description" : "Numeric account code.",
            "example" : "4000"
          },
          "accountClass" : {
            "type" : "string",
            "description" : "Class to which this account belongs, defined as accounting group. This is usually based on the first number of the account code.",
            "enum" : [ "GROUP_0", "GROUP_1", "GROUP_2", "GROUP_3", "GROUP_4", "GROUP_4_CHANGES", "GROUP_5", "GROUP_6", "GROUP_7", "GROUP_8_GAINS", "GROUP_8_LOSSES", "GROUP_8_OTHER", "GROUP_9" ]
          },
          "openingBalance" : {
            "type" : "number",
            "description" : "The opening balance of the account. Is only returned when opening_balances was set in the request."
          },
          "monthSums" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AccountMonthLineDtoV1"
            }
          },
          "balanceSum" : {
            "type" : "number",
            "description" : "The closing balance of the account. Is only returned when closing_entries was set in the request."
          },
          "totalSum" : {
            "type" : "number",
            "description" : "The total sum of the account. Is only returned when totals was set in the request."
          },
          "accountName" : {
            "type" : "string",
            "description" : "Readable, translated name.",
            "example" : "Einnahmen (Erlöse)"
          }
        }
      },
      "AccountMonthLineDtoV1" : {
        "required" : [ "month", "sum", "year" ],
        "type" : "object",
        "properties" : {
          "year" : {
            "type" : "integer",
            "format" : "int32"
          },
          "month" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sum" : {
            "type" : "number"
          }
        }
      },
      "TaxClassEntryDtoV1" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The tax class entry code to be used in invoices, receipts, etc.",
            "example" : "020"
          },
          "name" : {
            "type" : "string",
            "description" : "A localized, human-readable name.",
            "example" : "Standard Steuersatz"
          },
          "taxRate" : {
            "type" : "number",
            "description" : "Numeric tax rate of the tax class entry.",
            "example" : 20
          },
          "taxClassEntryModifierList" : {
            "type" : "array",
            "description" : "List of available tax class modifiers. Only relevant for outgoing invoices.",
            "items" : {
              "$ref" : "#/components/schemas/TaxClassModifierDtoV1"
            }
          }
        }
      },
      "TaxClassModifierDtoV1" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "ID to use when specifying a modifier in incoming invoices."
          },
          "name" : {
            "type" : "string",
            "description" : "A localized, human-readable name."
          }
        },
        "description" : "List of available tax class modifiers. Only relevant for outgoing invoices."
      },
      "BankAccountDtoV1" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Unique id for this bank account.",
            "readOnly" : true
          },
          "name" : {
            "type" : "string",
            "description" : "Human-readable name for this bank account.",
            "readOnly" : true
          },
          "bankName" : {
            "type" : "string",
            "description" : "Name of the financial institute.",
            "readOnly" : true
          },
          "accountOwnerName" : {
            "type" : "string",
            "description" : "Name of the account owner.",
            "readOnly" : true
          },
          "bic" : {
            "type" : "string",
            "description" : "BIC code of the account. Only present for bank accounts.",
            "readOnly" : true
          },
          "iban" : {
            "type" : "string",
            "description" : "IBAN of the account. Only present for bank accounts.",
            "readOnly" : true
          },
          "accountCode" : {
            "type" : "string",
            "description" : "Account code for the account tied to this bank account, see /accounts resource.",
            "readOnly" : true
          },
          "accountUserDescription" : {
            "type" : "string",
            "description" : "Human-readable description of the account tied to this bank account, if present.",
            "readOnly" : true
          },
          "currencyCode" : {
            "type" : "string",
            "description" : "Currency code for the account in ISO format. Defaults to EUR.",
            "readOnly" : true,
            "example" : "USD"
          },
          "shown" : {
            "type" : "boolean",
            "description" : "Indicates if this bank account is displayed (true) or hidden from the GUI (false).",
            "readOnly" : true
          }
        },
        "description" : "A bank account represents a payment account. These are usually bank accounts, but can also include credit card and cash payment accounts."
      },
      "DocumentKeyDtoV1" : {
        "type" : "object",
        "properties" : {
          "providerId" : {
            "type" : "string",
            "description" : "The ID which identifies this particular document to the provider."
          },
          "provider" : {
            "type" : "string",
            "description" : "Provider type, i.e. where the file is stored. DMS is the app-internal storage, all others are external cloud storage providers.",
            "enum" : [ "DMS", "DROPBOX", "GOOGLE_DRIVE", "NEXTCLOUD", "ONEDRIVE" ]
          }
        },
        "description" : "Document key identifying this document to the storage layer.",
        "readOnly" : true
      },
      "DocumentMetadataDtoV1" : {
        "required" : [ "key" ],
        "type" : "object",
        "properties" : {
          "textValue" : {
            "type" : "string",
            "description" : "Only one value type must be present."
          },
          "key" : {
            "type" : "string",
            "description" : "A key describing the content of this field.",
            "example" : "TOTAL_AMOUNT",
            "enum" : [ "INVOICE_DATE", "PAID_DATE", "DUE_DATE", "MERCHANT_NAME", "MERCHANT_FIRST_NAME", "MERCHANT_LAST_NAME", "MERCHANT_TELEPHONE", "MERCHANT_IBAN", "MERCHANT_TAX_NUMBER", "MERCHANT_EMAIL", "MERCHANT_STREET_NAME", "MERCHANT_STREET_NUMBER", "MERCHANT_ZIP_CODE", "MERCHANT_CITY", "MERCHANT_COUNTRY", "MERCHANT_REGION", "MERCHANT_COMPANY_REGISTRATION_NUMBER", "MERCHANT_COMPANY_JURISDICTION", "CUSTOMER_NAME", "CUSTOMER_FIRST_NAME", "CUSTOMER_LAST_NAME", "CUSTOMER_TELEPHONE", "CUSTOMER_IBAN", "CUSTOMER_TAX_NUMBER", "CUSTOMER_EMAIL", "CUSTOMER_STREET_NAME", "CUSTOMER_STREET_NUMBER", "CUSTOMER_ZIP_CODE", "CUSTOMER_CITY", "CUSTOMER_COUNTRY", "CUSTOMER_NUMBER", "CUSTOMER_BBG_NUMBER", "SUPPLIER_BGG_NUMBER", "INVOICE_NUMBER", "ORDER_NUMBER", "CURRENCY", "NET_AMOUNT", "TAX_AMOUNT", "TOTAL_AMOUNT", "TAX_RATE", "DESCRIPTION", "QR_CODE", "IS_DUPLICATE", "DUPLICATE_REFERENCE", "PARTNER_NAME", "PARTNER_FIRST_NAME", "PARTNER_LAST_NAME", "PARTNER_TELEPHONE", "PARTNER_IBAN", "PARTNER_TAX_NUMBER", "PARTNER_EMAIL", "PARTNER_STREET_NAME", "PARTNER_STREET_NUMBER", "PARTNER_ZIP_CODE", "PARTNER_CITY", "PARTNER_COUNTRY", "RECIPIENT" ]
          },
          "priority" : {
            "type" : "integer",
            "description" : "A number expressing the confidence or accuracy of the metadata, ranging between 1 and 255 with 1 being the highest.",
            "format" : "int32",
            "example" : 100
          },
          "numericValue" : {
            "type" : "number",
            "description" : "Only one value type must be present."
          },
          "qualifier" : {
            "type" : "integer",
            "description" : "A number describing if this metadata value belongs to a subgroup of information, for example a specific line of an invoice.",
            "format" : "int32",
            "example" : 1
          },
          "booleanValue" : {
            "type" : "boolean",
            "description" : "Only one value type must be present."
          },
          "dateValue" : {
            "type" : "string",
            "description" : "Only one value type must be present.",
            "format" : "date"
          }
        },
        "description" : "A list of metadata to include with the new document."
      },
      "DocumentWithMetadataDtoV1" : {
        "required" : [ "contentType", "fileName" ],
        "type" : "object",
        "properties" : {
          "metadata" : {
            "type" : "array",
            "description" : "A list of all metadata attached to the document.",
            "items" : {
              "$ref" : "#/components/schemas/DocumentMetadataDtoV1"
            }
          },
          "documentDescription" : {
            "type" : "string",
            "description" : "Optional document description."
          },
          "key" : {
            "$ref" : "#/components/schemas/DocumentKeyDtoV1"
          },
          "fileName" : {
            "type" : "string",
            "description" : "File name of the document. Will be sanitized and stripped of special characters. Whitespace will be replaced with underscores."
          },
          "contentType" : {
            "type" : "string",
            "description" : "MIME type of the file.",
            "example" : "application/pdf"
          }
        }
      },
      "DocumentUploadDtoV1" : {
        "type" : "object",
        "properties" : {
          "skipOcr" : {
            "type" : "boolean",
            "description" : "If set to true, this document will not be processed automatically by OCR services."
          },
          "documentDescription" : {
            "type" : "string",
            "description" : "An optional description of the document itself. Will be shown as additional information and used for search."
          },
          "metadata" : {
            "type" : "array",
            "description" : "A list of metadata to include with the new document.",
            "items" : {
              "$ref" : "#/components/schemas/DocumentMetadataDtoV1"
            }
          }
        }
      },
      "Attachment" : {
        "type" : "object",
        "properties" : {
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "object" : {
            "type" : "object"
          },
          "contentDisposition" : {
            "$ref" : "#/components/schemas/ContentDisposition"
          },
          "contentId" : {
            "type" : "string"
          },
          "dataHandler" : {
            "type" : "object",
            "properties" : {
              "dataSource" : {
                "type" : "object",
                "properties" : {
                  "name" : {
                    "type" : "string"
                  },
                  "inputStream" : {
                    "type" : "object"
                  },
                  "outputStream" : {
                    "type" : "object"
                  },
                  "contentType" : {
                    "type" : "string"
                  }
                }
              },
              "commandMap" : {
                "type" : "object",
                "properties" : {
                  "mimeTypes" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  }
                },
                "writeOnly" : true
              },
              "transferDataFlavors" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "mimeType" : {
                      "type" : "string"
                    },
                    "humanPresentableName" : {
                      "type" : "string"
                    },
                    "primaryType" : {
                      "type" : "string"
                    },
                    "subType" : {
                      "type" : "string"
                    },
                    "representationClassInputStream" : {
                      "type" : "boolean"
                    },
                    "representationClassByteBuffer" : {
                      "type" : "boolean"
                    },
                    "flavorTextType" : {
                      "type" : "boolean"
                    },
                    "representationClassReader" : {
                      "type" : "boolean"
                    },
                    "representationClassCharBuffer" : {
                      "type" : "boolean"
                    },
                    "representationClassSerializable" : {
                      "type" : "boolean"
                    },
                    "representationClassRemote" : {
                      "type" : "boolean"
                    },
                    "mimeTypeSerializedObject" : {
                      "type" : "boolean"
                    },
                    "defaultRepresentationClassAsString" : {
                      "type" : "string"
                    },
                    "flavorSerializedObjectType" : {
                      "type" : "boolean"
                    },
                    "flavorRemoteObjectType" : {
                      "type" : "boolean"
                    },
                    "flavorJavaFileListType" : {
                      "type" : "boolean"
                    }
                  }
                }
              },
              "preferredCommands" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "commandName" : {
                      "type" : "string"
                    },
                    "commandClass" : {
                      "type" : "string"
                    }
                  }
                }
              },
              "allCommands" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "commandName" : {
                      "type" : "string"
                    },
                    "commandClass" : {
                      "type" : "string"
                    }
                  }
                }
              },
              "name" : {
                "type" : "string"
              },
              "inputStream" : {
                "type" : "object"
              },
              "content" : {
                "type" : "object"
              },
              "outputStream" : {
                "type" : "object"
              },
              "contentType" : {
                "type" : "string"
              }
            }
          },
          "contentType" : {
            "type" : "object",
            "properties" : {
              "type" : {
                "type" : "string"
              },
              "subtype" : {
                "type" : "string"
              },
              "parameters" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                }
              },
              "wildcardType" : {
                "type" : "boolean"
              },
              "wildcardSubtype" : {
                "type" : "boolean"
              }
            }
          }
        }
      },
      "ContentDisposition" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string"
          },
          "filename" : {
            "type" : "string"
          },
          "parameters" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }
      },
      "DocumentJsonUploadDtoV1" : {
        "required" : [ "content", "contentType", "fileName" ],
        "type" : "object",
        "properties" : {
          "content" : {
            "type" : "string",
            "description" : "Base64-encoded binary content of the document."
          },
          "fileName" : {
            "type" : "string",
            "description" : "File name of the document."
          },
          "contentType" : {
            "type" : "string",
            "description" : "MIME type of the document. Accepted are images, text/plain and application/pdf, all other types will be replaced by octet-stream."
          },
          "skipOcr" : {
            "type" : "boolean",
            "description" : "If set to true, this document will not be processed automatically by OCR services."
          },
          "documentDescription" : {
            "type" : "string",
            "description" : "An optional description of the document itself. Will be shown as additional information and used for search."
          },
          "metadata" : {
            "type" : "array",
            "description" : "A list of metadata to include with the new document.",
            "items" : {
              "$ref" : "#/components/schemas/DocumentMetadataDtoV1"
            }
          }
        }
      },
      "CountryDtoV1" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "2-letter country code.",
            "example" : "AT"
          },
          "name" : {
            "type" : "string",
            "description" : "Localized name of the country.",
            "example" : "Österreich"
          }
        }
      },
      "RegionDtoV1" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Code of the region to be used for customers and suppliers.",
            "example" : "STMK"
          },
          "name" : {
            "type" : "string",
            "description" : "Localized name of the region.",
            "example" : "Steiermark"
          }
        }
      },
      "CurrencyDtoV1" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Human-readable name of the currency."
          },
          "id" : {
            "type" : "string",
            "description" : "Short code as identifier to be used in currency fields.",
            "example" : "USD"
          }
        },
        "description" : "Currencies to be used in items, receipts, and business documents."
      },
      "NotificationDtoV1" : {
        "type" : "object",
        "properties" : {
          "sender" : {
            "type" : "string",
            "description" : "Name of the sender, if the message came from the communication platform, or the application name if it came as a system notification."
          },
          "text" : {
            "type" : "string",
            "description" : "Message text."
          },
          "priority" : {
            "type" : "string",
            "description" : "Priority of a system notification.",
            "enum" : [ "NONE", "HIGH", "URGENT" ]
          },
          "dateTime" : {
            "type" : "string",
            "description" : "Time when then notification was created.",
            "format" : "date-time"
          }
        }
      },
      "UnitOfMeasureDtoV1" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Short, human-readable keyName for this unit."
          },
          "id" : {
            "type" : "string",
            "description" : "Short code as identifier to be used in UOM-fields.",
            "example" : "KG"
          },
          "description" : {
            "type" : "string",
            "description" : "Optional longer description."
          }
        },
        "description" : "Units of measure to be used in items, receipts, and business documents."
      },
      "PaymentHistoryDtoV1" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Uuid of this payment history entry."
          },
          "date" : {
            "type" : "string",
            "description" : "Date of the payment event.",
            "format" : "date"
          },
          "type" : {
            "type" : "string",
            "description" : "Type of the payment event.",
            "enum" : [ "RECEIVABLES", "RECEIVABLES_DUNNING", "PAYED", "DISCOUNT", "UNCOLLECTABLE", "CANCELLED", "ONACCOUNT", "CURRENCY_DIFFERENCE", "ROUNDING_DIFFERENCE", "CORRECTION", "CREDIT_FOR_INVOICE", "CANCELLATION_INVOICE_FOR_INVOICE", "CREDIT_CASHED" ]
          },
          "note" : {
            "type" : "string",
            "description" : "User-entered note for this payment event."
          },
          "amount" : {
            "type" : "number",
            "description" : "Total amount that was subtracted from the payable document."
          },
          "cancelled" : {
            "type" : "boolean",
            "description" : "If set, the payment event was cancelled."
          },
          "payingAccount" : {
            "type" : "string",
            "description" : "Account used for the payment. See the /accounts resource."
          },
          "cashRegisterId" : {
            "type" : "integer",
            "description" : "Cash register id, if a cash register was used for the payment.See the /cash_registers resource.",
            "format" : "int32"
          },
          "receiptId" : {
            "type" : "string",
            "description" : "Receipt id, if a receipt was created for the payment.See the /receipts resource."
          },
          "receiptQrCode" : {
            "type" : "string",
            "description" : "Machine-readable code of the RKSV data for the receipt."
          },
          "cancellationOfPayment" : {
            "type" : "boolean",
            "description" : "If this is a cancellation, this flag indicates if the cancelled payment was an actual payment (true) or just a cancellation of rest amounts (false)",
            "example" : true
          }
        }
      },
      "PaymentCancellationDtoV1" : {
        "required" : [ "cancelDate", "cancelReason" ],
        "type" : "object",
        "properties" : {
          "cancelDate" : {
            "type" : "string",
            "description" : "Date of the cancellation.",
            "format" : "date"
          },
          "cancelReason" : {
            "type" : "string",
            "description" : "Reason for the cancellation."
          }
        }
      },
      "AddressInfoDtoV1" : {
        "type" : "object",
        "properties" : {
          "salutationCode" : {
            "type" : "string",
            "description" : "Salutation code for a contact as person."
          },
          "title" : {
            "type" : "string",
            "description" : "Title if the contact references a person."
          },
          "firstName" : {
            "type" : "string",
            "description" : "First name if the contact references a person. Required unless a company name is supplied.",
            "example" : "John"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Last name if the contact references a person. Required unless a company name is supplied.",
            "example" : "Doe"
          },
          "compSalutationCode" : {
            "type" : "string",
            "description" : "Salutation code for a contact as a company."
          },
          "companyName" : {
            "type" : "string",
            "description" : "Company name for a company contact. Required unless a first and last name are supplied.",
            "example" : "Doe Inc."
          },
          "streetName" : {
            "type" : "string",
            "description" : "Street name of the address, excluding the number."
          },
          "streetNumber" : {
            "type" : "string",
            "description" : "Street number of the address. May include special characters to designate floor etc.",
            "example" : "1/3/17"
          },
          "zipCode" : {
            "type" : "string",
            "description" : "Zip code of the address."
          },
          "city" : {
            "type" : "string",
            "description" : "City of the address."
          },
          "emailAddress" : {
            "type" : "string",
            "description" : "E-mail address belonging to the contact."
          },
          "copyEmailAddress" : {
            "type" : "string",
            "description" : "E-mail address belonging to the contact."
          },
          "copyEmailType" : {
            "type" : "string",
            "description" : "E-mail address belonging to the contact.",
            "enum" : [ "CC", "BCC" ]
          },
          "country" : {
            "type" : "string",
            "description" : "Country code of the address. See the /countries resource for all available countries and their codes. Defaulted to AT.",
            "example" : "AT"
          },
          "region" : {
            "type" : "string",
            "description" : "Region code of the address, depending on country. See the /countries/{country}/regions resource for all available regions and their codes.",
            "example" : "STMK"
          }
        },
        "description" : "Specific customer name and address for this document only. If set (with company name and/or customer name), no defaults from customer or address are applied."
      },
      "BusinessDocumentLineDtoV1" : {
        "required" : [ "amount", "netPrice", "taxPrice", "totalPrice" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Line number, automatically assigned based on order of creation.",
            "format" : "int32",
            "readOnly" : true
          },
          "name" : {
            "type" : "string",
            "description" : "Short name identifying the item of this line.",
            "example" : "Testprodukt"
          },
          "description" : {
            "type" : "string",
            "description" : "Descriptive text for the item of the line."
          },
          "type" : {
            "type" : "string",
            "description" : "Special type of the line. LINE is the default and designates regular item lines, credit memos create CREDIT_MEMO lines (which are distinguished so they are not copied to non-credit-memo documents), DUNNING_FEE is added when a dunning is created for the invoice. CASH_IN_CM and ON_ACCT designate lines of pre-payments to an invoice, which are subtracted from the total and not copied. OFFER_OPTION is a special type for offers only, to indicate that a line in the offer is optional.  OFFER_OPTION lines are not added to the total sum. TOTAL_DISCOUNT and TOTAL_SURCHARGE applies to all lines that are not ignored in total discount.",
            "readOnly" : true,
            "enum" : [ "LINE", "DUNNING_FEE", "CASH_IN_CM", "ON_ACCT", "CREDIT_MEMO", "TOTAL_DISCOUNT", "TOTAL_SURCHARGE", "OFFER_OPTION" ]
          },
          "itemPrice" : {
            "type" : "number",
            "description" : "Item price of a single unit. Must be present if an item reference is not supplied.",
            "example" : 10.0
          },
          "itemPriceType" : {
            "type" : "string",
            "description" : "Determines it item price is net without tax (N) or total with tax (T). Must be present if an item reference is not supplied.",
            "example" : "N",
            "enum" : [ "N", "T" ]
          },
          "unitOfMeasure" : {
            "type" : "string",
            "description" : "Short code for unit type, see the /units_of_measure resource.",
            "example" : "PC"
          },
          "netPrice" : {
            "type" : "number",
            "description" : "Total net price of the line. Always required for verification. Maximum of 10 digits and 5 fractional digits.",
            "example" : 100.0
          },
          "taxPrice" : {
            "type" : "number",
            "description" : "Total tax amount of the line. Always required for verification. Maximum of 10 digits and 5 fractional digits.",
            "example" : 20.0
          },
          "totalPrice" : {
            "type" : "number",
            "description" : "Total price, including tax, of the line. Always required for verification, and must be the sum of net and tax price. Maximum of 10 digits and 5 fractional digits.",
            "example" : 120.0
          },
          "remainingAmount" : {
            "type" : "number",
            "description" : "The remaining unpaid amount of the line, which is reduced for every payment, or zero when the document is fully paid. Only for invoices and credit memos.",
            "readOnly" : true
          },
          "discount" : {
            "type" : "number",
            "description" : "Optional discount amount, either as a total amount or a percentage (defined in discount mode). Maximum of 10 digits and 5 fractional digits.",
            "example" : 10.0
          },
          "discountMode" : {
            "type" : "string",
            "description" : "Determines whether discount is a total amount (CONSTANT) or a percentage (RATE). Must be set together with discount amount.",
            "example" : "CONSTANT",
            "enum" : [ "RATE", "CONSTANT" ]
          },
          "amount" : {
            "type" : "number",
            "description" : "The total item amount, i.e. number of units purchased. Maximum of 10 digits and 5 fractional digits.",
            "example" : 10
          },
          "itemNumber" : {
            "type" : "string",
            "description" : "Item number, identification, or barcode. Is defaulted from the item when an item reference is supplied.",
            "example" : "A12345"
          },
          "item" : {
            "type" : "string",
            "description" : "Item id, see the /items resource. When supplied with a valid item and item defaulting is enabled (default), then description, item net price, item number and unit of measure are defaulted, but can be overridden. Without defaulting, only the reference is saved, but no data from the item applied.",
            "example" : "e7083036-8779-d492-0c78-332cfde21b68"
          },
          "itemDefaulting" : {
            "type" : "boolean",
            "description" : "If not explicitly disabled, item data from a supplied item reference is defaulted for the line. When set to false, no data is defaulted and all fieldsmust be supplied in the request."
          },
          "account" : {
            "type" : "string",
            "description" : "Account code for the income account for this line, see the /accounts resource. Defaulted with the item account, if defaulting is not disabled. Otherwise a valid account must be supplied.",
            "example" : "4000"
          },
          "taxClassEntry" : {
            "type" : "string",
            "description" : "Tax class entry code for the income account for this line, see the /accounts/{account}/tax_class_entries resource. Determines the tax rate and is defaulted with the item tax rate, if defaulting is not disabled. Otherwise, a valid tax class entry must be supplied.",
            "example" : "020"
          }
        },
        "description" : "List of all business document lines. The order of this array defines the numbers assigned to the lines."
      },
      "CreditMemoDtoV1" : {
        "required" : [ "date", "lines", "state" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Number of the business document. Will be automatically generated, unless EXTERNAL is set for the state - then it is a mandatory property. Must be unique.",
            "example" : "R 2016-0001"
          },
          "uuid" : {
            "type" : "string",
            "description" : "Unique identifier of the business document."
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the business document to be printed after the subject. Defaulted with configured layout, unless the state is EXTERNAL."
          },
          "internalDescription" : {
            "type" : "string",
            "description" : "Internal note that isn't printed."
          },
          "date" : {
            "type" : "string",
            "description" : "Date of the invoice. Always required.",
            "format" : "date"
          },
          "state" : {
            "type" : "string",
            "description" : "Determines the state after creation. STAGING leaves the document open for editing, FINALIZED completes it, EXTERNAL for invoices created outside of the application, which requires a number (id) and will not create a PDF or default any layout properties.",
            "example" : "EXTERNAL",
            "enum" : [ "STAGING", "FINALIZED", "EXTERNAL", "CANCELLED" ]
          },
          "netAmount" : {
            "type" : "number",
            "description" : "Total net amount of the document. Must match the sum of all line net amounts if document is FINALIZED or EXTERNAL for verification. Maximum of 10 digits and 2 fractional digits.",
            "example" : 100.0
          },
          "taxAmount" : {
            "type" : "number",
            "description" : "Total tax amount of the document. Must match the sum of all line tax amounts if document is FINALIZED or EXTERNAL for verification. Maximum of 10 digits and 2 fractional digits.",
            "example" : 20.0
          },
          "totalAmount" : {
            "type" : "number",
            "description" : "Total amount of the document including tax. Must match the sum of all line totals if document is FINALIZED or EXTERNAL for verification. Maximum of 10 digits and 2 fractional digits.",
            "example" : 120.0
          },
          "remainingAmount" : {
            "type" : "number",
            "description" : "Remaining, unpaid amount of the document (invoice or credit memo). Decreases with payments, 0 for paid documents.",
            "readOnly" : true
          },
          "currency" : {
            "type" : "string",
            "description" : "Currency code of the document, see the /currencies resource. Defaulted with EUR.",
            "example" : "EUR"
          },
          "currencyRate" : {
            "type" : "number",
            "description" : "Currency rate of the document. Defaulted with 1.",
            "example" : 1
          },
          "referenceText" : {
            "type" : "string",
            "description" : "Reference info to other documents, business case information, remittance numbers, etc."
          },
          "referenceDate" : {
            "type" : "string",
            "description" : "Optional reference date to another business case, transaction, etc.",
            "format" : "date"
          },
          "footer" : {
            "type" : "string",
            "description" : "Description of the business document to be printed after the lines. Defaulted with configured layout, unless the state is EXTERNAL."
          },
          "customer" : {
            "type" : "string",
            "description" : "ID of the customer, see the /customers resource.",
            "example" : "e7083036-8779-d492-0c78-332cfde21b68"
          },
          "customerName" : {
            "type" : "string",
            "description" : "Customer name, for when the customer doesn't have a record, or doesn't need one. Ignored if a customer id is set.",
            "example" : "Doe Inc."
          },
          "layoutSetup" : {
            "type" : "string",
            "description" : "ID of the layout to be used, seee the /layout_setups resource. Defaulted with configured default setup, if any, and ignored if the document state is not FINALIZED.",
            "example" : "e7083036-8779-d492-0c78-332cfde21b68"
          },
          "sequenceGroup" : {
            "type" : "string",
            "description" : "Sequence group id, for when a different sequence group is to be used besides the configured default group. See the /sequence_groups resource.",
            "example" : "e7083036-8779-d492-0c78-332cfde21b68"
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "Timestamp of the last update.",
            "format" : "date-time",
            "readOnly" : true
          },
          "lines" : {
            "type" : "array",
            "description" : "List of all business document lines. The order of this array defines the numbers assigned to the lines.",
            "items" : {
              "$ref" : "#/components/schemas/BusinessDocumentLineDtoV1"
            }
          },
          "additionalAddress" : {
            "type" : "string",
            "description" : "Additional address id, see the /customer/{customer}/additional_addresses resource. Sets an address besides the default to be used for this document."
          },
          "normalizeRoundingErrors" : {
            "type" : "boolean",
            "description" : "Defines if rounding errors between the supplied document totals and lines should be corrected. If enabled, the supplied document totals will not be validated against the system-internal calculation. Instead, the supplied totals are taken as the actual invoice totals, and minor discrepancies (rounding errors) will be corrected in the totals of the last supplied document line to match the system calculation. Use this if your system calculates totals and rounds differently and you have trouble passing the validation. Enabling this will also disable the item price and amount validation against line totals."
          },
          "addressInfo" : {
            "$ref" : "#/components/schemas/AddressInfoDtoV1"
          },
          "deliveryFromDate" : {
            "type" : "string",
            "description" : "Delivery span. Defaulted with configured delivery date range setting.",
            "format" : "date"
          },
          "deliveryToDate" : {
            "type" : "string",
            "description" : "Delivery span. Defaulted with configured delivery date range setting.",
            "format" : "date"
          },
          "paidDate" : {
            "type" : "string",
            "description" : "Date the credit memo was fully cashed out.",
            "format" : "date",
            "readOnly" : true
          },
          "paid" : {
            "type" : "boolean",
            "description" : "Marks if the credit memo is fully cashed out.",
            "readOnly" : true
          },
          "signed" : {
            "type" : "boolean",
            "description" : "Determines if the document is to be signed after finalization."
          },
          "eInvoiceVersion" : {
            "type" : "string",
            "description" : "If e-invoice creation is configured, this property is mandatory and defines the e-invoice version.",
            "example" : "X_RECHNUNG_V3_P0_UBL",
            "enum" : [ "NONE", "EB_V6_P1", "EB_V6_P0", "EB_V5_P0", "EB_V4_P3", "EB_V4_P2", "EB_V4_P1", "EB_V4_P0", "EB_V3_P02", "EB_V3_P0", "X_RECHNUNG_V3_P0_UBL" ]
          }
        }
      },
      "BusinessDocumentCancelDtoV1" : {
        "type" : "object",
        "properties" : {
          "layoutSetup" : {
            "type" : "string",
            "description" : "Layout setup id of the layout to use for the cancellation document PDF, see /layout_setups resource. Is defaulted with the configured default setup. Ignored for EXTERNAL type business documents.",
            "example" : "e7083036-8779-d492-0c78-332cfde21b68"
          },
          "cancellationDate" : {
            "type" : "string",
            "description" : "Date of cancellation, defaulted with today.",
            "format" : "date"
          },
          "sequenceGroup" : {
            "type" : "string",
            "description" : "Sequence group id, for when a different sequence group is to be used besides the configured default group. See the /sequence_groups resource.",
            "example" : "e7083036-8779-d492-0c78-332cfde21b68"
          },
          "cancelType" : {
            "type" : "string",
            "description" : "Type of cancellation for the document. CANCELLATION (default) only cancels the document. For invoices, CANCELLATION_CREDIT_MEMO creates a positive credit memo, and CANCELLATION_INVOICE creates a negative cancellation invoice.",
            "example" : "CANCELLATION",
            "enum" : [ "CANCELLATION", "CANCELLATION_CREDIT_MEMO", "CANCELLATION_INVOICE" ]
          },
          "eInvoiceVersion" : {
            "type" : "string",
            "description" : "If e-invoice creation is configured, this property is mandatory and defines the e-invoice version.",
            "example" : "X_RECHNUNG_V3_P0_UBL",
            "enum" : [ "NONE", "EB_V6_P1", "EB_V6_P0", "EB_V5_P0", "EB_V4_P3", "EB_V4_P2", "EB_V4_P1", "EB_V4_P0", "EB_V3_P02", "EB_V3_P0", "X_RECHNUNG_V3_P0_UBL" ]
          }
        }
      },
      "CreditMemoPaymentDtoV1" : {
        "required" : [ "date" ],
        "type" : "object",
        "properties" : {
          "currencyRate" : {
            "type" : "number",
            "description" : "Currency rate at time of payment. Defaulted with 1.",
            "example" : 1
          },
          "note" : {
            "type" : "string",
            "description" : "Optional information about the payment."
          },
          "date" : {
            "type" : "string",
            "description" : "Date of the payment.",
            "format" : "date"
          },
          "restType" : {
            "type" : "string",
            "description" : "Indicates if the unpaid amount should be flagged as complete (DISCOUNT, CORRECTION, UNCOLLECTABLE, ONACCOUNT, CREDIT_CASHED). Leave this property empty if no rest payment is to be made, i.e. this is a partial payment.",
            "example" : "UNCOLLECTABLE",
            "enum" : [ "RECEIVABLES", "RECEIVABLES_DUNNING", "PAYED", "DISCOUNT", "UNCOLLECTABLE", "CANCELLED", "ONACCOUNT", "CURRENCY_DIFFERENCE", "ROUNDING_DIFFERENCE", "CORRECTION", "CREDIT_FOR_INVOICE", "CANCELLATION_INVOICE_FOR_INVOICE", "CREDIT_CASHED" ]
          },
          "payingAccount" : {
            "type" : "string",
            "description" : "Account that received the payment, see the /accounts resource. Must be of the cash account type (U) and not be reserved (e.g. from a cash register). Either payingAccount or cashRegister must be supplied.",
            "example" : "2800"
          },
          "cashRegister" : {
            "type" : "integer",
            "description" : "Cash register number that is to process the payment, see the /cash_registers resource. The test register (id 0) cannot be used. Either cashRegister or payingAccount must be supplied.",
            "format" : "int32"
          }
        }
      },
      "DeliveryNoteDtoV1" : {
        "required" : [ "date", "lines", "state" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Number of the business document. Will be automatically generated, unless EXTERNAL is set for the state - then it is a mandatory property. Must be unique.",
            "example" : "R 2016-0001"
          },
          "uuid" : {
            "type" : "string",
            "description" : "Unique identifier of the business document."
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the business document to be printed after the subject. Defaulted with configured layout, unless the state is EXTERNAL."
          },
          "internalDescription" : {
            "type" : "string",
            "description" : "Internal note that isn't printed."
          },
          "date" : {
            "type" : "string",
            "description" : "Date of the invoice. Always required.",
            "format" : "date"
          },
          "state" : {
            "type" : "string",
            "description" : "Determines the state after creation. STAGING leaves the document open for editing, FINALIZED completes it, EXTERNAL for invoices created outside of the application, which requires a number (id) and will not create a PDF or default any layout properties.",
            "example" : "EXTERNAL",
            "enum" : [ "STAGING", "FINALIZED", "EXTERNAL", "CANCELLED" ]
          },
          "netAmount" : {
            "type" : "number",
            "description" : "Total net amount of the document. Must match the sum of all line net amounts if document is FINALIZED or EXTERNAL for verification. Maximum of 10 digits and 2 fractional digits.",
            "example" : 100.0
          },
          "taxAmount" : {
            "type" : "number",
            "description" : "Total tax amount of the document. Must match the sum of all line tax amounts if document is FINALIZED or EXTERNAL for verification. Maximum of 10 digits and 2 fractional digits.",
            "example" : 20.0
          },
          "totalAmount" : {
            "type" : "number",
            "description" : "Total amount of the document including tax. Must match the sum of all line totals if document is FINALIZED or EXTERNAL for verification. Maximum of 10 digits and 2 fractional digits.",
            "example" : 120.0
          },
          "remainingAmount" : {
            "type" : "number",
            "description" : "Remaining, unpaid amount of the document (invoice or credit memo). Decreases with payments, 0 for paid documents.",
            "readOnly" : true
          },
          "currency" : {
            "type" : "string",
            "description" : "Currency code of the document, see the /currencies resource. Defaulted with EUR.",
            "example" : "EUR"
          },
          "currencyRate" : {
            "type" : "number",
            "description" : "Currency rate of the document. Defaulted with 1.",
            "example" : 1
          },
          "referenceText" : {
            "type" : "string",
            "description" : "Reference info to other documents, business case information, remittance numbers, etc."
          },
          "referenceDate" : {
            "type" : "string",
            "description" : "Optional reference date to another business case, transaction, etc.",
            "format" : "date"
          },
          "footer" : {
            "type" : "string",
            "description" : "Description of the business document to be printed after the lines. Defaulted with configured layout, unless the state is EXTERNAL."
          },
          "customer" : {
            "type" : "string",
            "description" : "ID of the customer, see the /customers resource.",
            "example" : "e7083036-8779-d492-0c78-332cfde21b68"
          },
          "customerName" : {
            "type" : "string",
            "description" : "Customer name, for when the customer doesn't have a record, or doesn't need one. Ignored if a customer id is set.",
            "example" : "Doe Inc."
          },
          "layoutSetup" : {
            "type" : "string",
            "description" : "ID of the layout to be used, seee the /layout_setups resource. Defaulted with configured default setup, if any, and ignored if the document state is not FINALIZED.",
            "example" : "e7083036-8779-d492-0c78-332cfde21b68"
          },
          "sequenceGroup" : {
            "type" : "string",
            "description" : "Sequence group id, for when a different sequence group is to be used besides the configured default group. See the /sequence_groups resource.",
            "example" : "e7083036-8779-d492-0c78-332cfde21b68"
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "Timestamp of the last update.",
            "format" : "date-time",
            "readOnly" : true
          },
          "lines" : {
            "type" : "array",
            "description" : "List of all business document lines. The order of this array defines the numbers assigned to the lines.",
            "items" : {
              "$ref" : "#/components/schemas/BusinessDocumentLineDtoV1"
            }
          },
          "additionalAddress" : {
            "type" : "string",
            "description" : "Additional address id, see the /customer/{customer}/additional_addresses resource. Sets an address besides the default to be used for this document."
          },
          "normalizeRoundingErrors" : {
            "type" : "boolean",
            "description" : "Defines if rounding errors between the supplied document totals and lines should be corrected. If enabled, the supplied document totals will not be validated against the system-internal calculation. Instead, the supplied totals are taken as the actual invoice totals, and minor discrepancies (rounding errors) will be corrected in the totals of the last supplied document line to match the system calculation. Use this if your system calculates totals and rounds differently and you have trouble passing the validation. Enabling this will also disable the item price and amount validation against line totals."
          },
          "addressInfo" : {
            "$ref" : "#/components/schemas/AddressInfoDtoV1"
          },
          "completionDate" : {
            "type" : "string",
            "description" : "The date the delivery note was marked as delivered.",
            "format" : "date"
          },
          "completionState" : {
            "type" : "string",
            "description" : "A completed delivery note has this state, being either IN_PREPARATION or DELIVERED.",
            "enum" : [ "ACCEPTED", "REJECTED", "IN_PROGRESS", "DONE", "IN_PREPARATION", "DELIVERED" ]
          }
        }
      },
      "BusinessDocumentCompletionDtoV1" : {
        "required" : [ "completionDate", "completionState" ],
        "type" : "object",
        "properties" : {
          "completionDate" : {
            "type" : "string",
            "description" : "The date the document was completed. Defaulted with today.",
            "format" : "date"
          },
          "completionState" : {
            "type" : "string",
            "description" : "The completion state to set. Allowed states are ACCEPTED and REJECTED for offers, IN_PROGRESS and DONE for order confirmations, and IN_PREPARATION and DELIVERED for delivery notes.",
            "enum" : [ "ACCEPTED", "REJECTED", "IN_PROGRESS", "DONE", "IN_PREPARATION", "DELIVERED" ]
          }
        }
      },
      "DunningLevelDtoV1" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Id of the dunning level, automatically assigned.",
            "example" : "e7083036-8779-d492-0c78-332cfde21b68"
          },
          "internalName" : {
            "type" : "string",
            "description" : "The internally assigned name."
          },
          "description" : {
            "type" : "string",
            "description" : "The description for this dunning level."
          },
          "documentSubject" : {
            "type" : "string",
            "description" : "The subject which is visible on the dunning document."
          },
          "fixedFee" : {
            "type" : "number",
            "description" : "The fixed fee for this dunning level."
          },
          "feePercentage" : {
            "type" : "number",
            "description" : "The fixed percentage for this dunning level."
          },
          "dunningDays" : {
            "type" : "integer",
            "description" : "From which day the next dunning is due.",
            "format" : "int32"
          },
          "previousLevel" : {
            "type" : "string",
            "description" : "The dunning level that comes before."
          },
          "dunningLineText" : {
            "type" : "string",
            "description" : "The dunning text which is shown on the document."
          },
          "account" : {
            "type" : "string",
            "description" : "The account to which the fees are posted"
          },
          "dunningEndText" : {
            "type" : "string",
            "description" : "The dunning text which is shown at the end on the document."
          },
          "taxClassEntry" : {
            "type" : "string",
            "description" : "The tax rate with which the dunning is created"
          },
          "defaultFlag" : {
            "type" : "boolean"
          }
        }
      },
      "InvoiceDtoV1" : {
        "required" : [ "date", "lines", "state" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Number of the business document. Will be automatically generated, unless EXTERNAL is set for the state - then it is a mandatory property. Must be unique.",
            "example" : "R 2016-0001"
          },
          "uuid" : {
            "type" : "string",
            "description" : "Unique identifier of the business document."
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the business document to be printed after the subject. Defaulted with configured layout, unless the state is EXTERNAL."
          },
          "internalDescription" : {
            "type" : "string",
            "description" : "Internal note that isn't printed."
          },
          "date" : {
            "type" : "string",
            "description" : "Date of the invoice. Always required.",
            "format" : "date"
          },
          "state" : {
            "type" : "string",
            "description" : "Determines the state after creation. STAGING leaves the document open for editing, FINALIZED completes it, EXTERNAL for invoices created outside of the application, which requires a number (id) and will not create a PDF or default any layout properties.",
            "example" : "EXTERNAL",
            "enum" : [ "STAGING", "FINALIZED", "EXTERNAL", "CANCELLED" ]
          },
          "netAmount" : {
            "type" : "number",
            "description" : "Total net amount of the document. Must match the sum of all line net amounts if document is FINALIZED or EXTERNAL for verification. Maximum of 10 digits and 2 fractional digits.",
            "example" : 100.0
          },
          "taxAmount" : {
            "type" : "number",
            "description" : "Total tax amount of the document. Must match the sum of all line tax amounts if document is FINALIZED or EXTERNAL for verification. Maximum of 10 digits and 2 fractional digits.",
            "example" : 20.0
          },
          "totalAmount" : {
            "type" : "number",
            "description" : "Total amount of the document including tax. Must match the sum of all line totals if document is FINALIZED or EXTERNAL for verification. Maximum of 10 digits and 2 fractional digits.",
            "example" : 120.0
          },
          "remainingAmount" : {
            "type" : "number",
            "description" : "Remaining, unpaid amount of the document (invoice or credit memo). Decreases with payments, 0 for paid documents.",
            "readOnly" : true
          },
          "currency" : {
            "type" : "string",
            "description" : "Currency code of the document, see the /currencies resource. Defaulted with EUR.",
            "example" : "EUR"
          },
          "currencyRate" : {
            "type" : "number",
            "description" : "Currency rate of the document. Defaulted with 1.",
            "example" : 1
          },
          "referenceText" : {
            "type" : "string",
            "description" : "Reference info to other documents, business case information, remittance numbers, etc."
          },
          "referenceDate" : {
            "type" : "string",
            "description" : "Optional reference date to another business case, transaction, etc.",
            "format" : "date"
          },
          "footer" : {
            "type" : "string",
            "description" : "Description of the business document to be printed after the lines. Defaulted with configured layout, unless the state is EXTERNAL."
          },
          "customer" : {
            "type" : "string",
            "description" : "ID of the customer, see the /customers resource.",
            "example" : "e7083036-8779-d492-0c78-332cfde21b68"
          },
          "customerName" : {
            "type" : "string",
            "description" : "Customer name, for when the customer doesn't have a record, or doesn't need one. Ignored if a customer id is set.",
            "example" : "Doe Inc."
          },
          "layoutSetup" : {
            "type" : "string",
            "description" : "ID of the layout to be used, seee the /layout_setups resource. Defaulted with configured default setup, if any, and ignored if the document state is not FINALIZED.",
            "example" : "e7083036-8779-d492-0c78-332cfde21b68"
          },
          "sequenceGroup" : {
            "type" : "string",
            "description" : "Sequence group id, for when a different sequence group is to be used besides the configured default group. See the /sequence_groups resource.",
            "example" : "e7083036-8779-d492-0c78-332cfde21b68"
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "Timestamp of the last update.",
            "format" : "date-time",
            "readOnly" : true
          },
          "lines" : {
            "type" : "array",
            "description" : "List of all business document lines. The order of this array defines the numbers assigned to the lines.",
            "items" : {
              "$ref" : "#/components/schemas/BusinessDocumentLineDtoV1"
            }
          },
          "additionalAddress" : {
            "type" : "string",
            "description" : "Additional address id, see the /customer/{customer}/additional_addresses resource. Sets an address besides the default to be used for this document."
          },
          "normalizeRoundingErrors" : {
            "type" : "boolean",
            "description" : "Defines if rounding errors between the supplied document totals and lines should be corrected. If enabled, the supplied document totals will not be validated against the system-internal calculation. Instead, the supplied totals are taken as the actual invoice totals, and minor discrepancies (rounding errors) will be corrected in the totals of the last supplied document line to match the system calculation. Use this if your system calculates totals and rounds differently and you have trouble passing the validation. Enabling this will also disable the item price and amount validation against line totals."
          },
          "addressInfo" : {
            "$ref" : "#/components/schemas/AddressInfoDtoV1"
          },
          "paymentTerm" : {
            "type" : "string",
            "description" : "Payment term id, see /payment_terms resource. Determines due date, dunning date, etc. and is defaulted with the configured default payment term, if any.",
            "example" : "e7083036-8779-d492-0c78-332cfde21b68"
          },
          "deliveryFromDate" : {
            "type" : "string",
            "description" : "Delivery span. Defaulted with configured delivery date range setting.",
            "format" : "date"
          },
          "deliveryToDate" : {
            "type" : "string",
            "description" : "Delivery span. Defaulted with configured delivery date range setting.",
            "format" : "date"
          },
          "signed" : {
            "type" : "boolean",
            "description" : "Determines if the document is to be signed after finalization."
          },
          "paidDate" : {
            "type" : "string",
            "description" : "Date the invoice was fully paid.",
            "format" : "date",
            "readOnly" : true
          },
          "paid" : {
            "type" : "boolean",
            "description" : "Marks if the invoice is fully paid.",
            "readOnly" : true
          },
          "dueDate" : {
            "type" : "string",
            "description" : "Date the invoice is due. Calculated from the payment term. Can be set manually if the payment term does not define a fixed due date.",
            "format" : "date"
          },
          "dunningDate" : {
            "type" : "string",
            "description" : "Date of the last dunning made for non-payment of the invoice.",
            "format" : "date",
            "readOnly" : true
          },
          "lastDunningLevel" : {
            "type" : "integer",
            "description" : "Last dunning level issued for the invoice.",
            "format" : "int32",
            "readOnly" : true
          },
          "eInvoiceVersion" : {
            "type" : "string",
            "description" : "If e-invoice creation is configured, this property is mandatory and defines the e-invoice version.",
            "example" : "X_RECHNUNG_V3_P0_UBL",
            "enum" : [ "NONE", "EB_V6_P1", "EB_V6_P0", "EB_V5_P0", "EB_V4_P3", "EB_V4_P2", "EB_V4_P1", "EB_V4_P0", "EB_V3_P02", "EB_V3_P0", "X_RECHNUNG_V3_P0_UBL" ]
          }
        }
      },
      "CancelledInvoiceDtoV1" : {
        "required" : [ "date", "lines", "state" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Number of the business document. Will be automatically generated, unless EXTERNAL is set for the state - then it is a mandatory property. Must be unique.",
            "example" : "R 2016-0001"
          },
          "uuid" : {
            "type" : "string",
            "description" : "Unique identifier of the business document."
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the business document to be printed after the subject. Defaulted with configured layout, unless the state is EXTERNAL."
          },
          "internalDescription" : {
            "type" : "string",
            "description" : "Internal note that isn't printed."
          },
          "date" : {
            "type" : "string",
            "description" : "Date of the invoice. Always required.",
            "format" : "date"
          },
          "state" : {
            "type" : "string",
            "description" : "Determines the state after creation. STAGING leaves the document open for editing, FINALIZED completes it, EXTERNAL for invoices created outside of the application, which requires a number (id) and will not create a PDF or default any layout properties.",
            "example" : "EXTERNAL",
            "enum" : [ "STAGING", "FINALIZED", "EXTERNAL", "CANCELLED" ]
          },
          "netAmount" : {
            "type" : "number",
            "description" : "Total net amount of the document. Must match the sum of all line net amounts if document is FINALIZED or EXTERNAL for verification. Maximum of 10 digits and 2 fractional digits.",
            "example" : 100.0
          },
          "taxAmount" : {
            "type" : "number",
            "description" : "Total tax amount of the document. Must match the sum of all line tax amounts if document is FINALIZED or EXTERNAL for verification. Maximum of 10 digits and 2 fractional digits.",
            "example" : 20.0
          },
          "totalAmount" : {
            "type" : "number",
            "description" : "Total amount of the document including tax. Must match the sum of all line totals if document is FINALIZED or EXTERNAL for verification. Maximum of 10 digits and 2 fractional digits.",
            "example" : 120.0
          },
          "remainingAmount" : {
            "type" : "number",
            "description" : "Remaining, unpaid amount of the document (invoice or credit memo). Decreases with payments, 0 for paid documents.",
            "readOnly" : true
          },
          "currency" : {
            "type" : "string",
            "description" : "Currency code of the document, see the /currencies resource. Defaulted with EUR.",
            "example" : "EUR"
          },
          "currencyRate" : {
            "type" : "number",
            "description" : "Currency rate of the document. Defaulted with 1.",
            "example" : 1
          },
          "referenceText" : {
            "type" : "string",
            "description" : "Reference info to other documents, business case information, remittance numbers, etc."
          },
          "referenceDate" : {
            "type" : "string",
            "description" : "Optional reference date to another business case, transaction, etc.",
            "format" : "date"
          },
          "footer" : {
            "type" : "string",
            "description" : "Description of the business document to be printed after the lines. Defaulted with configured layout, unless the state is EXTERNAL."
          },
          "customer" : {
            "type" : "string",
            "description" : "ID of the customer, see the /customers resource.",
            "example" : "e7083036-8779-d492-0c78-332cfde21b68"
          },
          "customerName" : {
            "type" : "string",
            "description" : "Customer name, for when the customer doesn't have a record, or doesn't need one. Ignored if a customer id is set.",
            "example" : "Doe Inc."
          },
          "layoutSetup" : {
            "type" : "string",
            "description" : "ID of the layout to be used, seee the /layout_setups resource. Defaulted with configured default setup, if any, and ignored if the document state is not FINALIZED.",
            "example" : "e7083036-8779-d492-0c78-332cfde21b68"
          },
          "sequenceGroup" : {
            "type" : "string",
            "description" : "Sequence group id, for when a different sequence group is to be used besides the configured default group. See the /sequence_groups resource.",
            "example" : "e7083036-8779-d492-0c78-332cfde21b68"
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "Timestamp of the last update.",
            "format" : "date-time",
            "readOnly" : true
          },
          "lines" : {
            "type" : "array",
            "description" : "List of all business document lines. The order of this array defines the numbers assigned to the lines.",
            "items" : {
              "$ref" : "#/components/schemas/BusinessDocumentLineDtoV1"
            }
          },
          "additionalAddress" : {
            "type" : "string",
            "description" : "Additional address id, see the /customer/{customer}/additional_addresses resource. Sets an address besides the default to be used for this document."
          },
          "normalizeRoundingErrors" : {
            "type" : "boolean",
            "description" : "Defines if rounding errors between the supplied document totals and lines should be corrected. If enabled, the supplied document totals will not be validated against the system-internal calculation. Instead, the supplied totals are taken as the actual invoice totals, and minor discrepancies (rounding errors) will be corrected in the totals of the last supplied document line to match the system calculation. Use this if your system calculates totals and rounds differently and you have trouble passing the validation. Enabling this will also disable the item price and amount validation against line totals."
          },
          "addressInfo" : {
            "$ref" : "#/components/schemas/AddressInfoDtoV1"
          },
          "paymentTerm" : {
            "type" : "string",
            "description" : "Payment term id, see /payment_terms resource. Determines due date, dunning date, etc. and is defaulted with the configured default payment term, if any.",
            "example" : "e7083036-8779-d492-0c78-332cfde21b68"
          },
          "deliveryFromDate" : {
            "type" : "string",
            "description" : "Delivery span. Defaulted with configured delivery date range setting.",
            "format" : "date"
          },
          "deliveryToDate" : {
            "type" : "string",
            "description" : "Delivery span. Defaulted with configured delivery date range setting.",
            "format" : "date"
          },
          "signed" : {
            "type" : "boolean",
            "description" : "Determines if the document is to be signed after finalization."
          },
          "paidDate" : {
            "type" : "string",
            "description" : "Date the invoice was fully paid.",
            "format" : "date",
            "readOnly" : true
          },
          "paid" : {
            "type" : "boolean",
            "description" : "Marks if the invoice is fully paid.",
            "readOnly" : true
          },
          "dueDate" : {
            "type" : "string",
            "description" : "Date the invoice is due. Calculated from the payment term. Can be set manually if the payment term does not define a fixed due date.",
            "format" : "date"
          },
          "dunningDate" : {
            "type" : "string",
            "description" : "Date of the last dunning made for non-payment of the invoice.",
            "format" : "date",
            "readOnly" : true
          },
          "lastDunningLevel" : {
            "type" : "integer",
            "description" : "Last dunning level issued for the invoice.",
            "format" : "int32",
            "readOnly" : true
          },
          "newDocumentNumber" : {
            "type" : "string",
            "description" : "Number of the business document created for the cancellation, if one was requested by the cancel type.",
            "readOnly" : true
          },
          "eInvoiceVersion" : {
            "type" : "string",
            "description" : "If e-invoice creation is configured, this property is mandatory and defines the e-invoice version.",
            "example" : "X_RECHNUNG_V3_P0_UBL",
            "enum" : [ "NONE", "EB_V6_P1", "EB_V6_P0", "EB_V5_P0", "EB_V4_P3", "EB_V4_P2", "EB_V4_P1", "EB_V4_P0", "EB_V3_P02", "EB_V3_P0", "X_RECHNUNG_V3_P0_UBL" ]
          }
        }
      },
      "InvoicePaymentDtoV1" : {
        "required" : [ "amount", "date" ],
        "type" : "object",
        "properties" : {
          "currencyRate" : {
            "type" : "number",
            "description" : "Currency rate at time of payment. Defaulted with 1.",
            "example" : 1
          },
          "note" : {
            "type" : "string",
            "description" : "Optional information about the payment."
          },
          "date" : {
            "type" : "string",
            "description" : "Date of the payment.",
            "format" : "date"
          },
          "restType" : {
            "type" : "string",
            "description" : "Indicates if the unpaid amount should be flagged as complete (DISCOUNT, CORRECTION, UNCOLLECTABLE, ONACCOUNT, CREDIT_CASHED). Leave this property empty if no rest payment is to be made, i.e. this is a partial payment.",
            "example" : "UNCOLLECTABLE",
            "enum" : [ "RECEIVABLES", "RECEIVABLES_DUNNING", "PAYED", "DISCOUNT", "UNCOLLECTABLE", "CANCELLED", "ONACCOUNT", "CURRENCY_DIFFERENCE", "ROUNDING_DIFFERENCE", "CORRECTION", "CREDIT_FOR_INVOICE", "CANCELLATION_INVOICE_FOR_INVOICE", "CREDIT_CASHED" ]
          },
          "payingAccount" : {
            "type" : "string",
            "description" : "Account that received the payment, see the /accounts resource. Must be of the cash account type (U) and not be reserved (e.g. from a cash register). Either payingAccount or cashRegister must be supplied.",
            "example" : "2800"
          },
          "cashRegister" : {
            "type" : "integer",
            "description" : "Cash register number that is to process the payment, see the /cash_registers resource. The test register (id 0) cannot be used. Either cashRegister or payingAccount must be supplied.",
            "format" : "int32"
          },
          "amount" : {
            "type" : "number",
            "description" : "Total payment amount in the invoice currency.",
            "example" : 20.0
          }
        }
      },
      "InvoiceTemplateDtoV1" : {
        "required" : [ "date", "lines", "state", "templateName" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Number of the business document. Will be automatically generated, unless EXTERNAL is set for the state - then it is a mandatory property. Must be unique.",
            "example" : "R 2016-0001"
          },
          "uuid" : {
            "type" : "string",
            "description" : "Unique identifier of the business document."
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the business document to be printed after the subject. Defaulted with configured layout, unless the state is EXTERNAL."
          },
          "internalDescription" : {
            "type" : "string",
            "description" : "Internal note that isn't printed."
          },
          "date" : {
            "type" : "string",
            "description" : "Date of the invoice. Always required.",
            "format" : "date"
          },
          "state" : {
            "type" : "string",
            "description" : "Determines the state after creation. STAGING leaves the document open for editing, FINALIZED completes it, EXTERNAL for invoices created outside of the application, which requires a number (id) and will not create a PDF or default any layout properties.",
            "example" : "EXTERNAL",
            "enum" : [ "STAGING", "FINALIZED", "EXTERNAL", "CANCELLED" ]
          },
          "netAmount" : {
            "type" : "number",
            "description" : "Total net amount of the document. Must match the sum of all line net amounts if document is FINALIZED or EXTERNAL for verification. Maximum of 10 digits and 2 fractional digits.",
            "example" : 100.0
          },
          "taxAmount" : {
            "type" : "number",
            "description" : "Total tax amount of the document. Must match the sum of all line tax amounts if document is FINALIZED or EXTERNAL for verification. Maximum of 10 digits and 2 fractional digits.",
            "example" : 20.0
          },
          "totalAmount" : {
            "type" : "number",
            "description" : "Total amount of the document including tax. Must match the sum of all line totals if document is FINALIZED or EXTERNAL for verification. Maximum of 10 digits and 2 fractional digits.",
            "example" : 120.0
          },
          "remainingAmount" : {
            "type" : "number",
            "description" : "Remaining, unpaid amount of the document (invoice or credit memo). Decreases with payments, 0 for paid documents.",
            "readOnly" : true
          },
          "currency" : {
            "type" : "string",
            "description" : "Currency code of the document, see the /currencies resource. Defaulted with EUR.",
            "example" : "EUR"
          },
          "currencyRate" : {
            "type" : "number",
            "description" : "Currency rate of the document. Defaulted with 1.",
            "example" : 1
          },
          "referenceText" : {
            "type" : "string",
            "description" : "Reference info to other documents, business case information, remittance numbers, etc."
          },
          "referenceDate" : {
            "type" : "string",
            "description" : "Optional reference date to another business case, transaction, etc.",
            "format" : "date"
          },
          "footer" : {
            "type" : "string",
            "description" : "Description of the business document to be printed after the lines. Defaulted with configured layout, unless the state is EXTERNAL."
          },
          "customer" : {
            "type" : "string",
            "description" : "ID of the customer, see the /customers resource.",
            "example" : "e7083036-8779-d492-0c78-332cfde21b68"
          },
          "customerName" : {
            "type" : "string",
            "description" : "Customer name, for when the customer doesn't have a record, or doesn't need one. Ignored if a customer id is set.",
            "example" : "Doe Inc."
          },
          "layoutSetup" : {
            "type" : "string",
            "description" : "ID of the layout to be used, seee the /layout_setups resource. Defaulted with configured default setup, if any, and ignored if the document state is not FINALIZED.",
            "example" : "e7083036-8779-d492-0c78-332cfde21b68"
          },
          "sequenceGroup" : {
            "type" : "string",
            "description" : "Sequence group id, for when a different sequence group is to be used besides the configured default group. See the /sequence_groups resource.",
            "example" : "e7083036-8779-d492-0c78-332cfde21b68"
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "Timestamp of the last update.",
            "format" : "date-time",
            "readOnly" : true
          },
          "lines" : {
            "type" : "array",
            "description" : "List of all business document lines. The order of this array defines the numbers assigned to the lines.",
            "items" : {
              "$ref" : "#/components/schemas/BusinessDocumentLineDtoV1"
            }
          },
          "additionalAddress" : {
            "type" : "string",
            "description" : "Additional address id, see the /customer/{customer}/additional_addresses resource. Sets an address besides the default to be used for this document."
          },
          "normalizeRoundingErrors" : {
            "type" : "boolean",
            "description" : "Defines if rounding errors between the supplied document totals and lines should be corrected. If enabled, the supplied document totals will not be validated against the system-internal calculation. Instead, the supplied totals are taken as the actual invoice totals, and minor discrepancies (rounding errors) will be corrected in the totals of the last supplied document line to match the system calculation. Use this if your system calculates totals and rounds differently and you have trouble passing the validation. Enabling this will also disable the item price and amount validation against line totals."
          },
          "addressInfo" : {
            "$ref" : "#/components/schemas/AddressInfoDtoV1"
          },
          "paymentTerm" : {
            "type" : "string",
            "description" : "Payment term id, see /payment_terms resource. Determines due date, dunning date, etc. and is defaulted with the configured default payment term, if any.",
            "example" : "e7083036-8779-d492-0c78-332cfde21b68"
          },
          "deliveryFromDate" : {
            "type" : "string",
            "description" : "Delivery span. Defaulted with configured delivery date range setting.",
            "format" : "date"
          },
          "deliveryToDate" : {
            "type" : "string",
            "description" : "Delivery span. Defaulted with configured delivery date range setting.",
            "format" : "date"
          },
          "signed" : {
            "type" : "boolean",
            "description" : "Determines if the document is to be signed after finalization."
          },
          "paidDate" : {
            "type" : "string",
            "description" : "Date the invoice was fully paid.",
            "format" : "date",
            "readOnly" : true
          },
          "paid" : {
            "type" : "boolean",
            "description" : "Marks if the invoice is fully paid.",
            "readOnly" : true
          },
          "dueDate" : {
            "type" : "string",
            "description" : "Date the invoice is due. Calculated from the payment term. Can be set manually if the payment term does not define a fixed due date.",
            "format" : "date"
          },
          "dunningDate" : {
            "type" : "string",
            "description" : "Date of the last dunning made for non-payment of the invoice.",
            "format" : "date",
            "readOnly" : true
          },
          "lastDunningLevel" : {
            "type" : "integer",
            "description" : "Last dunning level issued for the invoice.",
            "format" : "int32",
            "readOnly" : true
          },
          "templateName" : {
            "type" : "string",
            "description" : "Name for the template"
          },
          "templateInterval" : {
            "type" : "integer",
            "description" : "Recurrence interval for subscription invoices, e.g. in 7 days, 8 days, etc. If the template interval is set, the interval type must also be set.",
            "format" : "int32",
            "example" : 7
          },
          "templateIntervalType" : {
            "type" : "string",
            "description" : "Type of template interval for subscription invoices, e.g. in 7 days, 7 months, 7 years etc. If the template interval type is set, the template interval must also be set.",
            "example" : "DAY",
            "enum" : [ "DAY", "MONTH", "YEAR" ]
          },
          "nextInvoiceDate" : {
            "type" : "string",
            "description" : "Due again date",
            "format" : "date",
            "readOnly" : true
          },
          "eInvoiceVersion" : {
            "type" : "string",
            "description" : "If e-invoice creation is configured, this property is mandatory and defines the e-invoice version.",
            "example" : "X_RECHNUNG_V3_P0_UBL",
            "enum" : [ "NONE", "EB_V6_P1", "EB_V6_P0", "EB_V5_P0", "EB_V4_P3", "EB_V4_P2", "EB_V4_P1", "EB_V4_P0", "EB_V3_P02", "EB_V3_P0", "X_RECHNUNG_V3_P0_UBL" ]
          }
        }
      },
      "OfferTemplateDtoV1" : {
        "required" : [ "date", "lines", "state", "templateName" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Number of the business document. Will be automatically generated, unless EXTERNAL is set for the state - then it is a mandatory property. Must be unique.",
            "example" : "R 2016-0001"
          },
          "uuid" : {
            "type" : "string",
            "description" : "Unique identifier of the business document."
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the business document to be printed after the subject. Defaulted with configured layout, unless the state is EXTERNAL."
          },
          "internalDescription" : {
            "type" : "string",
            "description" : "Internal note that isn't printed."
          },
          "date" : {
            "type" : "string",
            "description" : "Date of the invoice. Always required.",
            "format" : "date"
          },
          "state" : {
            "type" : "string",
            "description" : "Determines the state after creation. STAGING leaves the document open for editing, FINALIZED completes it, EXTERNAL for invoices created outside of the application, which requires a number (id) and will not create a PDF or default any layout properties.",
            "example" : "EXTERNAL",
            "enum" : [ "STAGING", "FINALIZED", "EXTERNAL", "CANCELLED" ]
          },
          "netAmount" : {
            "type" : "number",
            "description" : "Total net amount of the document. Must match the sum of all line net amounts if document is FINALIZED or EXTERNAL for verification. Maximum of 10 digits and 2 fractional digits.",
            "example" : 100.0
          },
          "taxAmount" : {
            "type" : "number",
            "description" : "Total tax amount of the document. Must match the sum of all line tax amounts if document is FINALIZED or EXTERNAL for verification. Maximum of 10 digits and 2 fractional digits.",
            "example" : 20.0
          },
          "totalAmount" : {
            "type" : "number",
            "description" : "Total amount of the document including tax. Must match the sum of all line totals if document is FINALIZED or EXTERNAL for verification. Maximum of 10 digits and 2 fractional digits.",
            "example" : 120.0
          },
          "remainingAmount" : {
            "type" : "number",
            "description" : "Remaining, unpaid amount of the document (invoice or credit memo). Decreases with payments, 0 for paid documents.",
            "readOnly" : true
          },
          "currency" : {
            "type" : "string",
            "description" : "Currency code of the document, see the /currencies resource. Defaulted with EUR.",
            "example" : "EUR"
          },
          "currencyRate" : {
            "type" : "number",
            "description" : "Currency rate of the document. Defaulted with 1.",
            "example" : 1
          },
          "referenceText" : {
            "type" : "string",
            "description" : "Reference info to other documents, business case information, remittance numbers, etc."
          },
          "referenceDate" : {
            "type" : "string",
            "description" : "Optional reference date to another business case, transaction, etc.",
            "format" : "date"
          },
          "footer" : {
            "type" : "string",
            "description" : "Description of the business document to be printed after the lines. Defaulted with configured layout, unless the state is EXTERNAL."
          },
          "customer" : {
            "type" : "string",
            "description" : "ID of the customer, see the /customers resource.",
            "example" : "e7083036-8779-d492-0c78-332cfde21b68"
          },
          "customerName" : {
            "type" : "string",
            "description" : "Customer name, for when the customer doesn't have a record, or doesn't need one. Ignored if a customer id is set.",
            "example" : "Doe Inc."
          },
          "layoutSetup" : {
            "type" : "string",
            "description" : "ID of the layout to be used, seee the /layout_setups resource. Defaulted with configured default setup, if any, and ignored if the document state is not FINALIZED.",
            "example" : "e7083036-8779-d492-0c78-332cfde21b68"
          },
          "sequenceGroup" : {
            "type" : "string",
            "description" : "Sequence group id, for when a different sequence group is to be used besides the configured default group. See the /sequence_groups resource.",
            "example" : "e7083036-8779-d492-0c78-332cfde21b68"
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "Timestamp of the last update.",
            "format" : "date-time",
            "readOnly" : true
          },
          "lines" : {
            "type" : "array",
            "description" : "List of all business document lines. The order of this array defines the numbers assigned to the lines.",
            "items" : {
              "$ref" : "#/components/schemas/BusinessDocumentLineDtoV1"
            }
          },
          "additionalAddress" : {
            "type" : "string",
            "description" : "Additional address id, see the /customer/{customer}/additional_addresses resource. Sets an address besides the default to be used for this document."
          },
          "normalizeRoundingErrors" : {
            "type" : "boolean",
            "description" : "Defines if rounding errors between the supplied document totals and lines should be corrected. If enabled, the supplied document totals will not be validated against the system-internal calculation. Instead, the supplied totals are taken as the actual invoice totals, and minor discrepancies (rounding errors) will be corrected in the totals of the last supplied document line to match the system calculation. Use this if your system calculates totals and rounds differently and you have trouble passing the validation. Enabling this will also disable the item price and amount validation against line totals."
          },
          "addressInfo" : {
            "$ref" : "#/components/schemas/AddressInfoDtoV1"
          },
          "paymentTerm" : {
            "type" : "string",
            "description" : "Payment term id, see /payment_terms resource. Determines due date, dunning date, etc. and is defaulted with the configured default payment term, if any.",
            "example" : "e7083036-8779-d492-0c78-332cfde21b68"
          },
          "expirationDate" : {
            "type" : "string",
            "description" : "Optional expiration date for the offer.",
            "format" : "date"
          },
          "completionDate" : {
            "type" : "string",
            "description" : "Date the offer was marked as completed (either accepted or rejected).",
            "format" : "date"
          },
          "completionState" : {
            "type" : "string",
            "description" : "Indicates if the offer is ACCEPTED or REJECTED.",
            "enum" : [ "ACCEPTED", "REJECTED", "IN_PROGRESS", "DONE", "IN_PREPARATION", "DELIVERED" ]
          },
          "templateName" : {
            "type" : "string",
            "description" : "Name for the template"
          }
        }
      },
      "LayoutSetupDtoV1" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "ID to use when finalizing invoices, credit memos, etc. with a different layout setup."
          },
          "description" : {
            "type" : "string",
            "description" : "Human-readable description of the layout setup."
          },
          "defaultSetup" : {
            "type" : "boolean",
            "description" : "indicates if this setup is the default and will be used when no setup is specified."
          }
        }
      },
      "OfferDtoV1" : {
        "required" : [ "date", "lines", "state" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Number of the business document. Will be automatically generated, unless EXTERNAL is set for the state - then it is a mandatory property. Must be unique.",
            "example" : "R 2016-0001"
          },
          "uuid" : {
            "type" : "string",
            "description" : "Unique identifier of the business document."
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the business document to be printed after the subject. Defaulted with configured layout, unless the state is EXTERNAL."
          },
          "internalDescription" : {
            "type" : "string",
            "description" : "Internal note that isn't printed."
          },
          "date" : {
            "type" : "string",
            "description" : "Date of the invoice. Always required.",
            "format" : "date"
          },
          "state" : {
            "type" : "string",
            "description" : "Determines the state after creation. STAGING leaves the document open for editing, FINALIZED completes it, EXTERNAL for invoices created outside of the application, which requires a number (id) and will not create a PDF or default any layout properties.",
            "example" : "EXTERNAL",
            "enum" : [ "STAGING", "FINALIZED", "EXTERNAL", "CANCELLED" ]
          },
          "netAmount" : {
            "type" : "number",
            "description" : "Total net amount of the document. Must match the sum of all line net amounts if document is FINALIZED or EXTERNAL for verification. Maximum of 10 digits and 2 fractional digits.",
            "example" : 100.0
          },
          "taxAmount" : {
            "type" : "number",
            "description" : "Total tax amount of the document. Must match the sum of all line tax amounts if document is FINALIZED or EXTERNAL for verification. Maximum of 10 digits and 2 fractional digits.",
            "example" : 20.0
          },
          "totalAmount" : {
            "type" : "number",
            "description" : "Total amount of the document including tax. Must match the sum of all line totals if document is FINALIZED or EXTERNAL for verification. Maximum of 10 digits and 2 fractional digits.",
            "example" : 120.0
          },
          "remainingAmount" : {
            "type" : "number",
            "description" : "Remaining, unpaid amount of the document (invoice or credit memo). Decreases with payments, 0 for paid documents.",
            "readOnly" : true
          },
          "currency" : {
            "type" : "string",
            "description" : "Currency code of the document, see the /currencies resource. Defaulted with EUR.",
            "example" : "EUR"
          },
          "currencyRate" : {
            "type" : "number",
            "description" : "Currency rate of the document. Defaulted with 1.",
            "example" : 1
          },
          "referenceText" : {
            "type" : "string",
            "description" : "Reference info to other documents, business case information, remittance numbers, etc."
          },
          "referenceDate" : {
            "type" : "string",
            "description" : "Optional reference date to another business case, transaction, etc.",
            "format" : "date"
          },
          "footer" : {
            "type" : "string",
            "description" : "Description of the business document to be printed after the lines. Defaulted with configured layout, unless the state is EXTERNAL."
          },
          "customer" : {
            "type" : "string",
            "description" : "ID of the customer, see the /customers resource.",
            "example" : "e7083036-8779-d492-0c78-332cfde21b68"
          },
          "customerName" : {
            "type" : "string",
            "description" : "Customer name, for when the customer doesn't have a record, or doesn't need one. Ignored if a customer id is set.",
            "example" : "Doe Inc."
          },
          "layoutSetup" : {
            "type" : "string",
            "description" : "ID of the layout to be used, seee the /layout_setups resource. Defaulted with configured default setup, if any, and ignored if the document state is not FINALIZED.",
            "example" : "e7083036-8779-d492-0c78-332cfde21b68"
          },
          "sequenceGroup" : {
            "type" : "string",
            "description" : "Sequence group id, for when a different sequence group is to be used besides the configured default group. See the /sequence_groups resource.",
            "example" : "e7083036-8779-d492-0c78-332cfde21b68"
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "Timestamp of the last update.",
            "format" : "date-time",
            "readOnly" : true
          },
          "lines" : {
            "type" : "array",
            "description" : "List of all business document lines. The order of this array defines the numbers assigned to the lines.",
            "items" : {
              "$ref" : "#/components/schemas/BusinessDocumentLineDtoV1"
            }
          },
          "additionalAddress" : {
            "type" : "string",
            "description" : "Additional address id, see the /customer/{customer}/additional_addresses resource. Sets an address besides the default to be used for this document."
          },
          "normalizeRoundingErrors" : {
            "type" : "boolean",
            "description" : "Defines if rounding errors between the supplied document totals and lines should be corrected. If enabled, the supplied document totals will not be validated against the system-internal calculation. Instead, the supplied totals are taken as the actual invoice totals, and minor discrepancies (rounding errors) will be corrected in the totals of the last supplied document line to match the system calculation. Use this if your system calculates totals and rounds differently and you have trouble passing the validation. Enabling this will also disable the item price and amount validation against line totals."
          },
          "addressInfo" : {
            "$ref" : "#/components/schemas/AddressInfoDtoV1"
          },
          "paymentTerm" : {
            "type" : "string",
            "description" : "Payment term id, see /payment_terms resource. Determines due date, dunning date, etc. and is defaulted with the configured default payment term, if any.",
            "example" : "e7083036-8779-d492-0c78-332cfde21b68"
          },
          "expirationDate" : {
            "type" : "string",
            "description" : "Optional expiration date for the offer.",
            "format" : "date"
          },
          "completionDate" : {
            "type" : "string",
            "description" : "Date the offer was marked as completed (either accepted or rejected).",
            "format" : "date"
          },
          "completionState" : {
            "type" : "string",
            "description" : "Indicates if the offer is ACCEPTED or REJECTED.",
            "enum" : [ "ACCEPTED", "REJECTED", "IN_PROGRESS", "DONE", "IN_PREPARATION", "DELIVERED" ]
          }
        }
      },
      "OrderConfirmationDtoV1" : {
        "required" : [ "date", "lines", "state" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Number of the business document. Will be automatically generated, unless EXTERNAL is set for the state - then it is a mandatory property. Must be unique.",
            "example" : "R 2016-0001"
          },
          "uuid" : {
            "type" : "string",
            "description" : "Unique identifier of the business document."
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the business document to be printed after the subject. Defaulted with configured layout, unless the state is EXTERNAL."
          },
          "internalDescription" : {
            "type" : "string",
            "description" : "Internal note that isn't printed."
          },
          "date" : {
            "type" : "string",
            "description" : "Date of the invoice. Always required.",
            "format" : "date"
          },
          "state" : {
            "type" : "string",
            "description" : "Determines the state after creation. STAGING leaves the document open for editing, FINALIZED completes it, EXTERNAL for invoices created outside of the application, which requires a number (id) and will not create a PDF or default any layout properties.",
            "example" : "EXTERNAL",
            "enum" : [ "STAGING", "FINALIZED", "EXTERNAL", "CANCELLED" ]
          },
          "netAmount" : {
            "type" : "number",
            "description" : "Total net amount of the document. Must match the sum of all line net amounts if document is FINALIZED or EXTERNAL for verification. Maximum of 10 digits and 2 fractional digits.",
            "example" : 100.0
          },
          "taxAmount" : {
            "type" : "number",
            "description" : "Total tax amount of the document. Must match the sum of all line tax amounts if document is FINALIZED or EXTERNAL for verification. Maximum of 10 digits and 2 fractional digits.",
            "example" : 20.0
          },
          "totalAmount" : {
            "type" : "number",
            "description" : "Total amount of the document including tax. Must match the sum of all line totals if document is FINALIZED or EXTERNAL for verification. Maximum of 10 digits and 2 fractional digits.",
            "example" : 120.0
          },
          "remainingAmount" : {
            "type" : "number",
            "description" : "Remaining, unpaid amount of the document (invoice or credit memo). Decreases with payments, 0 for paid documents.",
            "readOnly" : true
          },
          "currency" : {
            "type" : "string",
            "description" : "Currency code of the document, see the /currencies resource. Defaulted with EUR.",
            "example" : "EUR"
          },
          "currencyRate" : {
            "type" : "number",
            "description" : "Currency rate of the document. Defaulted with 1.",
            "example" : 1
          },
          "referenceText" : {
            "type" : "string",
            "description" : "Reference info to other documents, business case information, remittance numbers, etc."
          },
          "referenceDate" : {
            "type" : "string",
            "description" : "Optional reference date to another business case, transaction, etc.",
            "format" : "date"
          },
          "footer" : {
            "type" : "string",
            "description" : "Description of the business document to be printed after the lines. Defaulted with configured layout, unless the state is EXTERNAL."
          },
          "customer" : {
            "type" : "string",
            "description" : "ID of the customer, see the /customers resource.",
            "example" : "e7083036-8779-d492-0c78-332cfde21b68"
          },
          "customerName" : {
            "type" : "string",
            "description" : "Customer name, for when the customer doesn't have a record, or doesn't need one. Ignored if a customer id is set.",
            "example" : "Doe Inc."
          },
          "layoutSetup" : {
            "type" : "string",
            "description" : "ID of the layout to be used, seee the /layout_setups resource. Defaulted with configured default setup, if any, and ignored if the document state is not FINALIZED.",
            "example" : "e7083036-8779-d492-0c78-332cfde21b68"
          },
          "sequenceGroup" : {
            "type" : "string",
            "description" : "Sequence group id, for when a different sequence group is to be used besides the configured default group. See the /sequence_groups resource.",
            "example" : "e7083036-8779-d492-0c78-332cfde21b68"
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "Timestamp of the last update.",
            "format" : "date-time",
            "readOnly" : true
          },
          "lines" : {
            "type" : "array",
            "description" : "List of all business document lines. The order of this array defines the numbers assigned to the lines.",
            "items" : {
              "$ref" : "#/components/schemas/BusinessDocumentLineDtoV1"
            }
          },
          "additionalAddress" : {
            "type" : "string",
            "description" : "Additional address id, see the /customer/{customer}/additional_addresses resource. Sets an address besides the default to be used for this document."
          },
          "normalizeRoundingErrors" : {
            "type" : "boolean",
            "description" : "Defines if rounding errors between the supplied document totals and lines should be corrected. If enabled, the supplied document totals will not be validated against the system-internal calculation. Instead, the supplied totals are taken as the actual invoice totals, and minor discrepancies (rounding errors) will be corrected in the totals of the last supplied document line to match the system calculation. Use this if your system calculates totals and rounds differently and you have trouble passing the validation. Enabling this will also disable the item price and amount validation against line totals."
          },
          "addressInfo" : {
            "$ref" : "#/components/schemas/AddressInfoDtoV1"
          },
          "paymentTerm" : {
            "type" : "string",
            "description" : "Payment term id, see /payment_terms resource. Determines due date, dunning date, etc. and is defaulted with the configured default payment term, if any.",
            "example" : "e7083036-8779-d492-0c78-332cfde21b68"
          },
          "completionDate" : {
            "type" : "string",
            "description" : "Date the order confirmation was marked as completed (either in progress and shipping or done).",
            "format" : "date"
          },
          "completionState" : {
            "type" : "string",
            "description" : "Indicates if the order confirmation is IN_PROGRESS or DONE",
            "enum" : [ "ACCEPTED", "REJECTED", "IN_PROGRESS", "DONE", "IN_PREPARATION", "DELIVERED" ]
          }
        }
      },
      "PaymentTermDtoV1" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "ID of this payment term to be referenced in invoices, offers, and order confirmations."
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the payment term."
          },
          "description" : {
            "type" : "string",
            "description" : "Longer description of the payment term, not printed."
          },
          "dueDays" : {
            "type" : "integer",
            "description" : "Determines how many days are added to the invoice date to calculate the due date.",
            "format" : "int32"
          },
          "dunningDays" : {
            "type" : "integer",
            "description" : "Determines how many days are added to the invoice date to calculate the dunning date.",
            "format" : "int32"
          },
          "defaultTerm" : {
            "type" : "boolean",
            "description" : "If true, this payment term is used by default in invoices."
          }
        }
      },
      "SequenceGroupDtoV1" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "ID to use in invoices and other business documents."
          },
          "name" : {
            "type" : "string",
            "description" : "Readable name for this sequence group."
          },
          "base" : {
            "type" : "string",
            "description" : "Annual sequences contain the year and are restarted with 1 at the beginning of every year. Permanent groups count up continuously.",
            "enum" : [ "ANNUAL", "PERMANENT" ]
          },
          "defaultGroup" : {
            "type" : "boolean",
            "description" : "Indicates if this is the default group and used for business documents that have no group specified."
          }
        }
      },
      "ItemCategoryDtoV1" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "id of the item category",
            "readOnly" : true
          },
          "name" : {
            "type" : "string",
            "description" : "Name or title of the category.",
            "example" : "Testkategorie"
          },
          "code" : {
            "type" : "string",
            "description" : "Optional short code of the category to be displayed.",
            "example" : "TK1"
          },
          "description" : {
            "type" : "string",
            "description" : "More expansive description, if needed."
          },
          "unitOfMeasure" : {
            "type" : "string",
            "description" : "Short code of the unit type to default for items. See the /units_of_measure resource.",
            "example" : "S"
          },
          "account" : {
            "type" : "string",
            "description" : "Account to default for items, see the /accounts resource.",
            "example" : "4000"
          },
          "taxClassEntry" : {
            "type" : "string",
            "description" : "Tax class entry to default for items, see the /accounts/{account}/tax_class_entries resource.",
            "example" : "020"
          },
          "itemCount" : {
            "type" : "integer",
            "description" : "Total number of items in this category.",
            "format" : "int32",
            "readOnly" : true,
            "example" : 5
          },
          "color" : {
            "type" : "string",
            "description" : "Color code in HTML hex to be used in front-ends.",
            "example" : "0000ff"
          }
        }
      },
      "ItemDtoV1" : {
        "required" : [ "amountType", "name", "sellingPrice" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Uuid to be referenced in business document and receipt lines.",
            "readOnly" : true
          },
          "name" : {
            "type" : "string",
            "description" : "Short name of the item.",
            "example" : "Testprodukt"
          },
          "unitOfMeasure" : {
            "type" : "string",
            "description" : "short code for the amount unit of measure, see the /units_of_measure resource.",
            "example" : "S"
          },
          "number" : {
            "type" : "string",
            "description" : "Item number, if available."
          },
          "description" : {
            "type" : "string",
            "description" : "Longer description of the item, will be added to business document lines."
          },
          "descriptionFormatted" : {
            "type" : "string",
            "description" : "Description pre-formatted and html-sanitized to readable text.",
            "readOnly" : true
          },
          "sellingPrice" : {
            "type" : "number",
            "description" : "Final selling price of the item, used for business document and receipt lines.",
            "example" : 19.9
          },
          "amountType" : {
            "type" : "string",
            "description" : "Indicates if the base price is net without tax (N) or total incl. tax (T).",
            "example" : "N",
            "enum" : [ "N", "T" ]
          },
          "weight" : {
            "type" : "number",
            "description" : "Weight of the item, if present. Unit of measure is not pre-determined and left to the user."
          },
          "size" : {
            "type" : "string",
            "description" : "Size details as text."
          },
          "currency" : {
            "type" : "string",
            "description" : "Currency code of the item price, see the /currencies resource. Defaulted with EUR.",
            "example" : "EUR"
          },
          "purchasePrice" : {
            "type" : "number",
            "description" : "Optional purchase price, part of the calculated total price."
          },
          "margin" : {
            "type" : "number",
            "description" : "Optional margin price, part of the calculated total price."
          },
          "marginMode" : {
            "type" : "string",
            "description" : "Indicates if the margin is net without tax (N) or total incl. tax (T).",
            "example" : "N",
            "enum" : [ "RATE", "CONSTANT" ]
          },
          "additionalCharge" : {
            "type" : "number",
            "description" : "Optional additional charge, part of the calculated total price."
          },
          "additionalChargeMode" : {
            "type" : "string",
            "description" : "Indicates if the additional charge is net without tax (N) or total incl. tax (T).",
            "example" : "N",
            "enum" : [ "RATE", "CONSTANT" ]
          },
          "supplier" : {
            "type" : "string",
            "description" : "Supplier of the item, see the /suppliers resource.",
            "example" : "e7083036-8779-d492-0c78-332cfde21b68"
          },
          "calculatedNetPrice" : {
            "type" : "number",
            "description" : "Calculated net price of the item, based on its partial prices.",
            "readOnly" : true
          },
          "itemCategory" : {
            "type" : "string",
            "description" : "Item category, see the /item_categories resource. Optional, if no categories exist or are not needed.",
            "example" : "e7083036-8779-d492-0c78-332cfde21b68"
          },
          "itemCategoryDefaulting" : {
            "type" : "boolean",
            "description" : "If set to false (default), then account and tax rate are mandatory fields. If enabled, the tax rate and account are defaulted from the item category, unless values are set explicitly.",
            "example" : true
          },
          "barCode" : {
            "type" : "string",
            "description" : "Optional bar code or scanner code of the item."
          },
          "supplierOrderNumber" : {
            "type" : "string",
            "description" : "Optional number for the item number in the supplier's records."
          },
          "addInfo1" : {
            "type" : "string",
            "description" : "Additional user-determined field."
          },
          "addInfo2" : {
            "type" : "string",
            "description" : "Additional user-determined field."
          },
          "addInfo3" : {
            "type" : "string",
            "description" : "Additional user-determined field."
          },
          "account" : {
            "type" : "string",
            "description" : "Account of the item, see /accounts resource. Required if item category defaulting is not enabled.",
            "example" : "4000"
          },
          "taxClassEntry" : {
            "type" : "string",
            "description" : "Tax class entry of the item, see the /accounts/{account}/tax_class_entries resource. Required if item category defaulting is not enabled.",
            "example" : "020"
          },
          "color" : {
            "type" : "string",
            "description" : "Color code in HTML hex to be used in front-ends.",
            "example" : "0000ff"
          }
        }
      },
      "Result" : {
        "type" : "object",
        "properties" : {
          "totalCount" : {
            "type" : "integer",
            "format" : "int64"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          }
        }
      },
      "ResultItemDtoV1" : {
        "type" : "object",
        "properties" : {
          "totalCount" : {
            "type" : "integer",
            "format" : "int64"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ItemDtoV1"
            }
          }
        }
      },
      "CustomerDtoV1" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "UUID of the contact, automatically assigned.",
            "readOnly" : true
          },
          "addressBranchNo" : {
            "type" : "string",
            "description" : "Address branch number of the company, if present."
          },
          "taxNumber" : {
            "type" : "string",
            "description" : "Tax number or UID number of the contact. May be used for matching the contact with document metadata for bookings."
          },
          "shortcut" : {
            "type" : "string",
            "description" : "Custom shortcut for the contact."
          },
          "rating" : {
            "type" : "integer",
            "description" : "Custom rating",
            "format" : "int32"
          },
          "salutationCode" : {
            "type" : "string",
            "description" : "Salutation code for a contact as person."
          },
          "title" : {
            "type" : "string",
            "description" : "Title if the contact references a person."
          },
          "firstName" : {
            "type" : "string",
            "description" : "First name if the contact references a person. Required unless a company name is supplied.",
            "example" : "John"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Last name if the contact references a person. Required unless a company name is supplied.",
            "example" : "Doe"
          },
          "compSalutationCode" : {
            "type" : "string",
            "description" : "Salutation code for a contact as a company."
          },
          "companyName" : {
            "type" : "string",
            "description" : "Company name for a company contact. Required unless a first and last name are supplied.",
            "example" : "Doe Inc."
          },
          "streetName" : {
            "type" : "string",
            "description" : "Street name of the address, excluding the number."
          },
          "streetNumber" : {
            "type" : "string",
            "description" : "Street number of the address. May include special characters to designate floor etc.",
            "example" : "1/3/17"
          },
          "zipCode" : {
            "type" : "string",
            "description" : "Zip code of the address."
          },
          "city" : {
            "type" : "string",
            "description" : "City of the address."
          },
          "emailAddress" : {
            "type" : "string",
            "description" : "E-mail address belonging to the contact."
          },
          "ccEmailAddress" : {
            "type" : "string",
            "description" : "CC-email addresses (single or concatenated with semicolon) for the contact."
          },
          "bccEmailAddress" : {
            "type" : "string",
            "description" : "BCC-email addresses (single or concatenated with semicolon) for the contact."
          },
          "mobileNumber" : {
            "type" : "string",
            "description" : "Mobile number belonging to the contact."
          },
          "telNumber" : {
            "type" : "string",
            "description" : "Telephone number belonging to the contact."
          },
          "faxNumber" : {
            "type" : "string",
            "description" : "Fax number belonging to the contact."
          },
          "skype" : {
            "type" : "string",
            "description" : "Skype user name belonging to the contact."
          },
          "description" : {
            "type" : "string",
            "description" : "Short description or note belonging to he contact."
          },
          "webAddress" : {
            "type" : "string",
            "description" : "Web address belonging to the contact."
          },
          "attribute1" : {
            "type" : "string",
            "description" : "Client-defined custom attribute. Can be freely renamed or used."
          },
          "attribute2" : {
            "type" : "string",
            "description" : "Client-defined custom attribute. Can be freely renamed or used."
          },
          "attribute3" : {
            "type" : "string",
            "description" : "Client-defined custom attribute. Can be freely renamed or used."
          },
          "attribute4" : {
            "type" : "string",
            "description" : "Client-defined custom attribute. Can be freely renamed or used."
          },
          "attribute5" : {
            "type" : "string",
            "description" : "Client-defined custom attribute. Can be freely renamed or used."
          },
          "noVatNumber" : {
            "type" : "boolean",
            "description" : "Determines if the contact is not a company (no UID tax). Defaulted to false."
          },
          "country" : {
            "type" : "string",
            "description" : "Country code of the address. See the /countries resource for all available countries and their codes. Defaulted to AT.",
            "example" : "AT"
          },
          "region" : {
            "type" : "string",
            "description" : "Region code of the address, depending on country. See the /countries/{country}/regions resource for all available regions and their codes.",
            "example" : "STMK"
          },
          "accountOwner" : {
            "type" : "string",
            "description" : "Account owner of the bank account belonging to this contact."
          },
          "bankName" : {
            "type" : "string",
            "description" : "Bank institution name of the bank account belonging to this contact."
          },
          "bankBranchNumber" : {
            "type" : "string",
            "description" : "Bank branch number of the bank account belonging to this contact."
          },
          "accountNumber" : {
            "type" : "string",
            "description" : "Account number of the bank account belonging to this contact."
          },
          "bic" : {
            "type" : "string",
            "description" : "BIC of the bank account belonging to this contact."
          },
          "iban" : {
            "type" : "string",
            "description" : "IBAN of the bank account belonging to this contact. May be used for matching the contact with document metadata for bookings."
          },
          "defaultAccount" : {
            "type" : "string",
            "description" : "Account code for the default account, see /accounts resource. Will be used as default for new incoming/outgoing invoices with the contact.",
            "example" : "4000"
          },
          "defaultTaxClassEntry" : {
            "type" : "string",
            "description" : "Tax class entry code for the default tax class, see /accounts/{account}/tax_class_entries resource. Will be used as default for new incoming/outgoing invoices with the contact.",
            "example" : "020"
          },
          "defaultInvoiceAddress" : {
            "type" : "string",
            "description" : "Additional address id for the default address to use for invoices.",
            "readOnly" : true,
            "example" : "de4dbeef-af57-4666-ab1d-4b420c69ab7f"
          },
          "defaultDeliveryAddress" : {
            "type" : "string",
            "description" : "Additional address id for the default address to use for delivery notes.",
            "readOnly" : true,
            "example" : "de4dbeef-af57-4666-ab1d-4b420c69ab7f"
          },
          "contraAccount" : {
            "type" : "string",
            "description" : "Account code for the (unpaid) contra account, see the /account resource. will be used for new incoming/outgoing invoices in double-entry accounting. If createContraAccount is set, this code determines the account code that will be assigned to the created contra account.",
            "example" : "2000"
          },
          "createContraAccount" : {
            "type" : "boolean",
            "description" : "If true, a new contra account will be created, optionally with a specified code (contraAccount). If customer/supplier has a contra account already set, no contra account will be created. Double-entry accounting only."
          },
          "customerNumber" : {
            "type" : "string",
            "description" : "Custom number for the customer. If autonumbering is enabled, this property is ignored and the number will be generated."
          },
          "mySupplierNumber" : {
            "type" : "string",
            "description" : "Number or identifier the customer assigned to your client."
          },
          "gln" : {
            "type" : "string",
            "description" : "Global location number of the customer."
          },
          "duns" : {
            "type" : "string",
            "description" : "Data Universal Numbering System (DUNS) number of the customer."
          },
          "otherIdentifier" : {
            "type" : "string",
            "description" : "Optional third-party identifier not covered by other properties."
          },
          "dunningStop" : {
            "type" : "boolean",
            "description" : "Indicates if the customer is not to be dunned. If set, the reason must be set as well.",
            "example" : true
          },
          "dunningStopReason" : {
            "type" : "string",
            "description" : "Reason for the dunning stop. Mandatory if dunning stop is set."
          },
          "defaultDunningLevel" : {
            "type" : "string",
            "description" : "Default dunning level, if the customer is to be dunned. See the /dunning_levels resource.",
            "example" : "a88cee2d-0a27-439d-a9c3-e9267075f1f1"
          },
          "defaultPaymentTerm" : {
            "type" : "string",
            "description" : "Default payment term to be used with invoices for this customer. See the /payment_terms resource.",
            "example" : "a88cee2d-0a27-439d-a9c3-e9267075f1f1"
          },
          "discount" : {
            "type" : "number",
            "description" : "Optional discount percentage for this customer. Can be used in invoicing, but is not automatically applied when using the API.",
            "example" : 5
          }
        }
      },
      "AdditionalAddressDtoV1" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "UUID which identifies this instance of an address.",
            "readOnly" : true
          },
          "identifier" : {
            "type" : "string",
            "description" : "Human-readable identifier to label this address."
          },
          "addressType" : {
            "type" : "string",
            "description" : "Determines whether this address is an invoice address, delivery address, or both (default)."
          },
          "title" : {
            "type" : "string",
            "description" : "Human-readable title, like Dr., if the address references a person.",
            "example" : "Dr."
          },
          "firstName" : {
            "type" : "string",
            "description" : "First name if the address references a person."
          },
          "lastName" : {
            "type" : "string",
            "description" : "Last name if the address references a person."
          },
          "streetName" : {
            "type" : "string",
            "description" : "Street name of the address, excluding the number."
          },
          "streetNumber" : {
            "type" : "string",
            "description" : "Street number of the address. May include special characters to designate floor etc.",
            "example" : "1/3/17"
          },
          "zipCode" : {
            "type" : "string",
            "description" : "Zip code of the address."
          },
          "city" : {
            "type" : "string",
            "description" : "City of the address."
          },
          "country" : {
            "type" : "string",
            "description" : "Country code of the address. See the /countries resource for all available countries and their codes. Defaulted to AT.",
            "example" : "AT"
          },
          "region" : {
            "type" : "string",
            "description" : "Region code of the address, depending on country. See the /countries/{country}/regions resource for all available regions and their codes.",
            "example" : "STMK"
          },
          "addressBranchNo" : {
            "type" : "string",
            "description" : "Address branch number of the company, if present."
          },
          "emailAddress" : {
            "type" : "string",
            "description" : "E-mail address belonging to the contact of this address."
          },
          "copyEmailAddress" : {
            "type" : "string",
            "description" : "E-mail address to which a copy of all correspondence should be sent (CC or BCC)."
          },
          "copyEmailType" : {
            "type" : "string",
            "description" : "Copy type when a copy e-mail address is set (CC or BCC). Defaults to BCC."
          },
          "telNumber" : {
            "type" : "string",
            "description" : "Telephone number belonging to the contact of this address."
          },
          "faxNumber" : {
            "type" : "string",
            "description" : "Fax number belonging to the contact of this address."
          },
          "mobileNumber" : {
            "type" : "string",
            "description" : "Mobile number belonging to the contact of this address."
          },
          "skype" : {
            "type" : "string",
            "description" : "Skype user name belonging to the contact of this address."
          },
          "webAddress" : {
            "type" : "string",
            "description" : "Web address belonging to the contact, or the branch address."
          },
          "description" : {
            "type" : "string",
            "description" : "Short description or note belonging to this address."
          },
          "salutationCode" : {
            "type" : "string",
            "description" : "Salutation code for a contact as person."
          }
        }
      },
      "CustomerSupplierContraAccountCreationDtoV1" : {
        "type" : "object",
        "properties" : {
          "contraAccount" : {
            "type" : "string",
            "description" : "Account code that should be used for the new contra account. Must not be used already, see the /accounts resource."
          }
        }
      },
      "SupplierDtoV1" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "UUID of the contact, automatically assigned.",
            "readOnly" : true
          },
          "addressBranchNo" : {
            "type" : "string",
            "description" : "Address branch number of the company, if present."
          },
          "taxNumber" : {
            "type" : "string",
            "description" : "Tax number or UID number of the contact. May be used for matching the contact with document metadata for bookings."
          },
          "shortcut" : {
            "type" : "string",
            "description" : "Custom shortcut for the contact."
          },
          "rating" : {
            "type" : "integer",
            "description" : "Custom rating",
            "format" : "int32"
          },
          "salutationCode" : {
            "type" : "string",
            "description" : "Salutation code for a contact as person."
          },
          "title" : {
            "type" : "string",
            "description" : "Title if the contact references a person."
          },
          "firstName" : {
            "type" : "string",
            "description" : "First name if the contact references a person. Required unless a company name is supplied.",
            "example" : "John"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Last name if the contact references a person. Required unless a company name is supplied.",
            "example" : "Doe"
          },
          "compSalutationCode" : {
            "type" : "string",
            "description" : "Salutation code for a contact as a company."
          },
          "companyName" : {
            "type" : "string",
            "description" : "Company name for a company contact. Required unless a first and last name are supplied.",
            "example" : "Doe Inc."
          },
          "streetName" : {
            "type" : "string",
            "description" : "Street name of the address, excluding the number."
          },
          "streetNumber" : {
            "type" : "string",
            "description" : "Street number of the address. May include special characters to designate floor etc.",
            "example" : "1/3/17"
          },
          "zipCode" : {
            "type" : "string",
            "description" : "Zip code of the address."
          },
          "city" : {
            "type" : "string",
            "description" : "City of the address."
          },
          "emailAddress" : {
            "type" : "string",
            "description" : "E-mail address belonging to the contact."
          },
          "ccEmailAddress" : {
            "type" : "string",
            "description" : "CC-email addresses (single or concatenated with semicolon) for the contact."
          },
          "bccEmailAddress" : {
            "type" : "string",
            "description" : "BCC-email addresses (single or concatenated with semicolon) for the contact."
          },
          "mobileNumber" : {
            "type" : "string",
            "description" : "Mobile number belonging to the contact."
          },
          "telNumber" : {
            "type" : "string",
            "description" : "Telephone number belonging to the contact."
          },
          "faxNumber" : {
            "type" : "string",
            "description" : "Fax number belonging to the contact."
          },
          "skype" : {
            "type" : "string",
            "description" : "Skype user name belonging to the contact."
          },
          "description" : {
            "type" : "string",
            "description" : "Short description or note belonging to he contact."
          },
          "webAddress" : {
            "type" : "string",
            "description" : "Web address belonging to the contact."
          },
          "attribute1" : {
            "type" : "string",
            "description" : "Client-defined custom attribute. Can be freely renamed or used."
          },
          "attribute2" : {
            "type" : "string",
            "description" : "Client-defined custom attribute. Can be freely renamed or used."
          },
          "attribute3" : {
            "type" : "string",
            "description" : "Client-defined custom attribute. Can be freely renamed or used."
          },
          "attribute4" : {
            "type" : "string",
            "description" : "Client-defined custom attribute. Can be freely renamed or used."
          },
          "attribute5" : {
            "type" : "string",
            "description" : "Client-defined custom attribute. Can be freely renamed or used."
          },
          "noVatNumber" : {
            "type" : "boolean",
            "description" : "Determines if the contact is not a company (no UID tax). Defaulted to false."
          },
          "country" : {
            "type" : "string",
            "description" : "Country code of the address. See the /countries resource for all available countries and their codes. Defaulted to AT.",
            "example" : "AT"
          },
          "region" : {
            "type" : "string",
            "description" : "Region code of the address, depending on country. See the /countries/{country}/regions resource for all available regions and their codes.",
            "example" : "STMK"
          },
          "accountOwner" : {
            "type" : "string",
            "description" : "Account owner of the bank account belonging to this contact."
          },
          "bankName" : {
            "type" : "string",
            "description" : "Bank institution name of the bank account belonging to this contact."
          },
          "bankBranchNumber" : {
            "type" : "string",
            "description" : "Bank branch number of the bank account belonging to this contact."
          },
          "accountNumber" : {
            "type" : "string",
            "description" : "Account number of the bank account belonging to this contact."
          },
          "bic" : {
            "type" : "string",
            "description" : "BIC of the bank account belonging to this contact."
          },
          "iban" : {
            "type" : "string",
            "description" : "IBAN of the bank account belonging to this contact. May be used for matching the contact with document metadata for bookings."
          },
          "defaultAccount" : {
            "type" : "string",
            "description" : "Account code for the default account, see /accounts resource. Will be used as default for new incoming/outgoing invoices with the contact.",
            "example" : "4000"
          },
          "defaultTaxClassEntry" : {
            "type" : "string",
            "description" : "Tax class entry code for the default tax class, see /accounts/{account}/tax_class_entries resource. Will be used as default for new incoming/outgoing invoices with the contact.",
            "example" : "020"
          },
          "defaultInvoiceAddress" : {
            "type" : "string",
            "description" : "Additional address id for the default address to use for invoices.",
            "readOnly" : true,
            "example" : "de4dbeef-af57-4666-ab1d-4b420c69ab7f"
          },
          "defaultDeliveryAddress" : {
            "type" : "string",
            "description" : "Additional address id for the default address to use for delivery notes.",
            "readOnly" : true,
            "example" : "de4dbeef-af57-4666-ab1d-4b420c69ab7f"
          },
          "contraAccount" : {
            "type" : "string",
            "description" : "Account code for the (unpaid) contra account, see the /account resource. will be used for new incoming/outgoing invoices in double-entry accounting. If createContraAccount is set, this code determines the account code that will be assigned to the created contra account.",
            "example" : "2000"
          },
          "createContraAccount" : {
            "type" : "boolean",
            "description" : "If true, a new contra account will be created, optionally with a specified code (contraAccount). If customer/supplier has a contra account already set, no contra account will be created. Double-entry accounting only."
          },
          "supplierNumber" : {
            "type" : "string",
            "description" : "Custom number for the supplier. If autonumbering is enabled, this property is ignored and the number will be generated."
          },
          "myCustomerNumber" : {
            "type" : "string",
            "description" : "Number or identifier the supplier assigned to your client."
          }
        }
      },
      "CashRegisterDtoV1" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Cash register number, which must be unique.",
            "format" : "int32"
          },
          "name" : {
            "type" : "string",
            "description" : "Human-readable name of the cash register."
          },
          "group" : {
            "type" : "string",
            "description" : "Optional, freely defined register group, for example by payment method or branch office."
          },
          "state" : {
            "type" : "string",
            "description" : "NEW indicates a new cash register that can be freely edited and is not active. ACTIVE are cash registers ready to accept receipts and are read-only except for a few properties. LOCKED registers have been decommissioned and cannot be used. TEST designates a freely usable test cash register, which is automatically created.",
            "enum" : [ "NEW", "READY", "ACTIVE", "LOCKED", "TEST" ]
          },
          "currentBalance" : {
            "type" : "number",
            "description" : "Current total balance of the register. Cannot drop below zero."
          },
          "allowPastIncome" : {
            "type" : "boolean",
            "description" : "Receipts are usually created with the current date and time. If this is enabled, backdating receipts is allowed, and a date/time can be supplied on receipt creation. This is useful when receipts are created by hand for mobile workers and registered afterwards. Dating a receipt before the last receipt in the cash register is prohibited regardless of this setting."
          },
          "enableDrawback" : {
            "type" : "boolean",
            "description" : "When this is enabled, all front-ends of the cash register are supposed to activate the cashback feature, i.e. display the amount of currency returned to the customer on overpayment."
          },
          "defaultRegister" : {
            "type" : "boolean",
            "description" : "Indicates if this is the default cash register to use in frontends."
          },
          "bankAccountId" : {
            "type" : "string",
            "description" : "Bank account id for the cash payment account, see the /bank_accounts resource. Note that bank_accounts refers to payment accounts, which can also be cash, Paypal, or others."
          },
          "lastReceiptDateTime" : {
            "type" : "string",
            "description" : "Date and time of the last added receipt",
            "format" : "date-time"
          }
        }
      },
      "CashRegisterLayoutDtoV1" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "Human-readable name of the layout."
          },
          "layoutPrintType" : {
            "type" : "string",
            "description" : "Defines the type of the layout, being either types for printers (like A4) or special receipt printer types.",
            "enum" : [ "STANDARD", "CUSTOM_PAPER", "CUSTOM_TEMPLATE", "STANDARD_PAPER", "STANDARD_BON", "SMALL_BON", "APP_SMALL_BON", "APP_BON" ]
          },
          "displaySubject" : {
            "type" : "string",
            "description" : "Subject line for the regular receipt."
          },
          "cancelDisplaySubject" : {
            "type" : "string",
            "description" : "Subject line for the cancellation receipt."
          },
          "positionLogo" : {
            "type" : "string",
            "description" : "Relative position of the logo (top image).",
            "enum" : [ "LEFT", "RIGHT", "CENTER" ]
          },
          "positionHeader" : {
            "type" : "string",
            "description" : "Relative position of the header text.",
            "enum" : [ "LEFT", "RIGHT", "CENTER" ]
          },
          "positionFooter" : {
            "type" : "string",
            "description" : "Relative position of the footer text.",
            "enum" : [ "LEFT", "RIGHT", "CENTER" ]
          },
          "backgroundColor" : {
            "type" : "string",
            "description" : "Color of the background in HTML hex.",
            "example" : "FFFFFF"
          },
          "fontColor" : {
            "type" : "string",
            "description" : "Color of the font in HTML hex.",
            "example" : "000000"
          },
          "fontType" : {
            "type" : "string",
            "description" : "Font family, like ARIAL or COURIER.",
            "example" : "ARIAL"
          },
          "header" : {
            "type" : "string",
            "description" : "Header text printed at the top of the page."
          },
          "preLinesText" : {
            "type" : "string",
            "description" : "Text printed after the subject and before the receipt lines."
          },
          "postLinesText" : {
            "type" : "string",
            "description" : "Text printed after the receipt lines."
          },
          "footer" : {
            "type" : "string",
            "description" : "Footer text printed at the bottom of the page."
          },
          "logoContentType" : {
            "type" : "string",
            "description" : "Image format of the logo.",
            "enum" : [ "JPG", "JPEG", "PNG" ]
          },
          "logo" : {
            "type" : "string",
            "description" : "Base64-encoded image to be printed at the top."
          },
          "amountType" : {
            "type" : "string",
            "description" : "For receipts printed on a printer with limited space (Star printer), this property determines if either the net or total price of a line should be printed on the receipt.",
            "enum" : [ "N", "T" ]
          },
          "printDiscount" : {
            "type" : "boolean",
            "description" : "Defines if detailed discount information should be printed on the receipt."
          }
        }
      },
      "DailyClosingDtoV1" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Date of the daily closing, unique.",
            "format" : "date"
          },
          "creationDate" : {
            "type" : "string",
            "description" : "Timestamp of the creation date of this daily closing.",
            "format" : "date-time"
          },
          "state" : {
            "type" : "string",
            "description" : "State of the daily closing. Once FINALIZED or BOOKED, no further receipts are possible.",
            "enum" : [ "OPEN", "FINALIZED", "BOOKED" ]
          },
          "openingBalance" : {
            "type" : "number",
            "description" : "Balance of the cash register at time of opening."
          },
          "closingBalance" : {
            "type" : "number",
            "description" : "Balance of the cash register at the time of finalizing the daily closing."
          },
          "incomeCount" : {
            "type" : "integer",
            "description" : "Number of income receipts at the time of closing.",
            "format" : "int32"
          },
          "rebookCount" : {
            "type" : "integer",
            "description" : "Number of rebook receipts at the time of closing.",
            "format" : "int32"
          },
          "otherCount" : {
            "type" : "integer",
            "description" : "Number of special receipts, like monthly and yearly closing receipts, at the time of closing.",
            "format" : "int32"
          },
          "totalCount" : {
            "type" : "integer",
            "description" : "Total number of receipts at the time of closing.",
            "format" : "int32"
          },
          "incomeNet" : {
            "type" : "number",
            "description" : "Net amount of all income receipts in this daily closing."
          },
          "incomeTax" : {
            "type" : "number",
            "description" : "Tax amount of all income receipts in this daily closing."
          },
          "incomeTotal" : {
            "type" : "number",
            "description" : "Total amount of all income receipts in this daily closing."
          },
          "rebookTotal" : {
            "type" : "number",
            "description" : "Total amount of all rebook receipts in this daily closing."
          },
          "monthlyClosing" : {
            "type" : "boolean",
            "description" : "Indicates if this closing also closes the month. Once a month is closed, no further receipts can be registered for it. Is done automatically to the last closing of a month when a closing for the next month is opened."
          },
          "yearlyClosing" : {
            "type" : "boolean",
            "description" : "Indicates if this closing also closes the year. Once a year is closed, no further receipts can be registered for it. Is done automatically to the last closing of a year when a closing for the next year is opened."
          }
        }
      },
      "DailyClosingFinalizationDtoV1" : {
        "required" : [ "closingBalance", "totalCount" ],
        "type" : "object",
        "properties" : {
          "closingBalance" : {
            "type" : "number",
            "description" : "The daily closing balance as provided by the API or calculated. Must match the backend closing balance for confirmation."
          },
          "totalCount" : {
            "type" : "integer",
            "description" : "The daily total receipt count as provided by the API or calculated. Must match the backend closing balance for confirmation.",
            "format" : "int32"
          }
        }
      },
      "BusyDocMailTemplateDtoV1" : {
        "type" : "object",
        "properties" : {
          "uuid" : {
            "type" : "string",
            "description" : "ID of the mail template",
            "example" : "57307518-c2e8-c26d-8f49-e6feabdca08d"
          },
          "sender" : {
            "type" : "string",
            "description" : "Email address of the sender",
            "example" : "test@test.at"
          },
          "senderName" : {
            "type" : "string",
            "description" : "Name of the sender",
            "example" : "Max Muster"
          },
          "subject" : {
            "type" : "string",
            "description" : "Subject of the Email to be sent",
            "example" : "Annual Receipt Sum"
          },
          "content" : {
            "type" : "string",
            "description" : "Content of the Email to be sent",
            "example" : "This Mail contains the annual receipt sum"
          },
          "ccCopyEmailAddress" : {
            "type" : "string",
            "description" : "Email addresses mentioned in the CC, separated by semicolons ;",
            "example" : "test2@test.at; test3@test.at"
          },
          "bccCopyEmailAddress" : {
            "type" : "string",
            "description" : "Email addresses mentioned in the BCC, separated by semicolons ;",
            "example" : "test2@test.at; test3@test.at"
          },
          "dispositionNotification" : {
            "type" : "boolean",
            "description" : "Whether the mail uses a disposition notification header or not",
            "example" : false
          },
          "attachVcard" : {
            "type" : "boolean",
            "description" : "Whether to attach a vCard or not",
            "example" : false
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the template",
            "example" : "Test mail template"
          },
          "defaultFlag" : {
            "type" : "boolean",
            "description" : "Whether this template is the default template that is chosen if no other template is supplied",
            "example" : true
          },
          "documentType" : {
            "type" : "string",
            "description" : "The document type of this template",
            "example" : "INVOICE",
            "enum" : [ "INVOICE", "OFFER", "DELIVERY_NOTE", "DUNNING_LETTER", "CREDIT_MEMO", "ORDER_CONFIRMATION", "LETTER", "RECEIPT" ]
          }
        }
      },
      "ReceiptCheckResultDtoV1" : {
        "type" : "object",
        "properties" : {
          "error" : {
            "type" : "string"
          },
          "isValid" : {
            "type" : "boolean"
          }
        }
      },
      "ReceiptDtoV1" : {
        "required" : [ "totalAmount", "type" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Sequence number of the receipt, will be set automatically.",
            "readOnly" : true,
            "example" : "2017.0001"
          },
          "type" : {
            "type" : "string",
            "description" : "Type of the receipt. Only INCOME and REBOOK are valid for creating receipts, other types are created automatically.",
            "example" : "INCOME",
            "enum" : [ "INCOME", "REBOOK", "INITIAL", "MONTHLY", "YEARLY", "FINAL" ]
          },
          "dateTime" : {
            "type" : "string",
            "description" : "Date and time of the receipt, defaulted to the current time.",
            "format" : "date-time"
          },
          "creationDateTime" : {
            "type" : "string",
            "description" : "Creation date and time of the receipt, will be set automatically.",
            "format" : "date-time",
            "readOnly" : true
          },
          "customer" : {
            "type" : "string",
            "description" : "Customer id, see the /customers resource. If no customer name or id is provided, this receipt counts as cash sale. Only for income receipts.",
            "example" : "e7083036-8779-d492-0c78-332cfde21b68"
          },
          "customerName" : {
            "type" : "string",
            "description" : "Customer name, assigned automatically from the customer if the customer id is set. Otherwise, it can be defined freely.",
            "example" : "Doe Inc."
          },
          "customerMail" : {
            "type" : "string",
            "description" : "Customer e-mail address. If provided, an e-mail will be sent with the receipt PDF. Omit if no e-mail is wanted.",
            "example" : "example@example.com"
          },
          "customerMailSent" : {
            "type" : "boolean",
            "description" : "Only set when a customerMail was requested. Indicates if the mail transfer was successful - a failed transfer will not raise an API error, as the receipt will be saved in either case.",
            "readOnly" : true
          },
          "additionalAddress" : {
            "type" : "string",
            "description" : "Additional address id, see the /customer/{customer}/additional_addresses resource. Sets an address besides the default to be used for this receipt."
          },
          "referenceDate" : {
            "type" : "string",
            "description" : "Optional reference date referring to the date of an invoice or receipt.",
            "format" : "date"
          },
          "referenceText" : {
            "type" : "string",
            "description" : "Optional reference to an invoice or other receipt."
          },
          "netAmount" : {
            "type" : "number",
            "description" : "Net amount of the receipt.",
            "readOnly" : true,
            "example" : 100.0
          },
          "taxAmount" : {
            "type" : "number",
            "description" : "Tax amount of the receipt.",
            "readOnly" : true,
            "example" : 20.0
          },
          "totalAmount" : {
            "type" : "number",
            "description" : "Total amount of the receipt. It must match the total line sum of the receipt. Maximum of 10 digits and 2 fractional digits.",
            "example" : 120.0
          },
          "cancelReceipt" : {
            "type" : "string",
            "description" : "Sequence number of the cancel receipt. Only for cancelled receipts.",
            "readOnly" : true,
            "example" : "2017.0001"
          },
          "originalReceipt" : {
            "type" : "string",
            "description" : "Sequence number of the original receipt, if this receipt is a cancel receipt.",
            "readOnly" : true,
            "example" : "2017.0001"
          },
          "toAccount" : {
            "type" : "string",
            "description" : "Account that the amount is transferred to, see the /accounts resource. Must be of the cash account type (U). Only valid for REBOOK receipt types, for which either this or fromAccount is set.",
            "example" : "2800"
          },
          "fromAccount" : {
            "type" : "string",
            "description" : "Account that the amount is transferred from, see the /accounts resource. Must be of the cash account type (U).  Only valid for REBOOK receipt types, for which either this or toAccount is set.",
            "example" : "2800"
          },
          "description" : {
            "type" : "string",
            "description" : "Rebook description. Only valid for REBOOK receipt types."
          },
          "qrCode" : {
            "type" : "string",
            "description" : "QR code of the receipt as string representation, if present (RKSV)",
            "readOnly" : true
          },
          "lines" : {
            "type" : "array",
            "description" : "Receipt lines for INCOME type receipts.",
            "items" : {
              "$ref" : "#/components/schemas/ReceiptLineDtoV1"
            }
          },
          "addressInfo" : {
            "$ref" : "#/components/schemas/AddressInfoDtoV1"
          },
          "textAfterLines" : {
            "type" : "string",
            "description" : "Optional text after lines, for example when referencing an invoice.",
            "readOnly" : true
          },
          "mailTemplate" : {
            "type" : "string",
            "description" : "The ID of the mail template that should be used for sending an email",
            "example" : "2659fb18-5963-daf6-fd18-087c8678075d"
          },
          "userFullName" : {
            "type" : "string",
            "description" : "The name of the user that registered the receipt.",
            "readOnly" : true
          }
        }
      },
      "ReceiptLineDtoV1" : {
        "required" : [ "totalPrice" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Automatically assigned line number.",
            "format" : "int32",
            "readOnly" : true
          },
          "itemNumber" : {
            "type" : "string",
            "description" : "Item number, is defaulted if an item is set.",
            "example" : "A12345"
          },
          "item" : {
            "type" : "string",
            "description" : "Item id, see the /items resource. Defaults name, description, account, tax class entry, item price, item number and unit of measure.",
            "example" : "e7083036-8779-d492-0c78-332cfde21b68"
          },
          "itemName" : {
            "type" : "string",
            "description" : "Name of the item for this line. Is defaulted if an item is set.",
            "example" : "Testprodukt"
          },
          "itemDescription" : {
            "type" : "string",
            "description" : "Extended description of the item for this line. Is defaulted if an item is set.",
            "example" : "Testprodukt"
          },
          "itemPrice" : {
            "type" : "number",
            "description" : "Single item price. Is defaulted if item is set.",
            "example" : 10.0
          },
          "itemPriceType" : {
            "type" : "string",
            "description" : "Determine if the item price is net without tax (N) or total including tax (T). Is defaulted if an item is set.",
            "example" : "N",
            "enum" : [ "N", "T" ]
          },
          "unitOfMeasure" : {
            "type" : "string",
            "description" : "Short code for unit type, see the /units_of_measure resource. Is defaulted if an item is set.",
            "example" : "PC"
          },
          "netPrice" : {
            "type" : "number",
            "description" : "Line total net price. Maximum of 10 digits and 5 fractional digits.",
            "example" : 100.0
          },
          "taxPrice" : {
            "type" : "number",
            "description" : "Line total tax price. Maximum of 10 digits and 5 fractional digits.",
            "example" : 20.0
          },
          "totalPrice" : {
            "type" : "number",
            "description" : "Line total price, always required in API calls for verification. Maximum of 10 digits and 5 fractional digits.",
            "example" : 120.0
          },
          "discount" : {
            "type" : "number",
            "description" : "Discount in total or as percentage, must be set together with discount mode. Maximum of 10 digits and 5 fractional digits.",
            "example" : 10.0
          },
          "discountMode" : {
            "type" : "string",
            "description" : "Indicates if the discount is total (CONSTANT) or a percentage (RATE). Must be set together with discount.",
            "example" : "CONSTANT",
            "enum" : [ "RATE", "CONSTANT" ]
          },
          "amount" : {
            "type" : "number",
            "description" : "Total item amount, defaulted with 1. Maximum of 10 digits and 5 fractional digits.",
            "example" : 10
          },
          "account" : {
            "type" : "string",
            "description" : "Account code to use, see the /accounts resource. Is defaulted if an item is set.",
            "example" : "4000"
          },
          "taxClassEntry" : {
            "type" : "string",
            "description" : "Tax class entry code for the account, determining the tax rate. See the /accounts/{account}/tax_class_entries resource. Is defaulted if an item is set.",
            "example" : "020"
          },
          "note" : {
            "type" : "string",
            "description" : "Optional internal note which is not printed."
          }
        },
        "description" : "Receipt lines for INCOME type receipts."
      },
      "ReceiptItemSummaryDtoV1" : {
        "type" : "object",
        "properties" : {
          "year" : {
            "type" : "integer",
            "description" : "Year of the grouped receipt.",
            "format" : "int32",
            "example" : 2024
          },
          "month" : {
            "type" : "integer",
            "description" : "Month of the grouped receipt. Only present with MONTH and DAY reporting type.",
            "format" : "int32",
            "example" : 5
          },
          "day" : {
            "type" : "integer",
            "description" : "Day of the grouped receipt. Only present with DAY reporting type.",
            "format" : "int32",
            "example" : 31
          },
          "itemName" : {
            "type" : "string",
            "description" : "Name of the item the receipt is grouped for.",
            "example" : "Orange Tree"
          },
          "incomeNet" : {
            "type" : "number",
            "description" : "Net sum (after taxes) in the grouped receipt",
            "example" : 2000
          },
          "incomeTax" : {
            "type" : "number",
            "description" : "Tax of the grouped receipt",
            "example" : 1800
          },
          "incomeTotal" : {
            "type" : "number",
            "description" : "Total amount of income cash in the grouped receipt",
            "example" : 2000
          },
          "itemAmount" : {
            "type" : "number",
            "description" : "Amount of items in the grouped receipt",
            "example" : 2000
          },
          "itemUom" : {
            "type" : "string",
            "description" : "Unit of measure of the item",
            "example" : "S"
          }
        }
      },
      "ReceiptPeriodSummaryDtoV1" : {
        "type" : "object",
        "properties" : {
          "year" : {
            "type" : "integer",
            "description" : "Year of the grouped receipt.",
            "format" : "int32",
            "example" : 2024
          },
          "month" : {
            "type" : "integer",
            "description" : "Month of the grouped receipt. Only present with MONTH and DAY reporting type.",
            "format" : "int32",
            "example" : 5
          },
          "day" : {
            "type" : "integer",
            "description" : "Day of the grouped receipt. Only present with DAY reporting type.",
            "format" : "int32",
            "example" : 31
          },
          "incomeNet" : {
            "type" : "number",
            "description" : "Net sum (before taxes) of all income receipts.",
            "example" : 2000
          },
          "incomeTax" : {
            "type" : "number",
            "description" : "Tax sum of all income receipts.",
            "example" : 1800
          },
          "incomeTotal" : {
            "type" : "number",
            "description" : "Total amount of all income receipts.",
            "example" : 2000
          },
          "rebookTotal" : {
            "type" : "number",
            "description" : "Total amount of rebooks.",
            "example" : 2000
          }
        }
      },
      "StarImageSegment" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/StarPrintSegment"
        } ]
      },
      "StarPrintReceipt" : {
        "type" : "object",
        "properties" : {
          "printerConfig" : {
            "$ref" : "#/components/schemas/StarPrinterConfig"
          },
          "bon" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/StarPrintSegment"
            }
          }
        }
      },
      "StarPrintSegment" : {
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "alignment" : {
            "type" : "string",
            "enum" : [ "Left", "Center", "Right" ]
          },
          "data" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          }
        },
        "discriminator" : {
          "propertyName" : "type"
        }
      },
      "StarPrinterConfig" : {
        "type" : "object",
        "properties" : {
          "printPaperSize" : {
            "type" : "string",
            "enum" : [ "ONE_INCH", "TWO_INCH", "THREE_INCH", "FOUR_INCH" ]
          },
          "encoding" : {
            "type" : "string"
          },
          "language" : {
            "type" : "string"
          }
        }
      },
      "StarQrSegment" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/StarPrintSegment"
        }, {
          "type" : "object",
          "properties" : {
            "correctionLevel" : {
              "type" : "string",
              "enum" : [ "L", "M", "Q", "H" ]
            },
            "qrCellSize" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        } ]
      },
      "StarTextSegment" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/StarPrintSegment"
        }, {
          "type" : "object",
          "properties" : {
            "style" : {
              "$ref" : "#/components/schemas/StarTextStyle"
            }
          }
        } ]
      },
      "StarTextStyle" : {
        "type" : "object",
        "properties" : {
          "height" : {
            "type" : "integer",
            "format" : "int32"
          },
          "width" : {
            "type" : "integer",
            "format" : "int32"
          },
          "bold" : {
            "type" : "boolean"
          },
          "underline" : {
            "type" : "boolean"
          }
        }
      },
      "ReceiptUserSummaryDtoV1" : {
        "type" : "object",
        "properties" : {
          "year" : {
            "type" : "integer",
            "description" : "Year of the grouped receipt.",
            "format" : "int32",
            "example" : 2023
          },
          "month" : {
            "type" : "integer",
            "description" : "Month of the grouped receipt. Only present with MONTH and DAY reporting type.",
            "format" : "int32",
            "example" : 5
          },
          "day" : {
            "type" : "integer",
            "description" : "Day of the grouped receipt. Only present with DAY reporting type.",
            "format" : "int32",
            "example" : 31
          },
          "endUserFirstName" : {
            "type" : "string",
            "description" : "First name of the user the receipt was grouped for",
            "example" : "Isaac"
          },
          "endUserLastName" : {
            "type" : "string",
            "description" : "Last name of the user the receipt was grouped for",
            "example" : "Newton"
          },
          "incomeNet" : {
            "type" : "number",
            "description" : "Net sum (after taxes) in the grouped receipt",
            "example" : 2000
          },
          "incomeTax" : {
            "type" : "number",
            "description" : "Tax of the grouped receipt",
            "example" : 1800
          },
          "incomeTotal" : {
            "type" : "number",
            "description" : "Total amount of income cash in the grouped receipt",
            "example" : 2000
          },
          "rebookTotal" : {
            "type" : "number",
            "description" : "Total amount of rebooked cash in the grouped receipt",
            "example" : 2000
          }
        }
      },
      "MailRecipientDtoV1" : {
        "type" : "object",
        "properties" : {
          "address" : {
            "type" : "string",
            "description" : "E-mail address of the recipient.",
            "example" : "example@example.com"
          },
          "mailTemplate" : {
            "type" : "string",
            "description" : "The ID of the mail template that should be used for sending an email",
            "example" : "2659fb18-5963-daf6-fd18-087c8678075d"
          }
        }
      },
      "TripDtoV1" : {
        "required" : [ "country", "description", "fromDate", "fromKm", "toDate", "toKm", "usageType", "vehicleId" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Id for this trip"
          },
          "fromKm" : {
            "type" : "integer",
            "description" : "From km for the vehicle",
            "format" : "int32"
          },
          "toKm" : {
            "type" : "integer",
            "description" : "To km for the vehicle",
            "format" : "int32"
          },
          "description" : {
            "type" : "string",
            "description" : "Description for the trip"
          },
          "country" : {
            "type" : "string",
            "description" : "Country code, see the /countries resource"
          },
          "fromDate" : {
            "type" : "string",
            "description" : "From trip date time",
            "format" : "date-time"
          },
          "toDate" : {
            "type" : "string",
            "description" : "To trip date time",
            "format" : "date-time"
          },
          "totalKm" : {
            "type" : "integer",
            "description" : "Total km for the trip",
            "format" : "int32",
            "readOnly" : true
          },
          "totalPrice" : {
            "type" : "number",
            "description" : "Calculated total price for this trip",
            "readOnly" : true
          },
          "usageType" : {
            "type" : "string",
            "description" : "Km type",
            "example" : "PRIVATE, BUSINESS",
            "enum" : [ "PRIVATE", "BUSINESS" ]
          },
          "vehicleId" : {
            "type" : "string",
            "description" : "Id for the vehicle",
            "example" : "40e2f246-8998-3dec-b51c-4edf7f688d4a"
          },
          "currency" : {
            "type" : "string",
            "description" : "Currency, see the /currency resource. Defaulted with the main currency.",
            "example" : "EUR"
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "Timestamp of the last update.",
            "format" : "date-time",
            "readOnly" : true
          },
          "waypointCounter" : {
            "type" : "integer",
            "description" : "How many waypoints are registered with this trip.",
            "format" : "int32",
            "readOnly" : true
          },
          "waypoints" : {
            "type" : "array",
            "description" : "Waypoints for this trip (optional)",
            "items" : {
              "$ref" : "#/components/schemas/WayPointDtoV1"
            }
          },
          "transferred" : {
            "type" : "boolean",
            "description" : "Indicates if the trip was booked. A booked trip can't be changed unless the booking is cancelled first.",
            "readOnly" : true
          }
        }
      },
      "WayPointDtoV1" : {
        "required" : [ "id", "latitude", "longitude", "timestamp" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Id"
          },
          "latitude" : {
            "type" : "number",
            "description" : "Geographic latitude coordinate",
            "format" : "double"
          },
          "longitude" : {
            "type" : "number",
            "description" : "Geographic longitude coordinate",
            "format" : "double"
          },
          "timestamp" : {
            "type" : "string",
            "description" : "Timestamp for this waypoint",
            "format" : "date-time"
          },
          "geoHash" : {
            "type" : "string",
            "description" : "Geocoding system"
          },
          "horizontalAccuracy" : {
            "type" : "number",
            "description" : "Represents the radius of the margin of error of the measurement",
            "format" : "double"
          },
          "speedAccuracy" : {
            "type" : "number",
            "description" : "Matching speed and accuracy during machining",
            "format" : "double"
          },
          "speed" : {
            "type" : "number",
            "description" : "Speed in m/s",
            "format" : "double"
          }
        },
        "description" : "Waypoints for this trip (optional)"
      },
      "VehicleDtoV1" : {
        "required" : [ "description", "initialKm", "usageType", "vehicleEnteredDate", "vehicleType" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Id for this vehicle."
          },
          "initialKm" : {
            "type" : "integer",
            "description" : "Initial km for this vehicle",
            "format" : "int32"
          },
          "usageType" : {
            "type" : "string",
            "description" : "Km type for this vehicle",
            "example" : "PRIVATE, BUSINESS",
            "enum" : [ "PRIVATE", "BUSINESS" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Description for this vehicle"
          },
          "vehicleType" : {
            "type" : "string",
            "description" : "Vehicle type for this vehicle",
            "example" : "CAR,MOTORBIKE,BIKE,PASSENGER,MOTORBIKE_SMALL",
            "enum" : [ "CAR", "MOTORBIKE", "BIKE", "PASSENGER", "MOTORBIKE_SMALL" ]
          },
          "vehicleEnteredDate" : {
            "type" : "string",
            "description" : "Vehicle entered date for this vehicle",
            "format" : "date"
          },
          "vehicleRetiredDate" : {
            "type" : "string",
            "description" : "Vehicle retired date for this vehicle",
            "format" : "date"
          },
          "defaultFlag" : {
            "type" : "boolean",
            "description" : "Default flag for this vehicle"
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "Timestamp of the last update.",
            "format" : "date-time",
            "readOnly" : true
          }
        }
      },
      "UserDtoV1" : {
        "required" : [ "email", "firstName", "language", "lastName", "username" ],
        "type" : "object",
        "properties" : {
          "salutation" : {
            "type" : "string"
          },
          "firstName" : {
            "type" : "string"
          },
          "lastName" : {
            "type" : "string"
          },
          "username" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "language" : {
            "type" : "string",
            "description" : "Two-letter language code.",
            "example" : "de"
          },
          "languageRegion" : {
            "type" : "string",
            "description" : "Optional specific locale for region formatting.",
            "example" : "de-CH"
          }
        }
      }
    },
    "securitySchemes" : {
      "bearerAuth" : {
        "type" : "http",
        "scheme" : "bearer",
        "bearerFormat" : "JWT"
      }
    }
  }
}